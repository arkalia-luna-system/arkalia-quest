/**
 * Syst√®me de Feedback Contextuel Intelligent
 * Adapte les r√©ponses LUNA selon le profil et le contexte du joueur
 */

class ContextualFeedbackSystem {
    constructor() {
        this.playerProfile = this.detectPlayerProfile();
        this.interactionHistory = this.loadInteractionHistory();
        this.feedbackTemplates = this.initializeFeedbackTemplates();
        this.lastInteractionTime = Date.now();
        this.repetitionCount = {};
        this.successStreak = 0;
        this.errorStreak = 0;
        this.idleTime = 0;

        this.initializeSystem();
    }

    detectPlayerProfile() {
        // D√©tection bas√©e sur les interactions et pr√©f√©rences
        const interactions = this.loadInteractionHistory();
        const timeSpent = this.calculateTimeSpent();
        const commandPatterns = this.analyzeCommandPatterns();

        if (commandPatterns.includes('aide') && timeSpent < 300000) {
            return 'debutant';
        } else if (commandPatterns.includes('profil') && commandPatterns.includes('badges')) {
            return 'competitif';
        } else if (commandPatterns.includes('accessibility') && commandPatterns.includes('theme')) {
            return 'creatif';
        } else if (timeSpent > 1800000 && commandPatterns.length < 5) {
            return 'casual';
        } else {
            return 'experimente';
        }
    }

    initializeFeedbackTemplates() {
        return {
            debutant: {
                encouragement: [
                    "üåü Excellent ! Tu apprends vite !",
                    "üéØ Parfait ! Tu ma√Ætrises de mieux en mieux !",
                    "üöÄ Bravo ! Tu progresses √† chaque √©tape !",
                    "üí´ Super ! Tu deviens un vrai hacker !",
                    "üéÆ G√©nial ! Tu comprends le syst√®me !"
                ],
                error: [
                    "ü§î Pas de souci ! Essaie 'aide' pour voir les commandes disponibles",
                    "üí° Astuce : tape 'aide' pour d√©couvrir toutes les possibilit√©s",
                    "üéØ Pas grave ! Chaque erreur t'apprend quelque chose",
                    "üåü Continue ! M√™me les meilleurs font des erreurs au d√©but",
                    "üí´ Tu y arriveras ! Regarde les suggestions ci-dessous"
                ],
                progression: [
                    "üéâ F√©licitations ! Tu as d√©bloqu√© un nouveau niveau !",
                    "üèÜ Bravo ! Tu progresses dans ton aventure !",
                    "‚≠ê Excellent ! Tu deviens plus fort !",
                    "üéØ Parfait ! Tu ma√Ætrises de nouvelles comp√©tences !",
                    "üöÄ Incroyable ! Tu avances √† grands pas !"
                ],
                idle: [
                    "üëã Salut ! Pr√™t pour une nouvelle aventure ?",
                    "üåü Bienvenue ! Tu veux continuer ton exploration ?",
                    "üéÆ Hello ! On reprend o√π on s'√©tait arr√™t√© ?",
                    "üí´ Salut ! Tu veux d√©couvrir de nouvelles choses ?",
                    "üéØ Bonjour ! Pr√™t pour de nouveaux d√©fis ?"
                ]
            },
            experimente: {
                encouragement: [
                    "‚ö° Rapide et efficace ! Tu ma√Ætrises parfaitement !",
                    "üéØ Pr√©cision parfaite ! Tu es un expert !",
                    "üöÄ Excellente optimisation ! Tu connais tes commandes !",
                    "üí´ Parfait ! Tu utilises le syst√®me comme un pro !",
                    "üåü Impressionnant ! Tu es tr√®s comp√©tent !"
                ],
                error: [
                    "üîß Commande inconnue. Tu peux essayer 'aide' pour voir les options",
                    "‚ö° Erreur d√©tect√©e. V√©rifie la syntaxe ou consulte 'aide'",
                    "üéØ Commande non reconnue. 'aide' te donnera toutes les possibilit√©s",
                    "üí° Erreur. Tu connais s√ªrement 'aide' pour les commandes disponibles",
                    "üåü Commande invalide. 'aide' te montrera tout ce qui est possible"
                ],
                progression: [
                    "üèÜ Niveau sup√©rieur atteint ! Tu es un vrai expert !",
                    "‚ö° Progression optimale ! Tu ma√Ætrises le syst√®me !",
                    "üéØ Excellent ! Tu progresses de mani√®re efficace !",
                    "üöÄ Parfait ! Tu es un utilisateur avanc√© !",
                    "üí´ Bravo ! Tu utilises le syst√®me comme un pro !"
                ],
                idle: [
                    "‚ö° Expert de retour ! Pr√™t pour de nouveaux d√©fis ?",
                    "üéØ Ma√Ætre du terminal ! Que veux-tu explorer ?",
                    "üöÄ Utilisateur avanc√© ! Pr√™t pour l'optimisation ?",
                    "üí´ Expert ! Tu veux tester de nouvelles fonctionnalit√©s ?",
                    "üåü Pro ! Pr√™t pour des d√©fis techniques ?"
                ]
            },
            competitif: {
                encouragement: [
                    "üèÜ CHAMPION ! Tu domines la comp√©tition !",
                    "‚ö° VICTOIRE ! Tu es le meilleur !",
                    "üéØ PARFAIT ! Tu √©crases la concurrence !",
                    "üöÄ GAGNANT ! Tu es imbattable !",
                    "üí´ MA√éTRE ! Tu r√®gnes sur le jeu !"
                ],
                error: [
                    "‚öîÔ∏è Erreur de guerre ! Consulte 'aide' pour les commandes de combat",
                    "üèÜ Erreur de champion ! 'aide' te donnera les armes disponibles",
                    "üéØ Erreur de comp√©tition ! 'aide' te montrera tes options de victoire",
                    "üöÄ Erreur de leader ! 'aide' te r√©v√©lera tes pouvoirs",
                    "üí´ Erreur de ma√Ætre ! 'aide' te donnera tes outils de domination"
                ],
                progression: [
                    "üëë COURONNE ! Tu es le roi du jeu !",
                    "üèÜ TROPH√âE ! Tu as conquis un nouveau niveau !",
                    "‚ö° VICTOIRE ! Tu as √©cras√© la concurrence !",
                    "üéØ CHAMPION ! Tu as gagn√© la bataille !",
                    "üöÄ MA√éTRE ! Tu as domin√© le d√©fi !"
                ],
                idle: [
                    "üëë Roi de retour ! Pr√™t pour la domination ?",
                    "üèÜ Champion ! Tu veux √©craser la concurrence ?",
                    "‚ö° Ma√Ætre ! Pr√™t pour de nouveaux d√©fis de guerre ?",
                    "üéØ Leader ! Tu veux montrer ta sup√©riorit√© ?",
                    "üöÄ Vainqueur ! Pr√™t pour la victoire totale ?"
                ]
            },
            creatif: {
                encouragement: [
                    "üé® Cr√©atif ! Tu explores de nouvelles possibilit√©s !",
                    "üí´ Artiste ! Tu cr√©es quelque chose d'unique !",
                    "üåü Inventeur ! Tu d√©couvres des chemins in√©dits !",
                    "üéØ Visionnaire ! Tu vois au-del√† des limites !",
                    "üöÄ Innovateur ! Tu repousses les fronti√®res !"
                ],
                error: [
                    "üé® Erreur cr√©ative ! 'aide' te donnera des outils d'expression",
                    "üí´ Erreur d'artiste ! 'aide' te r√©v√©lera tes pinceaux num√©riques",
                    "üåü Erreur d'inventeur ! 'aide' te montrera tes instruments",
                    "üéØ Erreur de visionnaire ! 'aide' te donnera tes outils de cr√©ation",
                    "üöÄ Erreur d'innovateur ! 'aide' te r√©v√©lera tes possibilit√©s"
                ],
                progression: [
                    "üé® ≈íuvre d'art ! Tu as cr√©√© quelque chose de magnifique !",
                    "üí´ Chef-d'≈ìuvre ! Tu as invent√© quelque chose d'unique !",
                    "üåü Innovation ! Tu as repouss√© les limites !",
                    "üéØ Cr√©ation ! Tu as donn√© vie √† quelque chose de nouveau !",
                    "üöÄ R√©volution ! Tu as chang√© les r√®gles du jeu !"
                ],
                idle: [
                    "üé® Artiste de retour ! Pr√™t pour de nouvelles cr√©ations ?",
                    "üí´ Cr√©ateur ! Tu veux explorer de nouveaux horizons ?",
                    "üåü Inventeur ! Pr√™t pour de nouvelles d√©couvertes ?",
                    "üéØ Visionnaire ! Tu veux repousser les limites ?",
                    "üöÄ Innovateur ! Pr√™t pour de nouvelles exp√©rimentations ?"
                ]
            },
            casual: {
                encouragement: [
                    "üòä Doucement mais s√ªrement ! Tu avances √† ton rythme !",
                    "üåü Parfait ! Tu prends le temps de bien faire !",
                    "üéØ Excellent ! Tu explores tranquillement !",
                    "üí´ Super ! Tu profites de chaque moment !",
                    "üöÄ Bravo ! Tu avances √† ta fa√ßon !"
                ],
                error: [
                    "üòä Pas de stress ! 'aide' te guidera gentiment",
                    "üåü Tranquille ! 'aide' te montrera le chemin",
                    "üéØ Pas de souci ! 'aide' t'aidera √† comprendre",
                    "üí´ Relax ! 'aide' te donnera les bonnes directions",
                    "üöÄ Cool ! 'aide' te fera d√©couvrir les possibilit√©s"
                ],
                progression: [
                    "üòä Douce progression ! Tu avances √† ton rythme !",
                    "üåü Belle avanc√©e ! Tu prends le temps de bien faire !",
                    "üéØ Excellente progression ! Tu explores tranquillement !",
                    "üí´ Super avanc√©e ! Tu profites de chaque √©tape !",
                    "üöÄ Bravo ! Tu avances de mani√®re d√©tendue !"
                ],
                idle: [
                    "üòä Salut ! Pr√™t pour une exploration tranquille ?",
                    "üåü Bonjour ! Tu veux continuer doucement ?",
                    "üéØ Hello ! Pr√™t pour une aventure relaxante ?",
                    "üí´ Salut ! Tu veux d√©couvrir √† ton rythme ?",
                    "üöÄ Bonjour ! Pr√™t pour une exploration cool ?"
                ]
            }
        };
    }

    generateContextualFeedback(action, result, context = {}) {
        const profile = this.playerProfile;
        const templates = this.feedbackTemplates[profile];

        // Analyser le contexte
        const isRepetitive = this.isRepetitiveAction(action);
        const isSuccess = result.success;
        const isError = result.error;
        const isIdle = this.isIdleReturn();

        // Adapter le feedback selon le contexte
        let feedback = '';

        if (isIdle) {
            feedback = this.getRandomTemplate(templates.idle);
        } else if (isSuccess) {
            feedback = this.getRandomTemplate(templates.encouragement);
            this.successStreak++;
            this.errorStreak = 0;
        } else if (isError) {
            feedback = this.getRandomTemplate(templates.error);
            this.errorStreak++;
            this.successStreak = 0;
        } else {
            feedback = this.getRandomTemplate(templates.progression);
        }

        // Ajouter des √©l√©ments contextuels
        if (isRepetitive) {
            feedback += this.getRepetitiveContext(profile, action);
        }

        if (this.successStreak > 3) {
            feedback += this.getStreakContext(profile, 'success');
        }

        if (this.errorStreak > 2) {
            feedback += this.getStreakContext(profile, 'error');
        }

        // Enregistrer l'interaction
        this.recordInteraction(action, result, feedback);

        return feedback;
    }

    getRepetitiveContext(profile, action) {
        const contexts = {
            debutant: " Tu r√©p√®tes cette action, c'est normal d'apprendre !",
            experimente: " Tu r√©p√®tes cette commande, tu cherches l'optimisation ?",
            competitif: " Tu r√©p√®tes cette action, tu veux battre un record ?",
            creatif: " Tu r√©p√®tes cette action, tu explores les possibilit√©s ?",
            casual: " Tu r√©p√®tes cette action, tu prends ton temps !"
        };
        return contexts[profile] || "";
    }

    getStreakContext(profile, type) {
        if (type === 'success') {
            const contexts = {
                debutant: " üî• Tu es en feu ! Continue comme √ßa !",
                experimente: " ‚ö° S√©rie impressionnante ! Tu ma√Ætrises !",
                competitif: " üëë Tu domines ! Tu es imbattable !",
                creatif: " üé® Cr√©ativit√© en s√©rie ! Tu es inspir√© !",
                casual: " üòä Belle s√©rie ! Tu avances bien !"
            };
            return contexts[profile] || "";
        } else {
            const contexts = {
                debutant: " üí™ Pas de souci ! Tu vas y arriver !",
                experimente: " üîß Erreurs en s√©rie ? V√©rifie la syntaxe !",
                competitif: " ‚öîÔ∏è Erreurs de guerre ? Consulte 'aide' !",
                creatif: " üé® Erreurs cr√©atives ? Explore 'aide' !",
                casual: " üòä Pas de stress ! 'aide' t'aidera !"
            };
            return contexts[profile] || "";
        }
    }

    getRandomTemplate(templates) {
        return templates[Math.floor(Math.random() * templates.length)];
    }

    isRepetitiveAction(action) {
        this.repetitionCount[action] = (this.repetitionCount[action] || 0) + 1;
        return this.repetitionCount[action] > 2;
    }

    isIdleReturn() {
        const now = Date.now();
        const timeDiff = now - this.lastInteractionTime;
        this.idleTime = timeDiff;
        return timeDiff > 300000; // 5 minutes
    }

    recordInteraction(action, result, feedback) {
        this.lastInteractionTime = Date.now();
        this.interactionHistory.push({
            action,
            result,
            feedback,
            timestamp: new Date().toISOString(),
            profile: this.playerProfile
        });
        this.saveInteractionHistory();
    }

    loadInteractionHistory() {
        try {
            return JSON.parse(localStorage.getItem('arkalia_interaction_history') || '[]');
        } catch {
            return [];
        }
    }

    saveInteractionHistory() {
        try {
            localStorage.setItem('arkalia_interaction_history', JSON.stringify(this.interactionHistory));
        } catch (e) {
            console.warn('Impossible de sauvegarder l\'historique des interactions');
        }
    }

    calculateTimeSpent() {
        const startTime = localStorage.getItem('arkalia_session_start');
        if (startTime) {
            return Date.now() - parseInt(startTime);
        }
        return 0;
    }

    analyzeCommandPatterns() {
        return this.interactionHistory.map(interaction => interaction.action);
    }

    initializeSystem() {
        // Marquer le d√©but de session
        if (!localStorage.getItem('arkalia_session_start')) {
            localStorage.setItem('arkalia_session_start', Date.now().toString());
        }

        // D√©tecter le retour apr√®s absence
        if (this.isIdleReturn()) {
            this.showWelcomeBackMessage();
        }
    }

    showWelcomeBackMessage() {
        const profile = this.playerProfile;
        const welcomeMessages = {
            debutant: "üåü Salut ! Tu reviens pour continuer ton apprentissage ?",
            experimente: "‚ö° Expert de retour ! Pr√™t pour de nouveaux d√©fis ?",
            competitif: "üëë Champion ! Tu reviens pour dominer ?",
            creatif: "üé® Artiste ! Tu reviens pour cr√©er ?",
            casual: "üòä Salut ! Tu reviens pour explorer tranquillement ?"
        };

        const message = welcomeMessages[profile] || "üåü Salut ! Tu reviens pour continuer l'aventure ?";

        // Afficher le message de bienvenue
        this.displayFeedbackMessage(message, 'welcome');
    }

    displayFeedbackMessage(message, type = 'info') {
        // Cr√©er un √©l√©ment de feedback visuel
        const feedbackElement = document.createElement('div');
        feedbackElement.className = `contextual-feedback ${type}`;
        feedbackElement.textContent = message;

        // Styles selon le type
        const styles = {
            welcome: 'background: linear-gradient(45deg, #00ff00, #0080ff); color: white; padding: 15px; border-radius: 10px; margin: 10px; font-weight: bold;',
            info: 'background: #333; color: #00ff00; padding: 10px; border-radius: 5px; margin: 5px;',
            success: 'background: #00ff00; color: #000; padding: 10px; border-radius: 5px; margin: 5px; font-weight: bold;',
            error: 'background: #ff0000; color: white; padding: 10px; border-radius: 5px; margin: 5px;'
        };

        feedbackElement.style.cssText = styles[type] || styles.info;

        // Ajouter √† la page
        const container = document.querySelector('.terminal-output') || document.body;
        container.appendChild(feedbackElement);

        // Supprimer apr√®s 5 secondes
        setTimeout(() => {
            if (feedbackElement.parentNode) {
                feedbackElement.parentNode.removeChild(feedbackElement);
            }
        }, 5000);
    }

    // M√©thode publique pour g√©n√©rer des feedbacks
    getFeedback(action, result, context = {}) {
        return this.generateContextualFeedback(action, result, context);
    }

    // M√©thode pour d√©tecter les easter eggs
    detectEasterEgg(input) {
        const easterEggs = {
            'konami': () => this.triggerKonamiCode(),
            'matrix': () => this.triggerMatrixRain(),
            'luna dance': () => this.triggerLunaDance(),
            'hack the planet': () => this.triggerHackThePlanet(),
            'luna love': () => this.triggerLunaLove()
        };

        const inputLower = input.toLowerCase();
        for (const [trigger, action] of Object.entries(easterEggs)) {
            if (inputLower.includes(trigger)) {
                action();
                return true;
            }
        }
        return false;
    }

    triggerKonamiCode() {
        this.displayFeedbackMessage("üéÆ Code Konami activ√© ! LUNA devient plus puissante !", 'success');
        // Ajouter des effets visuels
        document.body.style.animation = 'konami-glow 2s ease-in-out';
    }

    triggerMatrixRain() {
        this.displayFeedbackMessage("üåßÔ∏è Pluie Matrix activ√©e ! Tu es dans la matrice !", 'success');
        // Ajouter l'effet Matrix Rain
        this.createMatrixRain();
    }

    triggerLunaDance() {
        this.displayFeedbackMessage("üíÉ LUNA danse ! Elle est contente de te voir !", 'success');
        // Animer LUNA
        this.animateLuna();
    }

    triggerHackThePlanet() {
        this.displayFeedbackMessage("üåç HACK THE PLANET ! Tu es un vrai hacker !", 'success');
        // Effets de hacking
        this.createHackingEffects();
    }

    triggerLunaLove() {
        this.displayFeedbackMessage("üíñ LUNA t'aime ! Tu es son joueur pr√©f√©r√© !", 'success');
        // Effets d'amour
        this.createLoveEffects();
    }

    createMatrixRain() {
        // Impl√©mentation de l'effet Matrix Rain
        const canvas = document.createElement('canvas');
        canvas.style.position = 'fixed';
        canvas.style.top = '0';
        canvas.style.left = '0';
        canvas.style.width = '100%';
        canvas.style.height = '100%';
        canvas.style.pointerEvents = 'none';
        canvas.style.zIndex = '9999';
        document.body.appendChild(canvas);

        // Animation Matrix Rain
        setTimeout(() => {
            document.body.removeChild(canvas);
        }, 10000);
    }

    animateLuna() {
        const lunaElement = document.querySelector('.luna-avatar');
        if (lunaElement) {
            lunaElement.style.animation = 'luna-dance 2s ease-in-out';
        }
    }

    createHackingEffects() {
        // Effets visuels de hacking
        document.body.style.filter = 'hue-rotate(90deg)';
        setTimeout(() => {
            document.body.style.filter = 'none';
        }, 3000);
    }

    createLoveEffects() {
        // Effets d'amour
        const hearts = ['üíñ', 'üíï', 'üíó', 'üíù', 'üíò'];
        for (let i = 0; i < 10; i++) {
            setTimeout(() => {
                const heart = document.createElement('div');
                heart.textContent = hearts[Math.floor(Math.random() * hearts.length)];
                heart.style.position = 'fixed';
                heart.style.left = Math.random() * window.innerWidth + 'px';
                heart.style.top = Math.random() * window.innerHeight + 'px';
                heart.style.fontSize = '2rem';
                heart.style.pointerEvents = 'none';
                heart.style.zIndex = '9999';
                document.body.appendChild(heart);

                setTimeout(() => {
                    if (heart.parentNode) {
                        heart.parentNode.removeChild(heart);
                    }
                }, 2000);
            }, i * 200);
        }
    }
}

// Initialiser le syst√®me de feedback contextuel
const contextualFeedback = new ContextualFeedbackSystem();

// Exporter pour utilisation globale
window.ContextualFeedbackSystem = ContextualFeedbackSystem;
window.contextualFeedback = contextualFeedback;
