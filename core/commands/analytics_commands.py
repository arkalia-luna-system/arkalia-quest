"""
Commandes Analytics pour Arkalia Quest
Permet d'acc√©der aux insights et analytics depuis le terminal
"""

from typing import Any

import requests


class AnalyticsCommands:
    """Commandes pour l'analytics et les insights"""

    def __init__(self):
        self.base_url = "http://localhost:5001"
        self.commands = {
            "analytics": self.cmd_analytics,
            "insights": self.cmd_insights,
            "stats": self.cmd_stats,
            "progress": self.cmd_progress,
            "recommendations": self.cmd_recommendations,
            "learning_style": self.cmd_learning_style,
            "engagement": self.cmd_engagement,
            "export_data": self.cmd_export_data,
        }

    def cmd_analytics(self) -> dict[str, Any]:
        """Affiche les analytics globaux"""
        try:
            response = requests.get(f"{self.base_url}/api/analytics/global", timeout=10)
            if response.status_code == 200:
                data = response.json()
                analytics = data.get("analytics", {})

                message = "üìä ANALYTICS GLOBAUX ARKALIA QUEST\n"
                message += "=" * 50 + "\n\n"

                # Statistiques g√©n√©rales
                message += f"üë• Utilisateurs totaux: {analytics.get('total_users', 0)}\n"
                message += f"üéÆ Sessions totales: {analytics.get('total_sessions', 0)}\n"
                message += f"‚è±Ô∏è Temps de jeu total: {analytics.get('total_playtime_hours', 0)}h\n"
                message += f"üìä Temps moyen par utilisateur: {analytics.get('avg_playtime_per_user', 0)}h\n\n"

                # Sessions r√©centes
                message += f"üìà Sessions (7 derniers jours): {analytics.get('recent_sessions_7_days', 0)}\n\n"

                # M√©triques d'engagement
                engagement = analytics.get("engagement_metrics", {})
                if engagement:
                    message += "üìä M√âTRIQUES D'ENGAGEMENT:\n"
                    message += f"üîÑ Taux de r√©tention (7j): {engagement.get('retention_rate_7_days', 0)}%\n"
                    message += f"‚úÖ Taux de compl√©tion missions: {engagement.get('mission_completion_rate', 0)}%\n"
                    message += f"‚≠ê Score d'engagement moyen: {engagement.get('avg_engagement_score', 0)}/100\n\n"

                # √âv√©nements populaires
                popular_events = analytics.get("popular_events", {})
                if popular_events:
                    message += "üî• √âV√âNEMENTS POPULAIRES:\n"
                    for event, count in list(popular_events.items())[:5]:
                        event_name = self._format_event_name(event)
                        message += f"‚Ä¢ {event_name}: {count}\n"

                return {
                    "r√©ussite": True,
                    "ascii_art": "üìä",
                    "message": message,
                    "score_gagne": 5,
                    "profile_updated": False,
                }
            else:
                return {
                    "r√©ussite": False,
                    "ascii_art": "‚ùå",
                    "message": "‚ùå Erreur lors de la r√©cup√©ration des analytics",
                    "score_gagne": 0,
                    "profile_updated": False,
                }
        except Exception as e:
            return {
                "r√©ussite": False,
                "ascii_art": "üí•",
                "message": f"üí• Erreur: {e!s}",
                "score_gagne": 0,
                "profile_updated": False,
            }

    def cmd_insights(self) -> dict[str, Any]:
        """Affiche les insights personnalis√©s"""
        try:
            response = requests.get(f"{self.base_url}/api/analytics/insights", timeout=10)
            if response.status_code == 200:
                data = response.json()
                insights = data.get("insights", {})

                if not insights:
                    return {
                        "r√©ussite": False,
                        "ascii_art": "‚ùå",
                        "message": "‚ùå Aucun insight disponible pour le moment",
                        "score_gagne": 0,
                        "profile_updated": False,
                    }

                message = "üìä VOS INSIGHTS PERSONNALIS√âS\n"
                message += "=" * 50 + "\n\n"

                # Statistiques g√©n√©rales
                message += f"üéÆ Sessions totales: {insights.get('total_sessions', 0)}\n"
                message += f"‚è±Ô∏è Temps de jeu total: {insights.get('total_playtime_hours', 0)}h\n"
                message += f"üìà Taux d'engagement: {insights.get('engagement_rate', 0)}%\n"
                message += f"üèÜ Niveau actuel: {insights.get('current_level', 1)}\n\n"

                # Missions et jeux
                message += f"üéØ Missions compl√©t√©es: {insights.get('missions_completed', 0)}\n"
                message += f"üé≤ Jeux compl√©t√©s: {insights.get('games_completed', 0)}\n"
                message += f"üèÖ Badges gagn√©s: {insights.get('badges_earned', 0)}\n\n"

                # Style d'apprentissage
                learning_style = insights.get("learning_style", "unknown")
                message += (
                    f"üß† Style d'apprentissage: {self._format_learning_style(learning_style)}\n\n"
                )

                # Jeux pr√©f√©r√©s
                preferred_games = insights.get("preferred_games", [])
                if preferred_games:
                    message += f"üéÆ Jeux pr√©f√©r√©s: {', '.join(preferred_games)}\n\n"

                # Derni√®re activit√©
                last_active = insights.get("last_active_days", 0)
                message += f"üïê Derni√®re activit√©: il y a {last_active} jours\n\n"

                # Recommandations
                recommendations = insights.get("recommendations", [])
                if recommendations:
                    message += "üí° RECOMMANDATIONS PERSONNALIS√âES:\n"
                    for i, rec in enumerate(recommendations, 1):
                        message += f"{i}. {rec}\n"

                return {
                    "r√©ussite": True,
                    "ascii_art": "üîç",
                    "message": message,
                    "score_gagne": 10,
                    "profile_updated": False,
                }
            else:
                return {
                    "r√©ussite": False,
                    "ascii_art": "‚ùå",
                    "message": "‚ùå Erreur lors de la r√©cup√©ration des insights",
                    "score_gagne": 0,
                    "profile_updated": False,
                }
        except Exception as e:
            return {
                "r√©ussite": False,
                "ascii_art": "üí•",
                "message": f"üí• Erreur: {e!s}",
                "score_gagne": 0,
                "profile_updated": False,
            }

    def cmd_stats(self) -> dict[str, Any]:
        """Affiche les statistiques d√©taill√©es"""
        try:
            # R√©cup√©rer les insights
            response = requests.get(f"{self.base_url}/api/analytics/insights", timeout=10)
            if response.status_code == 200:
                data = response.json()
                insights = data.get("insights", {})

                message = "üìà STATISTIQUES D√âTAILL√âES\n"
                message += "=" * 50 + "\n\n"

                # Statistiques de progression
                message += "üéØ PROGRESSION:\n"
                message += f"‚Ä¢ Niveau: {insights.get('current_level', 1)}\n"
                message += f"‚Ä¢ Missions compl√©t√©es: {insights.get('missions_completed', 0)}\n"
                message += f"‚Ä¢ Jeux compl√©t√©s: {insights.get('games_completed', 0)}\n"
                message += f"‚Ä¢ Badges gagn√©s: {insights.get('badges_earned', 0)}\n\n"

                # Statistiques de temps
                message += "‚è±Ô∏è TEMPS DE JEU:\n"
                message += f"‚Ä¢ Total: {insights.get('total_playtime_hours', 0)}h\n"
                message += f"‚Ä¢ Sessions: {insights.get('total_sessions', 0)}\n"
                message += f"‚Ä¢ Moyenne par session: {insights.get('avg_session_duration_minutes', 0)}min\n\n"

                # Statistiques d'engagement
                message += "üìä ENGAGEMENT:\n"
                message += f"‚Ä¢ Taux d'engagement: {insights.get('engagement_rate', 0)}%\n"
                message += f"‚Ä¢ Derni√®re activit√©: {insights.get('last_active_days', 0)} jours\n\n"

                # Statistiques de profil
                message += "üë§ PROFIL:\n"
                message += f"‚Ä¢ Style d'apprentissage: {self._format_learning_style(insights.get('learning_style', 'unknown'))}\n"

                preferred_games = insights.get("preferred_games", [])
                if preferred_games:
                    message += f"‚Ä¢ Jeux pr√©f√©r√©s: {', '.join(preferred_games)}\n"

                return {
                    "r√©ussite": True,
                    "ascii_art": "üìä",
                    "message": message,
                    "score_gagne": 8,
                    "profile_updated": False,
                }
            else:
                return {
                    "r√©ussite": False,
                    "ascii_art": "‚ùå",
                    "message": "‚ùå Erreur lors de la r√©cup√©ration des statistiques",
                    "score_gagne": 0,
                    "profile_updated": False,
                }
        except Exception as e:
            return {
                "r√©ussite": False,
                "ascii_art": "üí•",
                "message": f"üí• Erreur: {e!s}",
                "score_gagne": 0,
                "profile_updated": False,
            }

    def cmd_progress(self) -> dict[str, Any]:
        """Affiche la progression d√©taill√©e"""
        try:
            response = requests.get(f"{self.base_url}/api/analytics/insights", timeout=10)
            if response.status_code == 200:
                data = response.json()
                insights = data.get("insights", {})

                message = "üéØ PROGRESSION D√âTAILL√âE\n"
                message += "=" * 50 + "\n\n"

                # Progression g√©n√©rale
                level = insights.get("current_level", 1)
                missions = insights.get("missions_completed", 0)
                games = insights.get("games_completed", 0)
                badges = insights.get("badges_earned", 0)

                message += f"üèÜ NIVEAU ACTUEL: {level}\n"
                message += "üìä PROGRESSION GLOBALE:\n"
                message += f"‚Ä¢ Missions: {missions} compl√©t√©es\n"
                message += f"‚Ä¢ Jeux: {games} compl√©t√©s\n"
                message += f"‚Ä¢ Badges: {badges} gagn√©s\n\n"

                # Calculer les pourcentages (estimations)
                mission_progress = min((missions / 50) * 100, 100)  # 50 missions estim√©es
                game_progress = min((games / 20) * 100, 100)  # 20 jeux estim√©s
                badge_progress = min((badges / 30) * 100, 100)  # 30 badges estim√©s

                message += "üìà POURCENTAGES DE PROGRESSION:\n"
                message += f"‚Ä¢ Missions: {mission_progress:.1f}%\n"
                message += f"‚Ä¢ Jeux: {game_progress:.1f}%\n"
                message += f"‚Ä¢ Badges: {badge_progress:.1f}%\n\n"

                # Recommandations de progression
                message += "üí° CONSEILS POUR PROGRESSER:\n"
                if mission_progress < 50:
                    message += "‚Ä¢ Compl√®te plus de missions pour monter en niveau\n"
                if game_progress < 50:
                    message += "‚Ä¢ Essaie diff√©rents types de jeux √©ducatifs\n"
                if badge_progress < 50:
                    message += "‚Ä¢ D√©bloque de nouveaux badges en explorant\n"
                if mission_progress >= 80 and game_progress >= 80:
                    message += (
                        "‚Ä¢ Excellent travail ! Continue d'explorer les fonctionnalit√©s avanc√©es\n"
                    )

                return {
                    "r√©ussite": True,
                    "ascii_art": "üéØ",
                    "message": message,
                    "score_gagne": 7,
                    "profile_updated": False,
                }
            else:
                return {
                    "r√©ussite": False,
                    "ascii_art": "‚ùå",
                    "message": "‚ùå Erreur lors de la r√©cup√©ration de la progression",
                    "score_gagne": 0,
                    "profile_updated": False,
                }
        except Exception as e:
            return {
                "r√©ussite": False,
                "ascii_art": "üí•",
                "message": f"üí• Erreur: {e!s}",
                "score_gagne": 0,
                "profile_updated": False,
            }

    def cmd_recommendations(self) -> dict[str, Any]:
        """Affiche les recommandations personnalis√©es"""
        try:
            response = requests.get(f"{self.base_url}/api/analytics/insights", timeout=10)
            if response.status_code == 200:
                data = response.json()
                insights = data.get("insights", {})
                recommendations = insights.get("recommendations", [])

                if not recommendations:
                    return {
                        "r√©ussite": False,
                        "ascii_art": "‚ùå",
                        "message": "‚ùå Aucune recommandation disponible pour le moment",
                        "score_gagne": 0,
                        "profile_updated": False,
                    }

                message = "üí° RECOMMANDATIONS PERSONNALIS√âES\n"
                message += "=" * 50 + "\n\n"

                for i, rec in enumerate(recommendations, 1):
                    message += f"{i}. {rec}\n"

                message += "\nüéØ Ces recommandations sont bas√©es sur:\n"
                message += f"‚Ä¢ Votre style d'apprentissage: {self._format_learning_style(insights.get('learning_style', 'unknown'))}\n"
                message += f"‚Ä¢ Votre niveau actuel: {insights.get('current_level', 1)}\n"
                message += f"‚Ä¢ Votre taux d'engagement: {insights.get('engagement_rate', 0)}%\n"

                return {
                    "r√©ussite": True,
                    "ascii_art": "üí°",
                    "message": message,
                    "score_gagne": 6,
                    "profile_updated": False,
                }
            else:
                return {
                    "r√©ussite": False,
                    "ascii_art": "‚ùå",
                    "message": "‚ùå Erreur lors de la r√©cup√©ration des recommandations",
                    "score_gagne": 0,
                    "profile_updated": False,
                }
        except Exception as e:
            return {
                "r√©ussite": False,
                "ascii_art": "üí•",
                "message": f"üí• Erreur: {e!s}",
                "score_gagne": 0,
                "profile_updated": False,
            }

    def cmd_learning_style(self) -> dict[str, Any]:
        """Affiche l'analyse du style d'apprentissage"""
        try:
            response = requests.get(f"{self.base_url}/api/analytics/insights", timeout=10)
            if response.status_code == 200:
                data = response.json()
                insights = data.get("insights", {})
                learning_style = insights.get("learning_style", "unknown")

                message = "üß† ANALYSE DU STYLE D'APPRENTISSAGE\n"
                message += "=" * 50 + "\n\n"

                message += f"üéØ VOTRE STYLE: {self._format_learning_style(learning_style)}\n\n"

                # Description d√©taill√©e du style
                style_descriptions = {
                    "guided_learner": "Vous pr√©f√©rez suivre des tutoriels √©tape par √©tape et avoir des "
                    "instructions claires. Vous aimez apprendre de mani√®re structur√©e et progressive.",
                    "hands_on_learner": "Vous apprenez mieux en exp√©rimentant directement. "
                    "Vous pr√©f√©rez essayer par vous-m√™me et d√©couvrir les solutions de mani√®re pratique.",
                    "support_seeker": "Vous n'h√©sitez pas √† demander de l'aide quand vous en avez besoin. "
                    "Vous utilisez les indices et le support pour progresser efficacement.",
                    "balanced_learner": "Vous adaptez votre approche selon les situations. "
                    "Vous combinez diff√©rentes m√©thodes d'apprentissage pour optimiser vos r√©sultats.",
                    "unknown": "Votre style d'apprentissage n'a pas encore √©t√© d√©termin√©. "
                    "Continuez √† jouer pour que nous puissions l'analyser.",
                }

                message += f"üìù DESCRIPTION:\n{style_descriptions.get(learning_style, 'Style non reconnu')}\n\n"

                # Conseils personnalis√©s
                message += "üí° CONSEILS PERSONNALIS√âS:\n"
                if learning_style == "guided_learner":
                    message += "‚Ä¢ Suivez les tutoriels dans l'ordre\n"
                    message += "‚Ä¢ Lisez attentivement les instructions\n"
                    message += "‚Ä¢ Prenez le temps de comprendre chaque √©tape\n"
                elif learning_style == "hands_on_learner":
                    message += "‚Ä¢ Exp√©rimentez avec les commandes\n"
                    message += "‚Ä¢ Essayez diff√©rentes approches\n"
                    message += "‚Ä¢ N'h√©sitez pas √† faire des erreurs pour apprendre\n"
                elif learning_style == "support_seeker":
                    message += "‚Ä¢ Utilisez les indices quand vous √™tes bloqu√©\n"
                    message += "‚Ä¢ Demandez de l'aide via le chat\n"
                    message += "‚Ä¢ Consultez la documentation\n"
                elif learning_style == "balanced_learner":
                    message += "‚Ä¢ Adaptez votre approche selon les d√©fis\n"
                    message += "‚Ä¢ Combinez tutoriels et exp√©rimentation\n"
                    message += "‚Ä¢ Variez vos m√©thodes d'apprentissage\n"

                return {
                    "r√©ussite": True,
                    "ascii_art": "üß†",
                    "message": message,
                    "score_gagne": 9,
                    "profile_updated": False,
                }
            else:
                return {
                    "r√©ussite": False,
                    "ascii_art": "‚ùå",
                    "message": "‚ùå Erreur lors de l'analyse du style d'apprentissage",
                    "score_gagne": 0,
                    "profile_updated": False,
                }
        except Exception as e:
            return {
                "r√©ussite": False,
                "ascii_art": "üí•",
                "message": f"üí• Erreur: {e!s}",
                "score_gagne": 0,
                "profile_updated": False,
            }

    def cmd_engagement(self) -> dict[str, Any]:
        """Affiche les m√©triques d'engagement"""
        try:
            response = requests.get(f"{self.base_url}/api/analytics/insights", timeout=10)
            if response.status_code == 200:
                data = response.json()
                insights = data.get("insights", {})

                message = "üìä M√âTRIQUES D'ENGAGEMENT\n"
                message += "=" * 50 + "\n\n"

                engagement_rate = insights.get("engagement_rate", 0)
                last_active = insights.get("last_active_days", 0)
                total_sessions = insights.get("total_sessions", 0)
                avg_session_duration = insights.get("avg_session_duration_minutes", 0)

                message += f"‚≠ê SCORE D'ENGAGEMENT: {engagement_rate}%\n\n"

                # Interpr√©tation du score
                if engagement_rate >= 80:
                    message += "üéâ Excellent engagement ! Vous √™tes tr√®s actif.\n"
                elif engagement_rate >= 60:
                    message += "üëç Bon engagement ! Vous participez r√©guli√®rement.\n"
                elif engagement_rate >= 40:
                    message += "üìà Engagement moyen. Il y a de la place pour s'am√©liorer.\n"
                else:
                    message += "üìâ Engagement faible. Essayez de jouer plus r√©guli√®rement.\n"

                message += "\nüìà D√âTAILS:\n"
                message += f"‚Ä¢ Sessions totales: {total_sessions}\n"
                message += f"‚Ä¢ Dur√©e moyenne par session: {avg_session_duration}min\n"
                message += f"‚Ä¢ Derni√®re activit√©: il y a {last_active} jours\n\n"

                # Conseils d'am√©lioration
                message += "üí° CONSEILS POUR AM√âLIORER L'ENGAGEMENT:\n"
                if engagement_rate < 60:
                    message += "‚Ä¢ Jouez plus r√©guli√®rement\n"
                    message += "‚Ä¢ Explorez de nouvelles fonctionnalit√©s\n"
                    message += "‚Ä¢ Participez aux d√©fis communautaires\n"
                    message += "‚Ä¢ D√©bloquez de nouveaux badges\n"
                else:
                    message += "‚Ä¢ Continuez votre excellent travail !\n"
                    message += "‚Ä¢ Essayez les fonctionnalit√©s avanc√©es\n"
                    message += "‚Ä¢ Aidez les autres joueurs\n"

                return {
                    "r√©ussite": True,
                    "ascii_art": "üìä",
                    "message": message,
                    "score_gagne": 8,
                    "profile_updated": False,
                }
            else:
                return {
                    "r√©ussite": False,
                    "ascii_art": "‚ùå",
                    "message": "‚ùå Erreur lors de la r√©cup√©ration des m√©triques d'engagement",
                    "score_gagne": 0,
                    "profile_updated": False,
                }
        except Exception as e:
            return {
                "r√©ussite": False,
                "ascii_art": "üí•",
                "message": f"üí• Erreur: {e!s}",
                "score_gagne": 0,
                "profile_updated": False,
            }

    def cmd_export_data(self) -> dict[str, Any]:
        """Exporte les donn√©es analytics"""
        try:
            response = requests.get(f"{self.base_url}/api/analytics/export", timeout=10)
            if response.status_code == 200:
                # data = response.json()  # Variable non utilis√©e

                message = "üì§ EXPORT DES DONN√âES ANALYTICS\n"
                message += "=" * 50 + "\n\n"

                message += "‚úÖ Export r√©ussi !\n\n"
                message += "üìä Donn√©es export√©es:\n"
                message += "‚Ä¢ Vos insights personnalis√©s\n"
                message += "‚Ä¢ Votre historique d'activit√©\n"
                message += "‚Ä¢ Vos statistiques de progression\n"
                message += "‚Ä¢ Vos m√©triques d'engagement\n\n"

                message += "üîí Vos donn√©es sont anonymis√©es et s√©curis√©es.\n"
                message += "üìù Format: JSON\n"

                return {
                    "r√©ussite": True,
                    "ascii_art": "üì§",
                    "message": message,
                    "score_gagne": 5,
                    "profile_updated": False,
                }
            else:
                return {
                    "r√©ussite": False,
                    "ascii_art": "‚ùå",
                    "message": "‚ùå Erreur lors de l'export des donn√©es",
                    "score_gagne": 0,
                    "profile_updated": False,
                }
        except Exception as e:
            return {
                "r√©ussite": False,
                "ascii_art": "üí•",
                "message": f"üí• Erreur: {e!s}",
                "score_gagne": 0,
                "profile_updated": False,
            }

    def _format_learning_style(self, style: str) -> str:
        """Formate le style d'apprentissage pour l'affichage"""
        styles = {
            "guided_learner": "Apprenant guid√© (pr√©f√®re les tutoriels)",
            "hands_on_learner": "Apprenant pratique (pr√©f√®re l'exp√©rimentation)",
            "support_seeker": "Demandeur d'aide (utilise indices et support)",
            "balanced_learner": "Apprenant √©quilibr√©",
            "unknown": "Non d√©termin√©",
        }
        return styles.get(style, style)

    def _format_event_name(self, event: str) -> str:
        """Formate le nom d'un √©v√©nement pour l'affichage"""
        names = {
            "command_executed": "Commandes ex√©cut√©es",
            "mission_start": "Missions d√©marr√©es",
            "mission_complete": "Missions compl√©t√©es",
            "game_start": "Jeux d√©marr√©s",
            "game_complete": "Jeux compl√©t√©s",
            "tutorial_start": "Tutoriels d√©marr√©s",
            "badge_earned": "Badges gagn√©s",
            "session_start": "Sessions d√©marr√©es",
        }
        return names.get(event, event)
