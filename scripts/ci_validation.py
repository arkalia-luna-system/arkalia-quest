#!/usr/bin/env python3
"""
Script de validation CI pour Arkalia Quest
V√©rifie tous les crit√®res de qualit√© avant le d√©ploiement
"""

import json
import os
import subprocess
import sys


class CIValidator:
    """Validateur CI pour Arkalia Quest"""

    def __init__(self):
        self.errors = []
        self.warnings = []
        self.success = True

    def run_command(self, command, description):
        """Ex√©cute une commande et g√®re les erreurs"""
        print(f"üîç {description}...")
        try:
            # Utiliser shlex pour s√©parer les arguments de mani√®re s√©curis√©e
            import shlex

            if isinstance(command, str):
                command = shlex.split(command)
            result = subprocess.run(command, capture_output=True, text=True, check=True)
            print(f"‚úÖ {description} - SUCC√àS")
            return result.stdout
        except subprocess.CalledProcessError as e:
            print(f"‚ùå {description} - √âCHEC")
            print(f"   Erreur: {e.stderr}")
            self.errors.append(f"{description}: {e.stderr}")
            self.success = False
            return None

    def validate_ruff(self):
        """Valide le linting avec Ruff"""
        return self.run_command(
            "ruff check . --output-format=concise",
            "V√©rification Ruff (Linting)",
        )

    def validate_black(self):
        """Valide le formatage avec Black"""
        return self.run_command(
            "black --check . --diff", "V√©rification Black (Formatage)"
        )

    def validate_tests(self):
        """Valide l'ex√©cution des tests"""
        print(r"üîç Ex√©cution des tests avec couverture...")
        try:
            import shlex

            command = shlex.split(
                "python -m pytest tests/ --tb=short -v --cov=core --cov=engines --cov=utils --cov-report=term-missing --cov-fail-under=10"
            )
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                check=False,  # Ne pas √©chouer sur les erreurs de tests
            )

            if result.returncode == 0:
                print(r"‚úÖ Tests - SUCC√àS")
                return result.stdout
            print(f"‚ùå Tests - √âCHEC (code: {result.returncode})")
            if result.stderr:
                print(f"   Erreurs: {result.stderr[:200]}...")
            self.errors.append(f"Tests √©chou√©s (code: {result.returncode})")
            self.success = False
            return result.stdout  # Retourner la sortie m√™me en cas d'√©chec
        except Exception as e:
            print(f"‚ùå Erreur lors de l'ex√©cution des tests: {e}")
            self.errors.append(f"Erreur d'ex√©cution des tests: {e}")
            self.success = False
            return None

    def validate_coverage(self):
        """Valide la couverture de code"""
        print(r"üîç V√©rification de la couverture...")
        try:
            import shlex

            command = shlex.split(
                "python -m pytest tests/ --cov=core --cov=engines --cov=utils --cov-report=term"
            )
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                check=False,  # Ne pas √©chouer sur les erreurs de tests
            )

            if result.returncode == 0:
                print(r"‚úÖ Couverture - SUCC√àS")
                output = result.stdout
            else:
                print(f"‚ö†Ô∏è  Couverture - √âCHEC (code: {result.returncode})")
                output = result.stdout or result.stderr

            if output:
                # Extraire le pourcentage de couverture
                lines = output.split("\n")
                for line in lines:
                    if "TOTAL" in line and "%" in line:
                        try:
                            coverage = float(line.split()[-1].replace("%", ""))
                            if coverage < 10.0:
                                self.errors.append(
                                    f"Couverture insuffisante: {coverage}% < 10%"
                                )
                                self.success = False
                            else:
                                print(f"‚úÖ Couverture de code: {coverage}% (>= 10%)")
                            break
                        except (ValueError, IndexError):
                            pass

            return output

        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification de la couverture: {e}")
            self.errors.append(f"Erreur de couverture: {e}")
            self.success = False
            return None

    def validate_dependencies(self):
        """Valide les d√©pendances"""
        # V√©rification simplifi√©e des d√©pendances
        print(r"üîç V√©rification des d√©pendances...")
        try:
            # Test des imports pour v√©rifier la disponibilit√©
            import importlib.util

            # V√©rifier que les modules sont disponibles
            core_spec = importlib.util.find_spec("core")
            engines_spec = importlib.util.find_spec("engines")
            utils_spec = importlib.util.find_spec("utils")

            if core_spec and engines_spec and utils_spec:
                print(r"‚úÖ D√©pendances principales - Disponibles")
                return True
            missing = []
            if not core_spec:
                missing.append("core")
            if not engines_spec:
                missing.append("engines")
            if not utils_spec:
                missing.append("utils")
            error_msg = f"Modules manquants: {', '.join(missing)}"
            print(f"‚ùå {error_msg}")
            self.errors.append(error_msg)
            self.success = False
            return False
        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification des d√©pendances: {e}")
            self.errors.append(f"Erreur de v√©rification: {e}")
            self.success = False
            return False

    def validate_imports(self):
        """Valide les imports Python"""
        return self.run_command(
            "python -c 'import core, engines, utils; print(\"‚úÖ Imports valides\")'",
            "Validation des imports",
        )

    def validate_config_files(self):
        """Valide les fichiers de configuration"""
        config_files = [
            "pyproject.toml",
            "requirements.txt",
            "config/load_test_config.json",
        ]

        print(r"üîç Validation des fichiers de configuration...")
        for config_file in config_files:
            if os.path.exists(config_file):
                try:
                    if config_file.endswith(".json"):
                        with open(config_file) as f:
                            json.load(f)
                    print(f"‚úÖ {config_file} - Valide")
                except Exception as e:
                    print(f"‚ùå {config_file} - Invalide: {e}")
                    self.errors.append(f"Configuration invalide: {config_file}")
                    self.success = False
            else:
                print(f"‚ö†Ô∏è  {config_file} - Manquant")
                self.warnings.append(f"Fichier manquant: {config_file}")

        return True

    def validate_structure(self):
        """Valide la structure du projet"""
        required_dirs = ["core", "engines", "utils", "tests", "templates", "static"]

        print(r"üîç Validation de la structure du projet...")
        for directory in required_dirs:
            if os.path.isdir(directory):
                print(f"‚úÖ {directory}/ - Pr√©sent")
            else:
                print(f"‚ùå {directory}/ - Manquant")
                self.errors.append(f"R√©pertoire manquant: {directory}")
                self.success = False

        return True

    def generate_report(self):
        """G√©n√®re un rapport de validation"""
        print("\n" + "=" * 60)
        print(r"üìä RAPPORT DE VALIDATION CI")
        print("=" * 60)

        if self.success:
            print(r"üéâ VALIDATION CI R√âUSSIE !")
            print(r"‚úÖ Tous les crit√®res de qualit√© sont respect√©s")
            print(r"üöÄ Le projet est pr√™t pour le d√©ploiement")
        else:
            print(r"‚ùå VALIDATION CI √âCHOU√âE !")
            print(r"üîß Corrections n√©cessaires avant le d√©ploiement")

        if self.errors:
            print(f"\n‚ùå ERREURS ({len(self.errors)}):")
            for error in self.errors:
                print(f"   ‚Ä¢ {error}")

        if self.warnings:
            print(f"\n‚ö†Ô∏è  AVERTISSEMENTS ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"   ‚Ä¢ {warning}")

        print(f"\nüìà STATUT FINAL: {'SUCC√àS' if self.success else '√âCHEC'}")

        return self.success

    def run_full_validation(self):
        """Lance la validation compl√®te"""
        print(r"üöÄ D√âMARRAGE DE LA VALIDATION CI COMPL√àTE")
        print("=" * 60)

        # Validation de la structure
        self.validate_structure()

        # Validation des fichiers de configuration
        self.validate_config_files()

        # Validation des d√©pendances
        self.validate_dependencies()

        # Validation des imports
        self.validate_imports()

        # Validation du code
        self.validate_ruff()
        self.validate_black()

        # Validation des tests
        self.validate_tests()
        self.validate_coverage()

        # Rapport final
        return self.generate_report()


def main():
    """Fonction principale"""
    validator = CIValidator()

    try:
        success = validator.run_full_validation()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Validation interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Erreur lors de la validation: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
