#!/bin/bash

# üîç Script de diagnostic Docker pour Arkalia Quest
# Usage: ./scripts/docker-diagnostic.sh

set -e

echo "üîç Diagnostic Docker - Arkalia Quest"
echo "===================================="

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    local status=$1
    local message=$2
    
    if [ $status -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $message${NC}"
    else
        echo -e "${RED}‚ùå $message${NC}"
    fi
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

# Test 1: V√©rification de l'environnement
echo ""
echo "üîç Test 1: Environnement"
echo "------------------------"

# Variables d'environnement
if [ -n "$DOCKER_USERNAME" ]; then
    print_status 0 "DOCKER_USERNAME d√©fini: $DOCKER_USERNAME"
else
    print_status 1 "DOCKER_USERNAME non d√©fini"
fi

if [ -n "$DOCKER_PASSWORD" ]; then
    print_status 0 "DOCKER_PASSWORD d√©fini (longueur: ${#DOCKER_PASSWORD})"
else
    print_status 1 "DOCKER_PASSWORD non d√©fini"
fi

# Test 2: V√©rification Docker
echo ""
echo "üîç Test 2: Docker"
echo "-----------------"

if command -v docker &> /dev/null; then
    DOCKER_VERSION=$(docker --version)
    print_status 0 "Docker install√©: $DOCKER_VERSION"
else
    print_status 1 "Docker non install√©"
    exit 1
fi

if docker info &> /dev/null; then
    print_status 0 "Docker daemon accessible"
else
    print_status 1 "Docker daemon non accessible"
    echo "üí° Solution: sudo systemctl start docker"
    exit 1
fi

# Test 3: Test d'authentification
echo ""
echo "üîç Test 3: Authentification Docker"
echo "----------------------------------"

if [ -n "$DOCKER_USERNAME" ] && [ -n "$DOCKER_PASSWORD" ]; then
    echo "üß™ Test d'authentification avec credentials disponibles..."
    
    # Test avec registry explicite
    echo "üîê Test 1: docker.io (Docker Hub)"
    if echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin "docker.io" 2>/tmp/docker_test1.log; then
        print_status 0 "Authentification Docker Hub r√©ussie"
        docker logout &> /dev/null
    else
        print_status 1 "√âchec authentification Docker Hub"
        echo "üîç Erreur:"
        cat /tmp/docker_test1.log
    fi
    
    # Test avec registry GitHub Container Registry
    echo "üîê Test 2: ghcr.io (GitHub Container Registry)"
    if echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin "ghcr.io" 2>/tmp/docker_test2.log; then
        print_status 0 "Authentification GitHub Container Registry r√©ussie"
        docker logout &> /dev/null
    else
        print_status 1 "√âchec authentification GitHub Container Registry"
        echo "üîç Erreur:"
        cat /tmp/docker_test2.log
    fi
    
    # Test sans registry (peut causer des probl√®mes)
    echo "üîê Test 3: Sans registry sp√©cifi√© (peut causer des erreurs TTY)"
    if echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin 2>/tmp/docker_test3.log; then
        print_status 0 "Authentification sans registry r√©ussie"
        docker logout &> /dev/null
    else
        print_status 1 "√âchec authentification sans registry (attendu)"
        echo "üîç Erreur (normale sans registry):"
        cat /tmp/docker_test3.log
    fi
    
else
    print_warning "Pas de credentials disponibles pour le test d'authentification"
fi

# Test 4: V√©rification des scripts
echo ""
echo "üîç Test 4: Scripts"
echo "------------------"

# V√©rifier que les scripts sont ex√©cutables
if [ -x "scripts/docker-auth.sh" ]; then
    print_status 0 "scripts/docker-auth.sh ex√©cutable"
else
    print_status 1 "scripts/docker-auth.sh non ex√©cutable"
    chmod +x scripts/docker-auth.sh
    print_status 0 "Permissions corrig√©es pour scripts/docker-auth.sh"
fi

if [ -x "scripts/test-docker.sh" ]; then
    print_status 0 "scripts/test-docker.sh ex√©cutable"
else
    print_status 1 "scripts/test-docker.sh non ex√©cutable"
    chmod +x scripts/test-docker.sh
    print_status 0 "Permissions corrig√©es pour scripts/test-docker.sh"
fi

# Test 5: Validation de la syntaxe
echo ""
echo "üîç Test 5: Validation syntaxe"
echo "-----------------------------"

if bash -n scripts/docker-auth.sh; then
    print_status 0 "scripts/docker-auth.sh syntaxe OK"
else
    print_status 1 "scripts/docker-auth.sh erreur de syntaxe"
fi

if bash -n scripts/test-docker.sh; then
    print_status 0 "scripts/test-docker.sh syntaxe OK"
else
    print_status 1 "scripts/test-docker.sh erreur de syntaxe"
fi

# Nettoyage
rm -f /tmp/docker_test*.log

# R√©sum√© et recommandations
echo ""
echo "üìä R√©sum√© du diagnostic"
echo "======================="

echo ""
echo "üí° Recommandations:"
echo "   1. Toujours sp√©cifier un registry: docker.io, ghcr.io, etc."
echo "   2. Utiliser des variables d'environnement pour les credentials"
echo "   3. Tester l'authentification avant le d√©ploiement"
echo "   4. Utiliser le script docker-auth.sh pour l'authentification"

echo ""
echo "üöÄ Commandes recommand√©es:"
echo "   # Authentification Docker Hub"
echo "   echo \"\$DOCKER_PASSWORD\" | docker login -u \"\$DOCKER_USERNAME\" --password-stdin docker.io"
echo ""
echo "   # Authentification GitHub Container Registry"
echo "   echo \"\$DOCKER_PASSWORD\" | docker login -u \"\$DOCKER_USERNAME\" --password-stdin ghcr.io"
echo ""
echo "   # Utiliser le script d'authentification"
echo "   ./scripts/docker-auth.sh docker.io"

echo ""
echo "üéâ Diagnostic termin√© !"
