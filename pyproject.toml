[project]
name = "arkalia-quest"
version = "3.0.0"
description = "Jeu éducatif immersif avec IA émotionnelle LUNA"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Équipe Arkalia", email = "contact@arkalia-quest.com"}
]
maintainers = [
    {name = "Équipe Arkalia", email = "contact@arkalia-quest.com"}
]
keywords = ["education", "game", "ai", "learning", "gamification"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Education",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Games/Entertainment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "flask>=3.0.0",
    "flask-socketio>=5.3.0",
    "flask-cors>=4.0.0",
    "sqlite3",
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
    "psutil>=5.9.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.3.0",
    "mypy>=1.5.0",
    "coverage>=7.3.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
deploy = [
    "gunicorn>=21.2.0",
    "docker>=6.1.0",
    "kubernetes>=28.0.0",
]

[project.urls]
Homepage = "https://arkalia-quest.com"
Documentation = "https://docs.arkalia-quest.com"
Repository = "https://github.com/arkalia-luna-system/arkalia-quest"
"Bug Tracker" = "https://github.com/arkalia-luna-system/arkalia-quest/issues"
Discord = "https://discord.gg/arkalia"

[project.scripts]
arkalia-quest = "app:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "engines*", "utils*", "data*", "missions*", "static*", "templates*"]
exclude = ["tests*", "docs*", "scripts*", "config*", "reports*", "venv*", ".git*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.txt", "*.css", "*.js", "*.html", "*.ico"]

# Configuration Black
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# Configuration Ruff
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["B011", "S101", "PLR0913", "PLR0915"]

# Configuration Pytest
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=. --cov-report=html --cov-report=term-missing --cov-fail-under=10"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Configuration Coverage
[tool.coverage.run]
source = ["core", "engines", "utils"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/static/*",
    "*/templates/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Configuration Pre-commit
[tool.pre-commit]
repos = [
    {repo = "https://github.com/pre-commit/pre-commit-hooks", rev = "v4.4.0", hooks = [
        {id = "trailing-whitespace"},
        {id = "end-of-file-fixer"},
        {id = "check-yaml"},
        {id = "check-added-large-files"},
        {id = "check-merge-conflict"},
    ]},
    {repo = "https://github.com/psf/black", rev = "23.3.0", hooks = [
        {id = "black", language_version = "python3"},
    ]},
    {repo = "https://github.com/charliermarsh/ruff-pre-commit", rev = "v0.0.270", hooks = [
        {id = "ruff", args = ["--fix"]},
    ]},
    {repo = "https://github.com/pre-commit/mirrors-mypy", rev = "v1.3.0", hooks = [
        {id = "mypy", additional_dependencies = ["types-all"]},
    ]},
]
