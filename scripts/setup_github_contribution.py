#!/usr/bin/env python3
"""
Script principal de configuration de la contribution GitHub pour Arkalia Quest
Configure automatiquement tous les √©l√©ments n√©cessaires pour une contribution optimale
"""

import os
import subprocess
import sys
from pathlib import Path


class GitHubContributionSetup:
    """Configuration compl√®te de la contribution GitHub pour Arkalia Quest"""

    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.scripts_dir = self.project_root / "scripts"

    def print_header(self, title: str):
        """Affiche un en-t√™te stylis√©"""
        print("\n" + "=" * 60)
        print(f"üéÆ {title}")
        print("=" * 60)

    def check_environment(self) -> bool:
        """V√©rifie l'environnement de d√©veloppement"""
        self.print_header("V√©rification de l'environnement")

        # V√©rification du venv
        if not os.environ.get("VIRTUAL_ENV"):
            print("‚ùå Environnement virtuel non activ√©")
            print("üí° Activez le venv : source venv/bin/activate")
            return False

        print("‚úÖ Environnement virtuel activ√©")

        # V√©rification de Python
        try:
            result = subprocess.run(["python", "--version"], check=False, capture_output=True, text=True)
            print(f"‚úÖ Python: {result.stdout.strip()}")
        except Exception as e:
            print(f"‚ùå Erreur Python: {e}")
            return False

        # V√©rification de Git
        try:
            result = subprocess.run(["git", "--version"], check=False, capture_output=True, text=True)
            print(f"‚úÖ Git: {result.stdout.strip()}")
        except Exception as e:
            print(f"‚ùå Erreur Git: {e}")
            return False

        # V√©rification du token GitHub
        if not os.environ.get("GITHUB_TOKEN"):
            print("‚ö†Ô∏è  GITHUB_TOKEN non d√©fini")
            print("üí° D√©finissez votre token GitHub :")
            print("   export GITHUB_TOKEN=your_token_here")
            print("   ou cr√©ez un fichier .env avec GITHUB_TOKEN=your_token_here")
            return False

        print("‚úÖ GITHUB_TOKEN d√©fini")
        return True

    def run_code_quality_checks(self) -> bool:
        """Ex√©cute les v√©rifications de qualit√© du code"""
        self.print_header("V√©rification de la qualit√© du code")

        try:
            # Black
            print("üé® V√©rification Black...")
            result = subprocess.run(["black", "--check", "."], check=False, capture_output=True, text=True)
            if result.returncode != 0:
                print("‚ùå Black a trouv√© des probl√®mes de formatage")
                print("üí° Ex√©cutez: black .")
                return False
            print("‚úÖ Black: Code bien format√©")

            # Ruff
            print("üîç V√©rification Ruff...")
            result = subprocess.run(["ruff", "check", "."], check=False, capture_output=True, text=True)
            if result.returncode != 0:
                print("‚ùå Ruff a trouv√© des probl√®mes de linting")
                print("üí° Ex√©cutez: ruff check . --fix")
                return False
            print("‚úÖ Ruff: Code conforme")

            # Tests
            print("üß™ Ex√©cution des tests...")
            result = subprocess.run(
                ["python", "-m", "pytest", "tests/", "--tb=no", "-q"],
                check=False, capture_output=True,
                text=True,
            )
            if result.returncode != 0:
                print("‚ùå Certains tests ont √©chou√©")
                print("üí° V√©rifiez les tests avant de continuer")
                return False
            print("‚úÖ Tests: Tous passent")

            return True

        except Exception as e:
            print(f"‚ùå Erreur lors des v√©rifications: {e}")
            return False

    def setup_issue_templates(self) -> bool:
        """Configure les templates d'issues"""
        self.print_header("Configuration des templates d'issues")

        templates_dir = self.project_root / ".github" / "ISSUE_TEMPLATE"

        if not templates_dir.exists():
            print("‚ùå R√©pertoire des templates d'issues non trouv√©")
            return False

        templates = list(templates_dir.glob("*.yml"))
        print(f"‚úÖ {len(templates)} templates d'issues trouv√©s:")
        for template in templates:
            print(f"   üìã {template.name}")

        return True

    def setup_pull_request_template(self) -> bool:
        """Configure le template de pull request"""
        self.print_header("Configuration du template de pull request")

        pr_template = self.project_root / ".github" / "pull_request_template.md"

        if not pr_template.exists():
            print("‚ùå Template de pull request non trouv√©")
            return False

        print("‚úÖ Template de pull request configur√©")
        return True

    def setup_github_labels(self) -> bool:
        """Configure les labels GitHub"""
        self.print_header("Configuration des labels GitHub")

        labels_script = self.scripts_dir / "setup_github_labels.py"

        if not labels_script.exists():
            print("‚ùå Script de configuration des labels non trouv√©")
            return False

        try:
            print("üè∑Ô∏è  Ex√©cution du script de configuration des labels...")
            result = subprocess.run(["python", str(labels_script)], check=False, capture_output=True, text=True)

            if result.returncode == 0:
                print("‚úÖ Labels GitHub configur√©s avec succ√®s")
                return True
            print("‚ùå Erreur lors de la configuration des labels")
            print(f"Erreur: {result.stderr}")
            return False

        except Exception as e:
            print(f"‚ùå Erreur lors de l'ex√©cution du script: {e}")
            return False

    def setup_github_discussions(self) -> bool:
        """Configure les discussions GitHub"""
        self.print_header("Configuration des discussions GitHub")

        discussions_script = self.scripts_dir / "setup_github_discussions.py"

        if not discussions_script.exists():
            print("‚ùå Script de configuration des discussions non trouv√©")
            return False

        try:
            print("üí¨ Ex√©cution du script de configuration des discussions...")
            result = subprocess.run(
                ["python", str(discussions_script)], check=False, capture_output=True, text=True,
            )

            if result.returncode == 0:
                print("‚úÖ Discussions GitHub configur√©es avec succ√®s")
                return True
            print("‚ùå Erreur lors de la configuration des discussions")
            print(f"Erreur: {result.stderr}")
            return False

        except Exception as e:
            print(f"‚ùå Erreur lors de l'ex√©cution du script: {e}")
            return False

    def create_contribution_summary(self) -> str:
        """Cr√©e un r√©sum√© de la configuration de contribution"""
        summary = """# üéÆ Configuration de Contribution - Arkalia Quest

## ‚úÖ √âl√©ments Configur√©s

### üìã Templates d'Issues
- **Bug Report** : Template structur√© pour signaler les bugs
- **Feature Request** : Template pour proposer des fonctionnalit√©s
- **Help Wanted** : Template pour les t√¢ches de contribution
- **Configuration** : Liens et redirections vers les templates

### üöÄ Template de Pull Request
- Template complet avec checklist de contribution
- Sections pour tests, documentation, s√©curit√©
- Format standardis√© pour les PR

### üè∑Ô∏è Labels GitHub
- **Priorit√©** : critical, high, medium, low
- **Types** : bug, enhancement, documentation, question
- **Contribution** : help wanted, good first issue, needs-triage
- **Sp√©cifique** : luna-ai, gamification, education, security
- **Technique** : backend, frontend, devops, ci/cd
- **Taille** : xs, s, m, l, xl

### üí¨ Discussions GitHub
- **Cat√©gories** : General, Q&A, Ideas, Gameplay, Development
- **Templates** : Question, Id√©e, Show and Tell
- **Guide** : Documentation compl√®te d'utilisation

## üéØ Prochaines √âtapes

### 1. Activation Manuelle (Requis)
- [ ] Activer les Discussions dans les param√®tres GitHub
- [ ] V√©rifier que les labels sont bien cr√©√©s
- [ ] Tester les templates d'issues

### 2. Cr√©ation d'Issues "Help Wanted"
- [ ] Identifier 3-5 t√¢ches parfaites pour les nouveaux contributeurs
- [ ] Cr√©er des issues avec le label "help wanted"
- [ ] Marquer avec "good first issue" si appropri√©

### 3. Documentation
- [ ] Mettre √† jour le README avec les nouveaux liens
- [ ] Cr√©er un guide de contribution pour les nouveaux arrivants
- [ ] Documenter le processus de contribution

## üöÄ Commandes Utiles

### V√©rification de la qualit√©
```bash
# Formatage
black .

# Linting
ruff check . --fix

# Tests
python -m pytest tests/
```

### Configuration GitHub
```bash
# Labels
python scripts/setup_github_labels.py

# Discussions
python scripts/setup_github_discussions.py

# Configuration compl√®te
python scripts/setup_github_contribution.py
```

## üìö Ressources

- [Guide de Contribution](docs/CONTRIBUTING.md)
- [Labels GitHub](docs/GITHUB_LABELS.md)
- [Guide des Discussions](docs/GITHUB_DISCUSSIONS_GUIDE.md)
- [Templates d'Issues](.github/ISSUE_TEMPLATE/)
- [Template de PR](.github/pull_request_template.md)

## üéâ R√©sultat

Votre projet Arkalia Quest est maintenant parfaitement configur√© pour accueillir les contributeurs externes !

---
*Configuration g√©n√©r√©e automatiquement pour Arkalia Quest*
"""
        return summary

    def run_complete_setup(self) -> bool:
        """Ex√©cute la configuration compl√®te"""
        print("üéÆ Configuration Compl√®te de la Contribution - Arkalia Quest")
        print("=" * 70)

        # V√©rification de l'environnement
        if not self.check_environment():
            return False

        # V√©rification de la qualit√© du code
        if not self.run_code_quality_checks():
            print("‚ùå Qualit√© du code insuffisante - correction requise")
            return False

        # Configuration des templates d'issues
        if not self.setup_issue_templates():
            return False

        # Configuration du template de PR
        if not self.setup_pull_request_template():
            return False

        # Configuration des labels (si token disponible)
        if os.environ.get("GITHUB_TOKEN"):
            self.setup_github_labels()
            self.setup_github_discussions()
        else:
            print("‚ö†Ô∏è  GITHUB_TOKEN non d√©fini - configuration des labels et discussions ignor√©e")

        # G√©n√©ration du r√©sum√©
        summary = self.create_contribution_summary()
        summary_file = self.project_root / "docs" / "CONTRIBUTION_SETUP_SUMMARY.md"
        with open(summary_file, "w", encoding="utf-8") as f:
            f.write(summary)

        print("\n" + "=" * 70)
        print("üéâ Configuration termin√©e avec succ√®s !")
        print("üìö R√©sum√© g√©n√©r√©: docs/CONTRIBUTION_SETUP_SUMMARY.md")
        print("=" * 70)

        return True


def main():
    """Fonction principale"""
    setup = GitHubContributionSetup()
    success = setup.run_complete_setup()

    if success:
        print("\n‚úÖ Configuration de contribution termin√©e avec succ√®s !")
        print("üöÄ Votre projet est pr√™t pour accueillir les contributeurs !")
    else:
        print("\n‚ùå Configuration √©chou√©e - v√©rifiez les erreurs ci-dessus")

    return success


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
