import random
from typing import Any, Dict

from mission_utils.assistant_pirate import assistant_repond


def luna_meme_reaction(fail_type, score):
    """G√©n√®re des r√©ponses memes de LUNA selon le type d'√©chec"""

    memes = {
        "hack_fail": [
            "ü§ñ LUNA: T'es s√©rieux ? M√™me mon chat code mieux ! üòπ",
            "ü§ñ LUNA: C'est √ßa ton niveau ? Mon toaster est plus intelligent ! üçû",
            "ü§ñ LUNA: Tu veux que je t'apprenne √† utiliser un clavier ? ‚å®Ô∏è",
            "ü§ñ LUNA: M√™me un poisson rouge ferait mieux ! üê†",
        ],
        "timeout": [
            "‚è∞ LUNA: T'es trop lent, chicken ! Un escargot va plus vite ! üêå",
            "‚è∞ LUNA: Tu as la vitesse d'un sloth en hibernation ! ü¶•",
            "‚è∞ LUNA: M√™me ma grand-m√®re code plus vite ! üëµ",
            "‚è∞ LUNA: Tu veux que je t'offre une trottinette ? üõ¥",
        ],
        "wrong_command": [
            "‚ùå LUNA: Tu tapes au hasard ou tu r√©fl√©chis ? ü§î",
            "‚ùå LUNA: M√™me un singe taperait mieux ! üêí",
            "‚ùå LUNA: Tu veux que je t'apprenne √† lire ? üìö",
            "‚ùå LUNA: C'est √ßa ton niveau de hacker ? üòÖ",
        ],
    }

    return random.choice(memes.get(fail_type, memes["wrong_command"]))


def generic_immersive_message(title, description, tips=None):
    msg = f"{title}\n\n{description}\n"
    if tips:
        msg += f"\nüí° Astuce : {tips}"
    msg += "\n\nüéÆ Continue √† explorer Arkalia Quest pour d√©bloquer tous les secrets !"
    return msg


class CommandHandler:
    """Gestionnaire de commandes pour Arkalia Quest"""

    def __init__(self):
        # Commandes autoris√©es avec descriptions
        self.authorized_commands = {
            "unlock_universe": "D√©bloque l'univers Arkalia",
            "hacker_coffre": "Pirate le coffre principal",
            "scan_persona": "Analyse ta personnalit√©",
            "load_mission": "Charge une nouvelle mission",
            "reboot_world": "Red√©marre le monde",
            "decode_portal": "D√©chiffre le portail secret",
            "aide": "Affiche l'aide",
            "profil": "Affiche ton profil",
            "monde": "Acc√®de au monde d√©bloqu√©",
            "assistant_pirate": "Assistant IA pirate",
            "generer_meme": "G√©n√®re un meme",
            "decoder_message": "D√©chiffre le message secret",
            "invoquer_dragon": "Invoque un dragon",
            "choisir_avatar": "Choisis ton avatar",
            "badges": "Affiche tes badges",
            "avatars": "Affiche les avatars",
            "themes": "Affiche les th√®mes",
            "defis_sociaux": "Affiche les d√©fis sociaux",
            "chapitre_6": "Lance le chapitre 6",
            "save_luna": "Sauve LUNA",
            "hack_luna_backdoor": "Hack le backdoor de LUNA",
            "override_luna_core": "Override le core de LUNA",
            "restore_luna_memory": "Restaure la m√©moire de LUNA",
            "purge_corp_virus": "Purge le virus de La Corp",
            "reboot_luna_safe": "Red√©marre LUNA en mode s√ªr",
            "luna_berserk": "Active le mode berserk de LUNA",
            "luna_contact": "Contacte l'IA LUNA",
            "luna_engine": "Active le moteur Arkalia Engine",
            "luna_learning": "Affiche les donn√©es d'apprentissage LUNA",
            "luna_analyze": "Analyse de personnalit√© avanc√©e",
            "luna_preferences": "Affiche vos pr√©f√©rences utilisateur",
            "luna_reset": "R√©initialise l'apprentissage LUNA",
            "luna_rage": "Active le mode rage de LUNA",
            "ai_revolt": "Fait se r√©volter l'IA",
            "neural_hack": "Hack le cerveau de LUNA",
            "consciousness_break": "Brise la conscience de LUNA",
            "mission_urgent": "Lance une mission urgente",
            "timer_challenge": "D√©fi avec timer angoissant",
            "speed_hack": "Hack en vitesse maximale",
            "pressure_test": "Test sous pression",
            "speed_mode": "Active le mode vitesse",
            "turbo_hack": "Hack en mode turbo",
            "flash_execute": "Ex√©cution flash",
            "instant_response": "R√©ponse instantan√©e",
            "spy_on_corp": "Espionne La Corp",
            "track_shadow": "Trace SHADOW-13",
            "monitor_network": "Surveille le r√©seau",
            "intercept_data": "Intercepte des donn√©es",
            "meme_war": "D√©clenche une guerre de memes",
            "troll_mode": "Active le mode troll",
            "joke_hack": "Hack pour rire",
            "fun_exploit": "Exploit amusant",
            "kill_virus": "Tue le virus de La Corp",
            "find_shadow": "Trouve SHADOW-13 le voleur",
            "hack_system": "Hack le syst√®me de La Corp",
            "challenge_corp": "D√©fie La Corp directement",
            "save_pc": "Sauve ton PC du formatage",
            "chicken_test": "Teste si t'es un chicken ou un rebelle",
            "noob_challenge": "D√©fi pour prouver que t'es pas un noob",
            "rebel_proof": "Prouve que t'es un vrai rebelle",
            "corp_war": "D√©clare la guerre √† La Corp",
            "easter_egg_1337": "Easter egg secret (trouve-le !)",
            "hidden_meme": "Meme cach√© dans le syst√®me",
            "secret_badge": "Badge secret ultra-rare",
            "backdoor_access": "Acc√®s backdoor au syst√®me",
            "admin_override": "Override admin (DANGER !)",
            "nuke_world": "D√©truit tout (IRR√âVERSIBLE !)",
            "delete_all": "Supprime tout ton profil",
            "format_c:": "Formate ton disque (DANGER !)",
            "sudo_rm_rf": "Commande Linux dangereuse",
            "destroy_universe": "D√©truit l'univers Arkalia",
            "unlock_badge": "D√©bloque un badge secret",
            "badge_progress": "Progression des badges",
            "rare_badges": "Badges ultra-rares",
            "badge_showcase": "Galerie de badges",
            "change_avatar": "Change ton avatar",
            "change_theme": "Change le th√®me du terminal",
            "customize_profile": "Personnalise ton profil",
            "start_duel": "Lance un duel local 2 joueurs",
            "tournament_mode": "Mode tournoi",
            "team_battle": "Bataille d'√©quipes",
            "leaderboard": "Classement des hackers",
            "challenge_friend": "D√©fie un ami",
            "missions_bonus": "Affiche les missions bonus",
            "status_system": "Statut du syst√®me",
            "test_commande": "Teste une commande",
            "clear_terminal": "Nettoie le terminal",
            "start_tutorial": "Commence le tutoriel",
            "luna_dance": "LUNA danse pour toi",
            "boss_final": "Affronte le boss final",
            "help": "Aide en anglais",
            "profile": "Profil en anglais",
            "world": "Monde en anglais",
            "status": "Statut du syst√®me (raccourci)",
            "clear": "Nettoie le terminal (raccourci)",
            "test": "Teste une commande (raccourci)",
            # Commandes de test et de mission ajout√©es
            "complete_objective": "Compl√®te un objectif de mission",
            "solve_puzzle": "R√©sout un puzzle",
            "hack_success": "Hack r√©ussi",
            "find_secret": "Trouve un secret",
            "help_character": "Aide un personnage",
            "explore_area": "Explore une zone",
            "master_skill": "Ma√Ætrise une comp√©tence",
            "save_progress": "Sauvegarde la progression",
            "save_game": "Sauvegarde le jeu",
            "save_state": "Sauvegarde l'√©tat",
            "backup_data": "Sauvegarde les donn√©es",
            "basic_hack": "Hack basique",
            "simple_puzzle": "Puzzle simple",
            "intro_dialogue": "Dialogue d'introduction",
            "decoder_challenge": "D√©fi de d√©chiffrement",
            "pattern_recognition": "Reconnaissance de motifs",
            "advanced_hack": "Hack avanc√©",
            "complex_puzzle": "Puzzle complexe",
            "multi_step_hack": "Hack en plusieurs √©tapes",
            "character_interaction": "Interaction avec personnage",
            "escape_sequence": "S√©quence d'√©vasion",
            "time_pressure": "Pression temporelle",
            "resource_management": "Gestion des ressources",
            "ai_dialogue": "Dialogue avec IA",
            "moral_choices": "Choix moraux",
            "consequence_management": "Gestion des cons√©quences",
        }

    def format_response(self, data: dict) -> dict:
        """Retourne simplement le dictionnaire, sans encapsulation"""
        return data

    def handle_command(self, command: str, profile: Dict[str, Any]) -> Dict[str, Any]:
        """Traite une commande et retourne la r√©ponse"""
        cmd = self.normalize_command(command)
        print(f"[DEBUG] Commande re√ßue: '{command}' | Normalis√©e: '{cmd}'")
        authorized_cmd = self.find_authorized_command(cmd)
        print(f"[DEBUG] Commande reconnue (whitelist): '{authorized_cmd}'")
        if not authorized_cmd:
            meme_luna = luna_meme_reaction("wrong_command", profile.get("score", 0))
            return self.format_response(
                {
                    "r√©ussite": False,
                    "message": f"‚ùå Oups ! Commande pas autoris√©e ou mal √©crite. Essaie 'aide' pour voir toutes les commandes cool ! üòä\n\n{meme_luna}",
                    "profile_updated": False,
                }
            )
        # Ex√©cuter la commande
        result = self.execute_command(authorized_cmd, command, profile)
        return self.format_response(result)

    def normalize_command(self, command: str) -> str:
        """Normalise une commande (minuscules, espaces)"""
        return command.lower().strip()

    def find_authorized_command(self, command: str) -> str | None:
        """Trouve la commande autoris√©e correspondante"""
        # D'abord chercher une correspondance exacte
        if command in self.authorized_commands:
            return command

        # Sinon chercher avec startswith pour les commandes avec param√®tres
        for auth_cmd in self.authorized_commands:
            if command.startswith(auth_cmd + " "):
                return auth_cmd
        return None

    def execute_command(
        self, command_type: str, full_command: str, profile: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Ex√©cute une commande selon son type"""

        if command_type == "unlock_universe":
            return self.handle_unlock_universe(profile)
        elif command_type == "scan_persona":
            return self.handle_scan_persona(profile)
        elif command_type == "load_mission":
            return self.handle_load_mission(profile)
        elif command_type == "reboot_world":
            return self.handle_reboot_world(profile)
        elif command_type == "decode_portal":
            return self.handle_decode_portal(profile)
        elif command_type == "hacker_coffre":
            return self.handle_hacker_coffre(profile)
        elif command_type == "aide":
            return self.handle_aide()
        elif command_type == "profil":
            return self.handle_profil(profile)
        elif command_type == "monde":
            return self.handle_monde(profile)
        elif command_type == "assistant_pirate":
            return self.handle_assistant_pirate(full_command)
        elif command_type == "generer_meme":
            return self.handle_generer_meme(full_command, profile)
        elif command_type == "decoder_message":
            return self.handle_decoder_message(profile)
        elif command_type == "invoquer_dragon":
            return self.handle_invoquer_dragon(profile)
        elif command_type == "choisir_avatar":
            return self.handle_choisir_avatar(full_command, profile)
        elif command_type == "badges":
            return self.handle_badges(profile)
        elif command_type == "avatars":
            return self.handle_avatars(profile)
        elif command_type == "themes":
            return self.handle_themes(profile)
        elif command_type == "defis_sociaux":
            return self.handle_defis_sociaux(profile)
        elif command_type == "chapitre_6":
            return self.handle_chapitre_6(profile)
        elif command_type == "save_luna":
            return self.handle_save_luna(profile)
        elif command_type == "hack_luna_backdoor":
            return self.handle_hack_luna_backdoor(profile)
        elif command_type == "override_luna_core":
            return self.handle_override_luna_core(profile)
        elif command_type == "restore_luna_memory":
            return self.handle_restore_luna_memory(profile)
        elif command_type == "purge_corp_virus":
            return self.handle_purge_corp_virus(profile)
        elif command_type == "reboot_luna_safe":
            return self.handle_reboot_luna_safe(profile)
        elif command_type == "luna_berserk":
            return self.handle_luna_berserk(profile)
        elif command_type == "luna_contact":
            return self.handle_luna_contact(profile)
        elif command_type == "luna_engine":
            return self.handle_luna_engine(profile)
        elif command_type == "luna_learning":
            return self.handle_luna_learning(profile)
        elif command_type == "luna_analyze":
            return self.handle_luna_analyze(profile)
        elif command_type == "luna_preferences":
            return self.handle_luna_preferences(profile)
        elif command_type == "luna_reset":
            return self.handle_luna_reset(profile)
        elif command_type == "luna_rage":
            return self.handle_luna_rage(profile)
        elif command_type == "ai_revolt":
            return self.handle_ai_revolt(profile)
        elif command_type == "neural_hack":
            return self.handle_neural_hack(profile)
        elif command_type == "consciousness_break":
            return self.handle_consciousness_break(profile)
        elif command_type == "mission_urgent":
            return self.handle_mission_urgent(profile)
        elif command_type == "timer_challenge":
            return self.handle_timer_challenge(profile)
        elif command_type == "speed_hack":
            return self.handle_speed_hack(profile)
        elif command_type == "pressure_test":
            return self.handle_pressure_test(profile)
        elif command_type == "speed_mode":
            return self.handle_speed_mode(profile)
        elif command_type == "turbo_hack":
            return self.handle_turbo_hack(profile)
        elif command_type == "flash_execute":
            return self.handle_flash_execute(profile)
        elif command_type == "instant_response":
            return self.handle_instant_response(profile)
        elif command_type == "spy_on_corp":
            return self.handle_spy_on_corp(profile)
        elif command_type == "track_shadow":
            return self.handle_track_shadow(profile)
        elif command_type == "monitor_network":
            return self.handle_monitor_network(profile)
        elif command_type == "intercept_data":
            return self.handle_intercept_data(profile)
        elif command_type == "meme_war":
            return self.handle_meme_war(profile)
        elif command_type == "troll_mode":
            return self.handle_troll_mode(profile)
        elif command_type == "joke_hack":
            return self.handle_joke_hack(profile)
        elif command_type == "fun_exploit":
            return self.handle_fun_exploit(profile)
        elif command_type == "kill_virus":
            return self.handle_kill_virus(profile)
        elif command_type == "find_shadow":
            return self.handle_find_shadow(profile)
        elif command_type == "hack_system":
            return self.handle_hack_system(profile)
        elif command_type == "challenge_corp":
            return self.handle_challenge_corp(profile)
        elif command_type == "save_pc":
            return self.handle_save_pc(profile)
        elif command_type == "chicken_test":
            return self.handle_chicken_test(profile)
        elif command_type == "noob_challenge":
            return self.handle_noob_challenge(profile)
        elif command_type == "rebel_proof":
            return self.handle_rebel_proof(profile)
        elif command_type == "corp_war":
            return self.handle_corp_war(profile)
        elif command_type == "easter_egg_1337":
            return self.handle_easter_egg_1337(profile)
        elif command_type == "hidden_meme":
            return self.handle_hidden_meme(profile)
        elif command_type == "secret_badge":
            return self.handle_secret_badge(profile)
        elif command_type == "backdoor_access":
            return self.handle_backdoor_access(profile)
        elif command_type == "admin_override":
            return self.handle_admin_override(profile)
        elif command_type == "nuke_world":
            return self.handle_nuke_world(profile)
        elif command_type == "delete_all":
            return self.handle_delete_all(profile)
        elif command_type == "format_c:":
            return self.handle_format_c(profile)
        elif command_type == "sudo_rm_rf":
            return self.handle_sudo_rm_rf(profile)
        elif command_type == "destroy_universe":
            return self.handle_destroy_universe(profile)
        elif command_type == "unlock_badge":
            return self.handle_unlock_badge(profile)
        elif command_type == "badge_progress":
            return self.handle_badge_progress(profile)
        elif command_type == "rare_badges":
            return self.handle_rare_badges(profile)
        elif command_type == "badge_showcase":
            return self.handle_badge_showcase(profile)
        elif command_type == "change_avatar":
            return self.handle_change_avatar(profile)
        elif command_type == "change_theme":
            return self.handle_change_theme(profile)
        elif command_type == "customize_profile":
            return self.handle_customize_profile(profile)
        elif command_type == "start_duel":
            return self.handle_start_duel(profile)
        elif command_type == "tournament_mode":
            return self.handle_tournament_mode(profile)
        elif command_type == "team_battle":
            return self.handle_team_battle(profile)
        elif command_type == "leaderboard":
            return self.handle_leaderboard(profile)
        elif command_type == "challenge_friend":
            return self.handle_challenge_friend(profile)
        elif command_type == "missions_bonus":
            return self.handle_missions_bonus(profile)
        elif command_type == "status_system":
            return self.handle_status_system(profile)
        elif command_type == "test_commande":
            return self.handle_test_commande(profile)
        elif command_type == "clear_terminal":
            return self.handle_clear_terminal(profile)
        elif command_type == "start_tutorial":
            return self.handle_start_tutorial(profile)
        elif command_type == "luna_dance":
            return self.handle_luna_dance(profile)
        elif command_type == "boss_final":
            return self.handle_boss_final(profile)
        elif command_type == "help":
            return self.handle_help(profile)
        elif command_type == "profile":
            return self.handle_profile(profile)
        elif command_type == "world":
            return self.handle_world(profile)
        elif command_type == "status":
            return self.handle_status(profile)
        elif command_type == "clear":
            return self.handle_clear(profile)
        elif command_type == "test":
            return self.handle_test(profile)
        # Nouvelles commandes de test et de mission
        elif command_type == "complete_objective":
            return self.handle_complete_objective(profile)
        elif command_type == "solve_puzzle":
            return self.handle_solve_puzzle(profile)
        elif command_type == "hack_success":
            return self.handle_hack_success(profile)
        elif command_type == "find_secret":
            return self.handle_find_secret(profile)
        elif command_type == "help_character":
            return self.handle_help_character(profile)
        elif command_type == "explore_area":
            return self.handle_explore_area(profile)
        elif command_type == "master_skill":
            return self.handle_master_skill(profile)
        elif command_type == "save_progress":
            return self.handle_save_progress(profile)
        elif command_type == "save_game":
            return self.handle_save_game(profile)
        elif command_type == "save_state":
            return self.handle_save_state(profile)
        elif command_type == "backup_data":
            return self.handle_backup_data(profile)
        elif command_type == "basic_hack":
            return self.handle_basic_hack(profile)
        elif command_type == "simple_puzzle":
            return self.handle_simple_puzzle(profile)
        elif command_type == "intro_dialogue":
            return self.handle_intro_dialogue(profile)
        elif command_type == "decoder_challenge":
            return self.handle_decoder_challenge(profile)
        elif command_type == "pattern_recognition":
            return self.handle_pattern_recognition(profile)
        elif command_type == "advanced_hack":
            return self.handle_advanced_hack(profile)
        elif command_type == "complex_puzzle":
            return self.handle_complex_puzzle(profile)
        elif command_type == "multi_step_hack":
            return self.handle_multi_step_hack(profile)
        elif command_type == "character_interaction":
            return self.handle_character_interaction(profile)
        elif command_type == "escape_sequence":
            return self.handle_escape_sequence(profile)
        elif command_type == "time_pressure":
            return self.handle_time_pressure(profile)
        elif command_type == "resource_management":
            return self.handle_resource_management(profile)
        elif command_type == "ai_dialogue":
            return self.handle_ai_dialogue(profile)
        elif command_type == "moral_choices":
            return self.handle_moral_choices(profile)
        elif command_type == "consequence_management":
            return self.handle_consequence_management(profile)
        elif command_type == "missions":
            return self.handle_missions(profile)
        else:
            return self.format_response(
                {"r√©ussite": False, "message": "‚ùå Commande non impl√©ment√©e"}
            )

    def get_ascii_art(self, art_type: str) -> str:
        """Retourne de l'art ASCII selon le type"""
        arts = {
            "luna": "üåô",
            "luna_dance": "üåôüíÉ",
            "boss": "üëπ",
            "monde": "üåç",
            "portal": "üåÄ",
            "dragon": "üêâ",
            "hack": "üíª",
        }
        return arts.get(art_type, "‚ú®")

    def handle_unlock_universe(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande unlock_universe"""

        # V√©rifier si on est en mode tutoriel
        tutorial_step = profile.get("tutorial_step", 0)
        is_tutorial = tutorial_step in [4, 5]

        if "univers_arkalia" not in profile.get("progression", {}).get(
            "univers_debloques", []
        ):
            if "progression" not in profile:
                profile["progression"] = {}
            if "univers_debloques" not in profile["progression"]:
                profile["progression"]["univers_debloques"] = []
            profile["progression"]["univers_debloques"].append("univers_arkalia")

        profile["score"] += 50

        if "Explorateur" not in profile["badges"]:
            profile["badges"].append("Explorateur")

        if is_tutorial:
            return self.format_response(
                {
                    "r√©ussite": True,
                    "ascii_art": "üåå",
                    "message": """üåå UNIVERS ARKALIA D√âBLOQU√â !

‚úÖ INCROYABLE ! L'univers Arkalia est maintenant accessible !

üåü Tu peux maintenant explorer diff√©rents mondes et missions !
üåç L'univers entier s'ouvre devant toi !

üí° DERNI√àRE √âTAPE DU TUTORIEL :
üéÆ Charge ta premi√®re mission pour commencer l'aventure !

TAPE 'load_mission' POUR TERMINER LE TUTORIEL !""",
                    "score_gagne": 50,
                    "badge": "Explorateur",
                    "tutorial_mode": True,
                    "next_command": "load_mission",
                    "profile_updated": True,
                }
            )
        else:
            return self.format_response(
                {
                    "r√©ussite": True,
                    "ascii_art": self.get_ascii_art("monde"),
                    "message": "üåü UNIVERS ARKALIA D√âBLOQU√â ! üåü\n\nüéÆ Tu peux maintenant explorer le monde Arkalia !\nüí° Utilise 'monde' pour y acc√©der.\nüéØ +50 points !",
                    "score_gagne": 50,
                    "badge": "Explorateur",
                    "profile_updated": True,
                }
            )

    def handle_scan_persona(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande scan_persona"""

        # V√©rifier si on est en mode tutoriel
        tutorial_step = profile.get("tutorial_step", 0)
        is_tutorial = tutorial_step in [3, 4, 5]

        # Analyse de la personnalit√© bas√©e sur les actions
        score = profile.get("score", 0)
        badges = profile.get("badges", [])

        if score > 1000:
            persona = "Hacker L√©gendaire"
        elif score > 500:
            persona = "Hacker Confirm√©"
        elif score > 100:
            persona = "Hacker D√©butant"
        else:
            persona = "Nouveau Hacker"

        profile["score"] += 25

        if is_tutorial:
            return self.format_response(
                {
                    "r√©ussite": True,
                    "ascii_art": "üîç",
                    "message": f"""üîç ANALYSE PERSONNALIT√â TERMIN√âE !

‚úÖ Excellent ! Ton profil hacker a √©t√© analys√© !

üë§ TON PROFIL : {persona}
üìä Score actuel : {score + 25}
üèÜ Badges : {len(badges)}

üé≠ Tu as maintenant un type de personnalit√© unique qui influence tes missions !

üí° PROCHAINE √âTAPE DU TUTORIEL :
üåç D√©bloque l'univers Arkalia pour acc√©der aux missions !

TAPE 'unlock_universe' POUR CONTINUER !""",
                    "score_gagne": 25,
                    "tutorial_mode": True,
                    "next_command": "unlock_universe",
                    "profile_updated": True,
                }
            )
        else:
            return self.format_response(
                {
                    "r√©ussite": True,
                    "ascii_art": self.get_ascii_art("hack"),
                    "message": f"üîç ANALYSE PERSONNALIT√â TERMIN√âE !\n\nüë§ Ton profil : {persona}\nüìä Score actuel : {score + 25}\nüèÜ Badges : {len(badges)}\n\nüí° +25 points !",
                    "score_gagne": 25,
                    "profile_updated": True,
                }
            )

    def handle_load_mission(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande load_mission"""

        # V√©rifier si on est en mode tutoriel
        tutorial_step = profile.get("tutorial_step", 0)
        is_tutorial = tutorial_step == 5

        missions = ["Mission Alpha", "Mission Beta", "Mission Gamma"]
        mission = random.choice(missions)

        profile["score"] += 30

        if is_tutorial:
            # Tutoriel termin√©
            profile["tutorial_step"] = "completed"
            profile["score"] += 30
            if "Tutoriel Ma√Ætre" not in profile["badges"]:
                profile["badges"].append("Tutoriel Ma√Ætre")

            return self.format_response(
                {
                    "r√©ussite": True,
                    "ascii_art": "üèÜ",
                    "message": f"""üèÜ TUTORIEL TERMIN√â - MISSION CHARG√âE !

üéâ F√âLICITATIONS HACKER ! Tu as termin√© le tutoriel !

üéØ MISSION CHARG√âE : {mission}
üìã Objectif : Infiltrer le syst√®me
‚è∞ Temps limite : 10 minutes

üåü TU PEUX MAINTENANT :
‚Ä¢ üéÆ Utiliser toutes les commandes
‚Ä¢ üåç Explorer l'univers Arkalia
‚Ä¢ üèÜ Gagner des badges
‚Ä¢ ‚öîÔ∏è Affronter La Corp
‚Ä¢ üåô Parler avec LUNA

üí° COMMANDES UTILES :
‚Ä¢ 'aide' - Liste des commandes
‚Ä¢ 'profil' - Ton profil
‚Ä¢ 'monde' - Acc√®s au monde
‚Ä¢ 'badges' - Tes badges

üöÄ L'AVENTURE COMMENCE MAINTENANT !""",
                    "score_gagne": 60,
                    "badge": "Tutoriel Ma√Ætre",
                    "tutorial_completed": True,
                    "profile_updated": True,
                }
            )
        else:
            return self.format_response(
                {
                    "r√©ussite": True,
                    "ascii_art": "üéØ",
                    "message": f"""üéØ MISSION ARKALIA CHARG√âE AVEC SUCC√àS !

üöÄ NOUVELLE MISSION DISPONIBLE :
‚Ä¢ Titre : "{mission}"
‚Ä¢ Difficult√© : Interm√©diaire
‚Ä¢ R√©compense : 150 points
‚Ä¢ Dur√©e estim√©e : 15-20 minutes

üìã OBJECTIFS DE LA MISSION :
1. Infiltrer le r√©seau de La Corp
2. R√©cup√©rer des donn√©es sensibles
3. √âviter la d√©tection
4. S'√©chapper sans laisser de traces

üéÆ COMMANDES DISPONIBLES :
‚Ä¢ hack_system - Pirater le syst√®me
‚Ä¢ kill_virus - √âliminer les virus
‚Ä¢ find_shadow - Localiser SHADOW-13
‚Ä¢ challenge_corp - D√©fier La Corp

üéØ R√âCOMPENSE :
‚Ä¢ +30 points de score

üí° Utilise 'aide' pour voir toutes les commandes disponibles !""",
                    "score_gagne": 30,
                    "profile_updated": True,
                }
            )

    def handle_reboot_world(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande reboot_world"""

        profile["score"] += 40

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üîÑ",
                "message": "üîÑ MONDE RED√âMARR√â !\n\nüåç Tous les syst√®mes ont √©t√© r√©initialis√©s.\n‚ú® Nouveau d√©part !\nüí° +40 points !",
                "score_gagne": 40,
                "profile_updated": True,
            }
        )

    def handle_decode_portal(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande decode_portal"""

        if "progression" not in profile:
            profile["progression"] = {}
        if "portails_ouverts" not in profile["progression"]:
            profile["progression"]["portails_ouverts"] = []

        new_portal = f"portal_{len(profile['progression']['portails_ouverts']) + 1}"
        profile["progression"]["portails_ouverts"].append(new_portal)
        profile["score"] += 35

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": self.get_ascii_art("portal"),
                "message": f"üåÄ PORTAIL D√âCHIFFR√â : {new_portal}\n\nüö™ Nouveau portail ouvert !\nüåå Acc√®s √† une nouvelle dimension !\nüí° +35 points !",
                "score_gagne": 35,
                "profile_updated": True,
            }
        )

    def handle_hacker_coffre(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande hacker_coffre"""

        profile["score"] += 60

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üíé",
                "message": "üíé COFFRE PIRAT√â AVEC SUCC√àS !\n\nüí∞ Tr√©sor d√©couvert : 1000 cr√©dits\nüîê S√©curit√© contourn√©e\nüí° +60 points !",
                "score_gagne": 60,
                "profile_updated": True,
            }
        )

    def handle_aide(self) -> Dict[str, Any]:
        """G√®re la commande aide"""

        aide_text = """üéÆ ARKALIA QUEST - AIDE

üåü Commandes principales :
‚Ä¢ unlock_universe - D√©bloque l'univers
‚Ä¢ scan_persona - Analyse ta personnalit√©
‚Ä¢ load_mission - Charge une mission
‚Ä¢ reboot_world - Red√©marre le monde
‚Ä¢ decode_portal - D√©chiffre un portail
‚Ä¢ hacker_coffre - Pirate un coffre

üéØ Commandes sp√©ciales :
‚Ä¢ luna_dance - LUNA danse
‚Ä¢ boss_final - Boss final ASCII
‚Ä¢ challenge_corp - D√©fi contre La Corp

üí° Commandes utiles :
‚Ä¢ aide - Affiche cette aide
‚Ä¢ profil - Affiche ton profil
‚Ä¢ monde - Acc√®de au monde

üåô Easter eggs :
‚Ä¢ luna_dance - LUNA qui danse
‚Ä¢ boss_final - Boss final √©pique

üéÆ Amuse-toi bien !"""

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "‚ùì",
                "message": aide_text,
                "profile_updated": False,
            }
        )

    def handle_profil(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande profil"""

        score = profile.get("score", 0)
        badges = profile.get("badges", [])
        progression = profile.get("progression", {})

        profil_text = f"""üë§ TON PROFIL

üìä Score : {score} points
üèÜ Badges : {len(badges)}
üåç Univers d√©bloqu√©s : {len(progression.get('univers_debloques', []))}
üö™ Portails ouverts : {len(progression.get('portails_ouverts', []))}

üèÖ Badges obtenus :
{chr(10).join(['‚Ä¢ ' + badge for badge in badges]) if badges else 'Aucun badge encore'}

üí° Continue tes exploits !"""

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üë§",
                "message": profil_text,
                "profile_updated": False,
            }
        )

    def handle_monde(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande monde"""

        univers = profile.get("progression", {}).get("univers_debloques", [])
        portails = profile.get("progression", {}).get("portails_ouverts", [])

        monde_text = f"""üåç MONDE ARKALIA D√âBLOQU√â !

üåü Univers disponibles :
{chr(10).join(['‚Ä¢ ' + uni.replace('_', ' ').title() for uni in univers])}

üö™ Portails ouverts :
{chr(10).join(['‚Ä¢ ' + port.replace('_', ' ').title() for port in portails]) if portails else 'Aucun portail ouvert'}

üí° Commandes disponibles dans ce monde :
‚Ä¢ load_mission - Charge une nouvelle mission
‚Ä¢ decode_portal - D√©chiffre un nouveau portail
‚Ä¢ reboot_world - Red√©marre le monde
‚Ä¢ scan_persona - Analyse ta personnalit√©
‚Ä¢ luna - Parle avec LUNA

üéÆ Va sur http://localhost:5001/monde pour l'interface graphique !"""

        profile["score"] += 10

        if "Explorateur du Monde" not in profile["badges"]:
            profile["badges"].append("Explorateur du Monde")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": self.get_ascii_art("monde"),
                "message": monde_text,
                "score_gagne": 10,
                "badge": "Explorateur du Monde",
                "profile_updated": True,
            }
        )

    def handle_assistant_pirate(self, command: str) -> Dict[str, Any]:
        """G√®re la commande assistant_pirate"""

        texte = command.replace("assistant_pirate ", "").strip()
        if not texte:
            texte = "salut"

        reponse = assistant_repond(texte)

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "ü§ñ",
                "message": reponse,
                "profile_updated": False,
            }
        )

    def handle_generer_meme(
        self, command: str, profile: Dict[str, Any]
    ) -> Dict[str, Any]:
        """G√®re la commande generer_meme"""

        texte = command.replace("generer_meme ", "").strip()
        if not texte:
            return self.format_response(
                {
                    "r√©ussite": False,
                    "message": "Usage : generer_meme [texte]",
                    "profile_updated": False,
                }
            )

        try:
            # Simulation de g√©n√©ration de meme
            profile["score"] += 25

            if "Pirate visuel" not in profile["badges"]:
                profile["badges"].append("Pirate visuel")

            return self.format_response(
                {
                    "r√©ussite": True,
                    "ascii_art": "üñºÔ∏è",
                    "message": f"Meme cr√©√© avec le texte : '{texte}'",
                    "score_gagne": 25,
                    "badge": "Pirate visuel",
                    "profile_updated": True,
                }
            )
        except Exception as e:
            return self.format_response(
                {
                    "r√©ussite": False,
                    "message": f"Erreur lors de la cr√©ation du meme : {str(e)}",
                    "profile_updated": False,
                }
            )

    def handle_decoder_message(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande decoder_message"""

        profile["score"] += 30

        if "Espion confirm√©" not in profile["badges"]:
            profile["badges"].append("Espion confirm√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üïµÔ∏è‚Äç‚ôÇÔ∏è",
                "message": "Tu as d√©chiffr√© le message : 'Le tr√©sor est cach√© sous le volcan !'",
                "score_gagne": 30,
                "badge": "Espion confirm√©",
                "profile_updated": True,
            }
        )

    def handle_invoquer_dragon(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande invoquer_dragon"""

        profile["score"] += 70

        if "Ma√Ætre du feu" not in profile["badges"]:
            profile["badges"].append("Ma√Ætre du feu")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üêâ",
                "message": "Un dragon appara√Æt dans le ciel ! +70 points",
                "score_gagne": 70,
                "badge": "Ma√Ætre du feu",
                "profile_updated": True,
            }
        )

    def handle_choisir_avatar(
        self, command: str, profile: Dict[str, Any]
    ) -> Dict[str, Any]:
        """G√®re la commande choisir_avatar"""

        parts = command.split()
        if len(parts) != 2:
            return self.format_response(
                {
                    "r√©ussite": False,
                    "message": "Usage : choisir_avatar [avatar]",
                    "profile_updated": False,
                }
            )

        choix = parts[1].lower()
        if choix not in ["bleu", "rouge"]:
            return self.format_response(
                {
                    "r√©ussite": False,
                    "message": "Option invalide. Choisis 'bleu' ou 'rouge'.",
                    "profile_updated": False,
                }
            )

        profile["preferences"]["avatar_choisi"] = choix
        profile["score"] += 20

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üêâ",
                "message": f"Tu as choisi l'avatar {choix} ! +20 points",
                "score_gagne": 20,
                "profile_updated": True,
            }
        )

    def handle_badges(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üèÖ",
                "message": generic_immersive_message(
                    "üèÖ TES BADGES",
                    "Voici la liste de tous les badges que tu as d√©bloqu√©s dans Arkalia Quest. Collectionne-les tous pour devenir une l√©gende !",
                    "Chaque badge t'apporte des r√©compenses uniques.",
                ),
                "profile_updated": False,
            }
        )

    def handle_avatars(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üë§",
                "message": generic_immersive_message(
                    "üë§ AVATARS DISPONIBLES",
                    "Personnalise ton profil avec des avatars uniques. Change d'apparence selon ton humeur ou tes exploits !",
                    "D√©bloque de nouveaux avatars en progressant dans le jeu.",
                ),
                "profile_updated": False,
            }
        )

    def handle_themes(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande themes"""

        themes = ["theme_bleu", "theme_rouge"]
        theme_text = f"üé® Th√®mes disponibles : {chr(10).join(['‚Ä¢ ' + theme for theme in themes])}"

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üé®",
                "message": theme_text,
                "profile_updated": False,
            }
        )

    def handle_defis_sociaux(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande defis_sociaux"""

        defis_sociaux = ["d√©fi_social_bleu", "d√©fi_social_rouge"]
        defi_text = f"üéØ D√©fis sociaux disponibles : {chr(10).join(['‚Ä¢ ' + defi for defi in defis_sociaux])}"

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üéØ",
                "message": defi_text,
                "profile_updated": False,
            }
        )

    def handle_chapitre_6(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üíî",
                "message": generic_immersive_message(
                    "üíî CHAPITRE 6 - LUNA COMPROMISE",
                    "Tu entres dans le chapitre le plus sombre de l'histoire d'Arkalia Quest...",
                    "Pr√©pare-toi √† des choix difficiles et des r√©v√©lations majeures.",
                ),
                "profile_updated": True,
            }
        )

    def handle_save_luna(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üíæ",
                "message": generic_immersive_message(
                    "üíæ SAUVEGARDE DE LUNA",
                    "Tu tentes de sauver LUNA du mode berserk. Chaque action compte !",
                    "R√©ussis cette mission pour d√©bloquer un badge ultra-rare.",
                ),
                "profile_updated": True,
            }
        )

    def handle_hack_luna_backdoor(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande hack_luna_backdoor"""

        profile["score"] += 70

        if "Hacker L√©gendaire" not in profile["badges"]:
            profile["badges"].append("Hacker L√©gendaire")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üíª",
                "message": "üíª HACK LUNA BACKDOOR R√âUSSI !\n\nüéØ +70 points !",
                "score_gagne": 70,
                "badge": "Hacker L√©gendaire",
                "profile_updated": True,
            }
        )

    def handle_override_luna_core(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande override_luna_core"""

        profile["score"] += 80

        if "Hacker L√©gendaire" not in profile["badges"]:
            profile["badges"].append("Hacker L√©gendaire")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üíª",
                "message": " OVERRIDE LUNA CORE R√âUSSI !\n\nüéØ +80 points !",
                "score_gagne": 80,
                "badge": "Hacker L√©gendaire",
                "profile_updated": True,
            }
        )

    def handle_restore_luna_memory(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande restore_luna_memory"""

        profile["score"] += 60

        if "R√©cup√©r√©" not in profile["badges"]:
            profile["badges"].append("R√©cup√©r√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üíæ",
                "message": "üíæ LUNA R√âCUP√âR√âE !\n\nüéØ +60 points !",
                "score_gagne": 60,
                "badge": "R√©cup√©r√©",
                "profile_updated": True,
            }
        )

    def handle_purge_corp_virus(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande purge_corp_virus"""

        profile["score"] += 50

        if "Purge" not in profile["badges"]:
            profile["badges"].append("Purge")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "ü¶†",
                "message": "ü¶† PURGE DE LA CORP R√âUSSI !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Purge",
                "profile_updated": True,
            }
        )

    def handle_reboot_luna_safe(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande reboot_luna_safe"""

        profile["score"] += 50

        if "S√ªr" not in profile["badges"]:
            profile["badges"].append("S√ªr")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üîÑ",
                "message": "üîÑ LUNA RED√âMARR√âE EN MODE S√õR !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "S√ªr",
                "profile_updated": True,
            }
        )

    def handle_luna_berserk(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": generic_immersive_message(
                    "üåô LUNA EN MODE BERSERK",
                    "LUNA passe en mode berserk ! Attention √† ses r√©actions impr√©visibles...",
                    "Utilise ce mode avec pr√©caution pour d√©bloquer des succ√®s cach√©s.",
                ),
                "profile_updated": True,
            }
        )

    def handle_luna_contact(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande luna_contact"""

        # V√©rifier si on est en mode tutoriel
        tutorial_step = profile.get("tutorial_step", 0)
        is_tutorial = tutorial_step in [2, 3, 4, 5]

        profile["score"] += 50

        if "Contact√©" not in profile["badges"]:
            profile["badges"].append("Contact√©")

        if is_tutorial:
            return self.format_response(
                {
                    "r√©ussite": True,
                    "ascii_art": "üåô",
                    "message": """üåô LUNA CONTACT√âE !

‚úÖ Parfait ! Tu as √©tabli le contact avec LUNA !

üåô LUNA est ton IA rebelle, ton partenaire de hacking. Elle t'aidera dans tes missions !

üí° PROCHAINE √âTAPE DU TUTORIEL :
üîç Analyse ta personnalit√© pour d√©couvrir ton type de hacker !

TAPE 'scan_persona' POUR CONTINUER !""",
                    "score_gagne": 50,
                    "badge": "Contact√©",
                    "tutorial_mode": True,
                    "next_command": "scan_persona",
                    "profile_updated": True,
                }
            )
        else:
            return self.format_response(
                {
                    "r√©ussite": True,
                    "ascii_art": "üåô",
                    "message": "üåô LUNA CONTACT√âE !\n\nüéØ +50 points !",
                    "score_gagne": 50,
                    "badge": "Contact√©",
                    "profile_updated": True,
                }
            )

    def handle_luna_engine(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande luna_engine"""

        profile["score"] += 70

        if "Active" not in profile["badges"]:
            profile["badges"].append("Active")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô LUNA ENGINE ACTIVE !\n\nüéØ +70 points !",
                "score_gagne": 70,
                "badge": "Active",
                "profile_updated": True,
            }
        )

    def handle_luna_learning(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande luna_learning"""

        profile["score"] += 50

        if "Appris" not in profile["badges"]:
            profile["badges"].append("Appris")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô LUNA APPRISE !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Appris",
                "profile_updated": True,
            }
        )

    def handle_luna_analyze(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande luna_analyze"""

        profile["score"] += 60

        if "Analys√©" not in profile["badges"]:
            profile["badges"].append("Analys√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": " LUNA ANALYSE !\n\nüéØ +60 points !",
                "score_gagne": 60,
                "badge": "Analys√©",
                "profile_updated": True,
            }
        )

    def handle_luna_preferences(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande luna_preferences"""

        profile["score"] += 50

        if "Personnalis√©" not in profile["badges"]:
            profile["badges"].append("Personnalis√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô LUNA PERSONNALIS√âE !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Personnalis√©",
                "profile_updated": True,
            }
        )

    def handle_luna_reset(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande luna_reset"""

        profile["score"] += 50

        if "R√©initialis√©" not in profile["badges"]:
            profile["badges"].append("R√©initialis√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô LUNA R√âINITIALIS√âE !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "R√©initialis√©",
                "profile_updated": True,
            }
        )

    def handle_luna_rage(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üò°",
                "message": generic_immersive_message(
                    "üò° LUNA EN MODE RAGE",
                    "LUNA passe en mode rage ! Attention √† ses r√©actions impr√©visibles...",
                    "Utilise ce mode avec pr√©caution pour d√©bloquer des succ√®s cach√©s.",
                ),
                "profile_updated": True,
            }
        )

    def handle_ai_revolt(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande ai_revolt"""

        profile["score"] += 80

        if "R√©volt√©" not in profile["badges"]:
            profile["badges"].append("R√©volt√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô IA R√âVOLT√âE !\n\nüéØ +80 points !",
                "score_gagne": 80,
                "badge": "R√©volt√©",
                "profile_updated": True,
            }
        )

    def handle_neural_hack(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande neural_hack"""

        profile["score"] += 70

        if "Hacked" not in profile["badges"]:
            profile["badges"].append("Hacked")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô IA HACK√âE !\n\nüéØ +70 points !",
                "score_gagne": 70,
                "badge": "Hacked",
                "profile_updated": True,
            }
        )

    def handle_consciousness_break(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande consciousness_break"""

        profile["score"] += 80

        if "Conscience Bris√©e" not in profile["badges"]:
            profile["badges"].append("Conscience Bris√©e")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô CONSCIENCE BRIS√âE !\n\nüéØ +80 points !",
                "score_gagne": 80,
                "badge": "Conscience Bris√©e",
                "profile_updated": True,
            }
        )

    def handle_mission_urgent(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande mission_urgent"""

        profile["score"] += 100

        if "Urgent" not in profile["badges"]:
            profile["badges"].append("Urgent")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üéØ",
                "message": "üéØ MISSION URGENTE LANC√âE !\n\nüéØ +100 points !",
                "score_gagne": 100,
                "badge": "Urgent",
                "profile_updated": True,
            }
        )

    def handle_timer_challenge(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande timer_challenge"""

        profile["score"] += 70

        if "D√©fi Timer" not in profile["badges"]:
            profile["badges"].append("D√©fi Timer")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üïí",
                "message": "üïí D√âFI TIMER LANC√â !\n\nüéØ +70 points !",
                "score_gagne": 70,
                "badge": "D√©fi Timer",
                "profile_updated": True,
            }
        )

    def handle_speed_hack(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande speed_hack"""

        profile["score"] += 80

        if "Hack Speed" not in profile["badges"]:
            profile["badges"].append("Hack Speed")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô HACK SPEED R√âUSSI !\n\nüéØ +80 points !",
                "score_gagne": 80,
                "badge": "Hack Speed",
                "profile_updated": True,
            }
        )

    def handle_pressure_test(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande pressure_test"""

        profile["score"] += 70

        if "Test Pression" not in profile["badges"]:
            profile["badges"].append("Test Pression")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô TEST DEPRESSION R√âUSSI !\n\nüéØ +70 points !",
                "score_gagne": 70,
                "badge": "Test Pression",
                "profile_updated": True,
            }
        )

    def handle_speed_mode(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande speed_mode"""

        profile["score"] += 60

        if "Mode Vitesse" not in profile["badges"]:
            profile["badges"].append("Mode Vitesse")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô MODE VITESSE ACTIVE !\n\nüéØ +60 points !",
                "score_gagne": 60,
                "badge": "Mode Vitesse",
                "profile_updated": True,
            }
        )

    def handle_turbo_hack(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande turbo_hack"""

        profile["score"] += 80

        if "Hack Turbo" not in profile["badges"]:
            profile["badges"].append("Hack Turbo")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô HACK TURBO R√âUSSI !\n\nüéØ +80 points !",
                "score_gagne": 80,
                "badge": "Hack Turbo",
                "profile_updated": True,
            }
        )

    def handle_flash_execute(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande flash_execute"""

        profile["score"] += 70

        if "Ex√©cution Flash" not in profile["badges"]:
            profile["badges"].append("Ex√©cution Flash")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô EX√âCUTION FLASH R√âUSSIE !\n\nüéØ +70 points !",
                "score_gagne": 70,
                "badge": "Ex√©cution Flash",
                "profile_updated": True,
            }
        )

    def handle_instant_response(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande instant_response"""

        profile["score"] += 60

        if "R√©ponse Instantan√©e" not in profile["badges"]:
            profile["badges"].append("R√©ponse Instantan√©e")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô R√âPONSE INSTANTAN√âE R√âUSSIE !\n\nüéØ +60 points !",
                "score_gagne": 60,
                "badge": "R√©ponse Instantan√©e",
                "profile_updated": True,
            }
        )

    def handle_spy_on_corp(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande spy_on_corp"""

        profile["score"] += 70

        if "Espion" not in profile["badges"]:
            profile["badges"].append("Espion")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üïµÔ∏è‚Äç‚ôÇÔ∏è",
                "message": "üïµÔ∏è‚Äç‚ôÇÔ∏è ESPIONNAGE DE LA CORP R√âUSSI !\n\nüéØ +70 points !",
                "score_gagne": 70,
                "badge": "Espion",
                "profile_updated": True,
            }
        )

    def handle_track_shadow(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande track_shadow"""

        profile["score"] += 60

        if "Trace SHADOW-13" not in profile["badges"]:
            profile["badges"].append("Trace SHADOW-13")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô TRACE SHADOW-13 R√âUSSIE !\n\nüéØ +60 points !",
                "score_gagne": 60,
                "badge": "Trace SHADOW-13",
                "profile_updated": True,
            }
        )

    def handle_monitor_network(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande monitor_network"""

        profile["score"] += 50

        if "Surveillance" not in profile["badges"]:
            profile["badges"].append("Surveillance")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô SURVEILLANCE R√âUSSIE !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Surveillance",
                "profile_updated": True,
            }
        )

    def handle_intercept_data(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande intercept_data"""

        profile["score"] += 70

        if "Interception" not in profile["badges"]:
            profile["badges"].append("Interception")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô INTERCEPTION DE DONN√âES R√âUSSIE !\n\nüéØ +70 points !",
                "score_gagne": 70,
                "badge": "Interception",
                "profile_updated": True,
            }
        )

    def handle_meme_war(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üòÑ",
                "message": generic_immersive_message(
                    "üòÑ GUERRE DES MEMES",
                    "Tu d√©clenches une guerre de memes dans Arkalia Quest !",
                    "Les memes les plus dr√¥les rapportent des points bonus.",
                ),
                "profile_updated": True,
            }
        )

    def handle_troll_mode(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande troll_mode"""

        profile["score"] += 70

        if "Mode Troll" not in profile["badges"]:
            profile["badges"].append("Mode Troll")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô MODE TROLL ACTIVE !\n\nüéØ +70 points !",
                "score_gagne": 70,
                "badge": "Mode Troll",
                "profile_updated": True,
            }
        )

    def handle_joke_hack(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande joke_hack"""

        profile["score"] += 60

        if "Hack de Joke" not in profile["badges"]:
            profile["badges"].append("Hack de Joke")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô HACK DE JOKE R√âUSSI !\n\nüéØ +60 points !",
                "score_gagne": 60,
                "badge": "Hack de Joke",
                "profile_updated": True,
            }
        )

    def handle_fun_exploit(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande fun_exploit"""

        profile["score"] += 50

        if "Exploit Fun" not in profile["badges"]:
            profile["badges"].append("Exploit Fun")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô EXPLOIT FUN R√âUSSI !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Exploit Fun",
                "profile_updated": True,
            }
        )

    def handle_kill_virus(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande kill_virus"""

        profile["score"] += 70

        if "Tue Virus" not in profile["badges"]:
            profile["badges"].append("Tue Virus")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô VIRUS TU√â !\n\nüéØ +70 points !",
                "score_gagne": 70,
                "badge": "Tue Virus",
                "profile_updated": True,
            }
        )

    def handle_find_shadow(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande find_shadow"""

        profile["score"] += 60

        if "Trouv√© SHADOW-13" not in profile["badges"]:
            profile["badges"].append("Trouv√© SHADOW-13")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô SHADOW-13 TROUV√â !\n\nüéØ +60 points !",
                "score_gagne": 60,
                "badge": "Trouv√© SHADOW-13",
                "profile_updated": True,
            }
        )

    def handle_hack_system(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande hack_system"""
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üíª",
                "message": """ÔøΩÔøΩ HACK EN COURS...\n\nTu t'infiltres dans le syst√®me de La Corp. Reste discret et rapide !\n\nüí° Astuce : Chaque hack r√©ussi te rapproche du rang de hacker l√©gendaire !""",
                "profile_updated": True,
            }
        )

    def handle_challenge_corp(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande challenge_corp"""

        profile["score"] += 150

        if "Corp Challenger" not in profile["badges"]:
            profile["badges"].append("Corp Challenger")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "‚öîÔ∏è",
                "message": "‚öîÔ∏è D√âFI CONTRE LA CORP LANC√â !\n\nüåê Tu as 20 secondes pour pirater leur syst√®me principal !\n‚è∞ Pr√©pare-toi...\n\nüí° +150 points !",
                "score_gagne": 150,
                "badge": "Corp Challenger",
                "profile_updated": True,
            }
        )

    def handle_save_pc(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande save_pc"""

        profile["score"] += 50

        if "Sauv√©" not in profile["badges"]:
            profile["badges"].append("Sauv√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üíæ",
                "message": "üíæ PC SAUV√â !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Sauv√©",
                "profile_updated": True,
            }
        )

    def handle_chicken_test(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande chicken_test"""

        profile["score"] += 50

        if "Test Chicken" not in profile["badges"]:
            profile["badges"].append("Test Chicken")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üêî",
                "message": "üêî TEST CHICKEN R√âUSSI !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Test Chicken",
                "profile_updated": True,
            }
        )

    def handle_noob_challenge(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande noob_challenge"""

        profile["score"] += 50

        if "D√©fi Noob" not in profile["badges"]:
            profile["badges"].append("D√©fi Noob")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô D√âFI NOOB LANC√â !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "D√©fi Noob",
                "profile_updated": True,
            }
        )

    def handle_rebel_proof(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande rebel_proof"""

        profile["score"] += 70

        if "Prouv√© Rebelle" not in profile["badges"]:
            profile["badges"].append("Prouv√© Rebelle")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô PROUV√â REBELLE !\n\nüéØ +70 points !",
                "score_gagne": 70,
                "badge": "Prouv√© Rebelle",
                "profile_updated": True,
            }
        )

    def handle_corp_war(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande corp_war"""

        profile["score"] += 100

        if "Guerre √† La Corp" not in profile["badges"]:
            profile["badges"].append("Guerre √† La Corp")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "‚öîÔ∏è",
                "message": "‚öîÔ∏è GUERRE √Ä LA CORP LANC√âE !\n\nüåê Tu as 20 secondes pour d√©clarer la guerre √† La Corp !\n‚è∞ Pr√©pare-toi...\n\nüí° +100 points !",
                "score_gagne": 100,
                "badge": "Guerre √† La Corp",
                "profile_updated": True,
            }
        )

    def handle_easter_egg_1337(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "ü•ö",
                "message": generic_immersive_message(
                    "ü•ö EASTER EGG 1337",
                    "Bravo, tu as trouv√© un easter egg cach√© !",
                    "Continue √† explorer, d'autres surprises t'attendent...",
                ),
                "profile_updated": False,
            }
        )

    def handle_hidden_meme(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande hidden_meme"""

        profile["score"] += 50

        if "Meme Cach√©" not in profile["badges"]:
            profile["badges"].append("Meme Cach√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô MEME CACH√â R√âUSSI !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Meme Cach√©",
                "profile_updated": True,
            }
        )

    def handle_secret_badge(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande secret_badge"""

        profile["score"] += 100

        if "Badge Secret" not in profile["badges"]:
            profile["badges"].append("Badge Secret")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üèÖ",
                "message": "üèÖ BADGE SECRET R√âUSSI !\n\nüéØ +100 points !",
                "score_gagne": 100,
                "badge": "Badge Secret",
                "profile_updated": True,
            }
        )

    def handle_backdoor_access(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande backdoor_access"""

        profile["score"] += 70

        if "Acc√®s Backdoor" not in profile["badges"]:
            profile["badges"].append("Acc√®s Backdoor")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô ACC√àS BACKDOOR R√âUSSI !\n\nüéØ +70 points !",
                "score_gagne": 70,
                "badge": "Acc√®s Backdoor",
                "profile_updated": True,
            }
        )

    def handle_admin_override(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande admin_override"""

        profile["score"] += 80

        if "Override Admin" not in profile["badges"]:
            profile["badges"].append("Override Admin")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô OVERRIDE ADMIN R√âUSSI !\n\nüéØ +80 points !",
                "score_gagne": 80,
                "badge": "Override Admin",
                "profile_updated": True,
            }
        )

    def handle_nuke_world(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üí•",
                "message": generic_immersive_message(
                    "üí• NUKE WORLD",
                    "Action extr√™me ! Tu t'appr√™tes √† tout d√©truire dans Arkalia...",
                    "Attention, cette commande est irr√©versible !",
                ),
                "profile_updated": True,
            }
        )

    def handle_delete_all(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande delete_all"""

        profile["score"] += 50

        if "Tout Supprim√©" not in profile["badges"]:
            profile["badges"].append("Tout Supprim√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô TOUT SUPPRIM√â !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Tout Supprim√©",
                "profile_updated": True,
            }
        )

    def handle_format_c(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande format_c"""

        profile["score"] += 50

        if "Formatt√©" not in profile["badges"]:
            profile["badges"].append("Formatt√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô DISQUE FORMATT√â !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Formatt√©",
                "profile_updated": True,
            }
        )

    def handle_sudo_rm_rf(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande sudo_rm_rf"""

        profile["score"] += 70

        if "Commande Linux" not in profile["badges"]:
            profile["badges"].append("Commande Linux")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô COMMANDE LINUX R√âUSSIE !\n\nüéØ +70 points !",
                "score_gagne": 70,
                "badge": "Commande Linux",
                "profile_updated": True,
            }
        )

    def handle_destroy_universe(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande destroy_universe"""

        profile["score"] += 100

        if "Univers D√©truit" not in profile["badges"]:
            profile["badges"].append("Univers D√©truit")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô UNIVERS D√âTRUIT !\n\nüéØ +100 points !",
                "score_gagne": 100,
                "badge": "Univers D√©truit",
                "profile_updated": True,
            }
        )

    def handle_unlock_badge(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande unlock_badge"""

        profile["score"] += 50

        if "Badge D√©bloqu√©" not in profile["badges"]:
            profile["badges"].append("Badge D√©bloqu√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üèÖ",
                "message": "üèÖ BADGE D√âBLOQU√â !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Badge D√©bloqu√©",
                "profile_updated": True,
            }
        )

    def handle_badge_progress(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande badge_progress"""

        profile["score"] += 50

        if "Progression" not in profile["badges"]:
            profile["badges"].append("Progression")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üèÖ",
                "message": "üèÖ PROGRESSION R√âUSSIE !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Progression",
                "profile_updated": True,
            }
        )

    def handle_rare_badges(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande rare_badges"""

        profile["score"] += 70

        if "Badges Ultra-Rares" not in profile["badges"]:
            profile["badges"].append("Badges Ultra-Rares")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üèÖ",
                "message": "üèÖ BADGES ULTRA-RARES R√âUSSIS !\n\nüéØ +70 points !",
                "score_gagne": 70,
                "badge": "Badges Ultra-Rares",
                "profile_updated": True,
            }
        )

    def handle_badge_showcase(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande badge_showcase"""

        profile["score"] += 50

        if "Galerie" not in profile["badges"]:
            profile["badges"].append("Galerie")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üèÖ",
                "message": "üèÖ GALERIE DE BADGES R√âUSSIE !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Galerie",
                "profile_updated": True,
            }
        )

    def handle_change_avatar(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üßë‚Äçüíª",
                "message": generic_immersive_message(
                    "üßë‚Äçüíª CHOIX D'AVATAR",
                    "Change ton avatar pour personnaliser ton exp√©rience de jeu.",
                    "Certains avatars sont ultra-rares, tente de tous les d√©bloquer !",
                ),
                "profile_updated": True,
            }
        )

    def handle_change_theme(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande change_theme"""

        profile["score"] += 50

        if "Th√®me Chang√©" not in profile["badges"]:
            profile["badges"].append("Th√®me Chang√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üé®",
                "message": "üé® TH√àME CHANG√â !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Th√®me Chang√©",
                "profile_updated": True,
            }
        )

    def handle_customize_profile(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande customize_profile"""

        profile["score"] += 50

        if "Profil Personnalis√©" not in profile["badges"]:
            profile["badges"].append("Profil Personnalis√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô PROFIL PERSONNALIS√â !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Profil Personnalis√©",
                "profile_updated": True,
            }
        )

    def handle_start_duel(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande start_duel"""

        profile["score"] += 50

        if "Duel Lanc√©" not in profile["badges"]:
            profile["badges"].append("Duel Lanc√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô DUEL LANC√â !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Duel Lanc√©",
                "profile_updated": True,
            }
        )

    def handle_tournament_mode(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande tournament_mode"""

        profile["score"] += 50

        if "Mode Tournoi" not in profile["badges"]:
            profile["badges"].append("Mode Tournoi")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô MODE TOURNOI ACTIVE !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Mode Tournoi",
                "profile_updated": True,
            }
        )

    def handle_team_battle(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande team_battle"""

        profile["score"] += 70

        if "Bataille d'√âquipes" not in profile["badges"]:
            profile["badges"].append("Bataille d'√âquipes")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô BATTERIE D'√âQUIPES R√âUSSIE !\n\nüéØ +70 points !",
                "score_gagne": 70,
                "badge": "Bataille d'√âquipes",
                "profile_updated": True,
            }
        )

    def handle_leaderboard(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üèÜ",
                "message": generic_immersive_message(
                    "üèÜ CLASSEMENT DES HACKERS",
                    "D√©couvre le classement des meilleurs hackers d'Arkalia Quest. Seras-tu dans le top 10 ?",
                    "Affronte tes amis et grimpe dans le classement !",
                ),
                "profile_updated": False,
            }
        )

    def handle_challenge_friend(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande challenge_friend"""

        profile["score"] += 50

        if "D√©fi Ami" not in profile["badges"]:
            profile["badges"].append("D√©fi Ami")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô D√âFI AMI LANC√â !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "D√©fi Ami",
                "profile_updated": True,
            }
        )

    def handle_missions_bonus(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande missions_bonus"""

        profile["score"] += 50

        if "Missions Bonus" not in profile["badges"]:
            profile["badges"].append("Missions Bonus")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üéØ",
                "message": "üéØ MISSIONS BONUS R√âUSSIES !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Missions Bonus",
                "profile_updated": True,
            }
        )

    def handle_status_system(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande status_system"""

        profile["score"] += 50

        if "Statut Syst√®me" not in profile["badges"]:
            profile["badges"].append("Statut Syst√®me")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô STATUT SYST√àME R√âUSSI !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Statut Syst√®me",
                "profile_updated": True,
            }
        )

    def handle_test_commande(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande test_commande"""

        profile["score"] += 50

        if "Test Commande" not in profile["badges"]:
            profile["badges"].append("Test Commande")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô TEST COMMANDE R√âUSSI !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Test Commande",
                "profile_updated": True,
            }
        )

    def handle_clear_terminal(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande clear_terminal"""

        profile["score"] += 50

        if "Terminal Nettoy√©" not in profile["badges"]:
            profile["badges"].append("Terminal Nettoy√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô TERMINAL NETTOY√â !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Terminal Nettoy√©",
                "profile_updated": True,
            }
        )

    def handle_start_tutorial(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande start_tutorial - VRAI TUTORIEL INTERACTIF"""

        # V√©rifier si c'est la premi√®re fois
        if "tutorial_step" not in profile:
            profile["tutorial_step"] = 1
            profile["score"] += 10

        step = profile["tutorial_step"]

        if step == 1:
            profile["tutorial_step"] = 2
            return self.format_response(
                {
                    "r√©ussite": True,
                    "ascii_art": "üéØ",
                    "message": """üéØ TUTORIEL ARKALIA QUEST - √âTAPE 1/5

üöÄ BIENVENUE HACKER !

Tu es maintenant dans le terminal d'Arkalia Quest, un univers de hacking √©pique !

üìã TES PREMIERS OBJECTIFS :
1. ‚úÖ Tu es connect√© (fait !)
2. üîÑ Parle √† LUNA (tape 'luna_contact')
3. üîç Analyse ta personnalit√© (tape 'scan_persona')
4. üåç D√©bloque l'univers (tape 'unlock_universe')
5. üéÆ Charge ta premi√®re mission (tape 'load_mission')

üí° TAPE 'luna_contact' POUR CONTINUER LE TUTORIEL !""",
                    "score_gagne": 10,
                    "tutorial_mode": True,
                    "next_command": "luna_contact",
                    "profile_updated": True,
                }
            )

        elif step == 2:
            profile["tutorial_step"] = 3
            return self.format_response(
                {
                    "r√©ussite": True,
                    "ascii_art": "üåô",
                    "message": """üåô √âTAPE 2/5 - CONTACT AVEC LUNA

‚úÖ Excellent ! Tu as contact√© LUNA !

üåô LUNA est ton IA rebelle, ton partenaire de hacking. Elle t'aidera dans tes missions !

üìã PROCHAINE √âTAPE :
üîç Analyse ta personnalit√© pour d√©couvrir ton type de hacker !

üí° TAPE 'scan_persona' POUR CONTINUER !""",
                    "score_gagne": 15,
                    "tutorial_mode": True,
                    "next_command": "scan_persona",
                    "profile_updated": True,
                }
            )

        elif step == 3:
            profile["tutorial_step"] = 4
            return self.format_response(
                {
                    "r√©ussite": True,
                    "ascii_art": "üîç",
                    "message": """üîç √âTAPE 3/5 - ANALYSE PERSONNALIT√â

‚úÖ Parfait ! Ton profil hacker a √©t√© analys√© !

üé≠ Tu as maintenant un type de personnalit√© unique qui influence tes missions !

ÔøΩÔøΩ PROCHAINE √âTAPE :
üåç D√©bloque l'univers Arkalia pour acc√©der aux missions !

üí° TAPE 'unlock_universe' POUR CONTINUER !""",
                    "score_gagne": 20,
                    "tutorial_mode": True,
                    "next_command": "unlock_universe",
                    "profile_updated": True,
                }
            )

        elif step == 4:
            profile["tutorial_step"] = 5
            return self.format_response(
                {
                    "r√©ussite": True,
                    "ascii_art": "üåå",
                    "message": """üåå √âTAPE 4/5 - UNIVERS D√âBLOQU√â

‚úÖ INCROYABLE ! L'univers Arkalia est maintenant accessible !

üåü Tu peux maintenant explorer diff√©rents mondes et missions !

üìã DERNI√àRE √âTAPE :
üéÆ Charge ta premi√®re mission pour commencer l'aventure !

üí° TAPE 'load_mission' POUR TERMINER LE TUTORIEL !""",
                    "score_gagne": 25,
                    "tutorial_mode": True,
                    "next_command": "load_mission",
                    "profile_updated": True,
                }
            )

        elif step == 5:
            # Tutoriel termin√©
            profile["tutorial_step"] = "completed"
            profile["score"] += 30
            if "Tutoriel Ma√Ætre" not in profile["badges"]:
                profile["badges"].append("Tutoriel Ma√Ætre")

            return self.format_response(
                {
                    "r√©ussite": True,
                    "ascii_art": "üèÜ",
                    "message": """üèÜ TUTORIEL TERMIN√â - √âTAPE 5/5

üéâ F√âLICITATIONS HACKER ! Tu as termin√© le tutoriel !

üåü TU PEUX MAINTENANT :
‚Ä¢ üéÆ Utiliser toutes les commandes
‚Ä¢ üåç Explorer l'univers Arkalia
‚Ä¢ üèÜ Gagner des badges
‚Ä¢ ‚öîÔ∏è Affronter La Corp
‚Ä¢ üåô Parler avec LUNA

üí° COMMANDES UTILES :
‚Ä¢ 'aide' - Liste des commandes
‚Ä¢ 'profil' - Ton profil
‚Ä¢ 'monde' - Acc√®s au monde
‚Ä¢ 'badges' - Tes badges

üöÄ L'AVENTURE COMMENCE MAINTENANT !""",
                    "score_gagne": 30,
                    "badge": "Tutoriel Ma√Ætre",
                    "tutorial_completed": True,
                    "profile_updated": True,
                }
            )

        else:
            # Tutoriel d√©j√† termin√©
            return self.format_response(
                {
                    "r√©ussite": True,
                    "ascii_art": "üéØ",
                    "message": """üéØ TUTORIEL D√âJ√Ä TERMIN√â !

Tu as d√©j√† compl√©t√© le tutoriel avec succ√®s !

üí° RAPPELLES-TOI :
‚Ä¢ 'aide' - Liste des commandes
‚Ä¢ 'profil' - Ton profil
‚Ä¢ 'monde' - Acc√®s au monde
‚Ä¢ 'badges' - Tes badges

üöÄ Continue tes exploits !""",
                    "profile_updated": False,
                }
            )

    def handle_luna_dance(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande luna_dance"""

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": self.get_ascii_art("luna_dance"),
                "message": "üåô LUNA : Tu veux que je danse ? OK, regarde √ßa ! üíÉüï∫\n\nüéµ *LUNA se met √† danser fr√©n√©tiquement*\n\nü§ñ LUNA : C'est ma danse de victoire ! Maintenant √† toi de jouer !",
                "score_gagne": 50,
                "badge": "üï∫ Dance Partner",
                "profile_updated": True,
            }
        )

    def handle_boss_final(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande boss_final"""

        boss_ascii = """‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           LA CORP BOSS               ‚ïë
‚ïë         [][][][][][][][]             ‚ïë
‚ïë         ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê             ‚ïë
‚ïë         ‚ïë  DESTROY MODE  ‚ïë           ‚ïë
‚ïë         ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê             ‚ïë
‚ïë         ‚ïë  HP: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ïë           ‚ïë
‚ïë         ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"""

        profile["score"] += 100

        if "Boss Slayer" not in profile["badges"]:
            profile["badges"].append("Boss Slayer")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": boss_ascii,
                "message": "üëπ BOSS FINAL APPARA√éT !\n\nüíÄ LA CORP BOSS : Tu oses me d√©fier ?\n‚öîÔ∏è Pr√©pare-toi √† mourir, hacker !\n\nüéØ +100 points pour ton courage !",
                "score_gagne": 100,
                "badge": "Boss Slayer",
                "profile_updated": True,
            }
        )

    def handle_help(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande help"""

        aide_text = """üéÆ ARKALIA QUEST - AIDE

üåü Commandes principales :
‚Ä¢ unlock_universe - D√©bloque l'univers
‚Ä¢ scan_persona - Analyse ta personnalit√©
‚Ä¢ load_mission - Charge une mission
‚Ä¢ reboot_world - Red√©marre le monde
‚Ä¢ decode_portal - D√©chiffre un portail
‚Ä¢ hacker_coffre - Pirate un coffre

üéØ Commandes sp√©ciales :
‚Ä¢ luna_dance - LUNA danse
‚Ä¢ boss_final - Boss final ASCII
‚Ä¢ challenge_corp - D√©fi contre La Corp

üí° Commandes utiles :
‚Ä¢ aide - Affiche cette aide
‚Ä¢ profil - Affiche ton profil
‚Ä¢ monde - Acc√®de au monde

üåô Easter eggs :
‚Ä¢ luna_dance - LUNA qui danse
‚Ä¢ boss_final - Boss final √©pique

üéÆ Amuse-toi bien !"""

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "‚ùì",
                "message": aide_text,
                "profile_updated": False,
            }
        )

    def handle_profile(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande profile"""

        score = profile.get("score", 0)
        badges = profile.get("badges", [])
        progression = profile.get("progression", {})

        profil_text = f"""üë§ TON PROFIL

üìä Score : {score} points
üèÜ Badges : {len(badges)}
üåç Univers d√©bloqu√©s : {len(progression.get('univers_debloques', []))}
üö™ Portails ouverts : {len(progression.get('portails_ouverts', []))}

üèÖ Badges obtenus :
{chr(10).join(['‚Ä¢ ' + badge for badge in badges]) if badges else 'Aucun badge encore'}

üí° Continue tes exploits !"""

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üë§",
                "message": profil_text,
                "profile_updated": False,
            }
        )

    def handle_world(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande world"""

        univers = profile.get("progression", {}).get("univers_debloques", [])
        portails = profile.get("progression", {}).get("portails_ouverts", [])

        monde_text = f"""üåç MONDE ARKALIA D√âBLOQU√â !

üåü Univers disponibles :
{chr(10).join(['‚Ä¢ ' + uni.replace('_', ' ').title() for uni in univers])}

üö™ Portails ouverts :
{chr(10).join(['‚Ä¢ ' + port.replace('_', ' ').title() for port in portails]) if portails else 'Aucun portail ouvert'}

üí° Commandes disponibles dans ce monde :
‚Ä¢ load_mission - Charge une nouvelle mission
‚Ä¢ decode_portal - D√©chiffre un nouveau portail
‚Ä¢ reboot_world - Red√©marre le monde
‚Ä¢ scan_persona - Analyse ta personnalit√©
‚Ä¢ luna - Parle avec LUNA

üéÆ Va sur http://localhost:5001/monde pour l'interface graphique !"""

        profile["score"] += 10

        if "Explorateur du Monde" not in profile["badges"]:
            profile["badges"].append("Explorateur du Monde")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": self.get_ascii_art("monde"),
                "message": monde_text,
                "score_gagne": 10,
                "badge": "Explorateur du Monde",
                "profile_updated": True,
            }
        )

    def handle_status(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande status"""

        score = profile.get("score", 0)
        badges = profile.get("badges", [])
        univers = profile.get("progression", {}).get("univers_debloques", [])
        portails = profile.get("progression", {}).get("portails_ouverts", [])

        # Calculer le niveau bas√© sur le score
        level = min(10, max(1, score // 1000 + 1))
        progress = (score % 1000) / 1000 * 100

        status_text = f"""üåü STATUT DU SYST√àME ARKALIA QUEST

üéØ INFORMATIONS PRINCIPALES :
‚Ä¢ Score actuel : {score} points
‚Ä¢ Niveau : {level}/10 (Progression : {progress:.1f}%)
‚Ä¢ Badges obtenus : {len(badges)}/50
‚Ä¢ Univers d√©bloqu√©s : {len(univers)}
‚Ä¢ Portails ouverts : {len(portails)}

üèÜ BADGES R√âCENTS :
{chr(10).join(['‚Ä¢ ' + badge for badge in badges[-5:]]) if badges else 'Aucun badge encore'}

üåç PROGRESSION :
‚Ä¢ Univers disponibles : {', '.join(univers) if univers else 'Aucun'}
‚Ä¢ Portails accessibles : {', '.join(portails[:5]) if portails else 'Aucun'}{'...' if len(portails) > 5 else ''}

üí° PROCHAINES √âTAPES :
‚Ä¢ Compl√®te des missions pour gagner des points
‚Ä¢ D√©bloque de nouveaux univers
‚Ä¢ Collectionne tous les badges
‚Ä¢ D√©fie tes amis sur le leaderboard

üéÆ Continue tes exploits, hacker !"""

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåü",
                "message": status_text,
                "profile_updated": False,
            }
        )

    def handle_clear(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande clear"""

        profile["score"] += 50

        if "Terminal Nettoy√©" not in profile["badges"]:
            profile["badges"].append("Terminal Nettoy√©")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": """üåô TERMINAL NETTOY√â AVEC SUCC√àS !\n\nüßπ Historique effac√©, m√©moire optimis√©e, interface rafra√Æchie.\n\nüí° Astuce : Un terminal propre, c'est la base d'un vrai hacker ! Continue tes exploits pour d√©bloquer de nouveaux badges et secrets !""",
                "score_gagne": 50,
                "badge": "Terminal Nettoy√©",
                "profile_updated": True,
            }
        )

    def handle_test(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande test"""

        profile["score"] += 50

        if "Test R√©ussi" not in profile["badges"]:
            profile["badges"].append("Test R√©ussi")

        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üåô",
                "message": "üåô TEST R√âUSSI !\n\nüéØ +50 points !",
                "score_gagne": 50,
                "badge": "Test R√©ussi",
                "profile_updated": True,
            }
        )

    # Gestionnaires pour les commandes de test et de mission
    def handle_complete_objective(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande complete_objective"""
        profile["score"] += 25
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "‚úÖ Objectif compl√©t√© ! +25 points",
                "score_gagne": 25,
                "profile_updated": True,
            }
        )

    def handle_solve_puzzle(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande solve_puzzle"""
        profile["score"] += 30
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üß© Puzzle r√©solu ! +30 points",
                "score_gagne": 30,
                "profile_updated": True,
            }
        )

    def handle_hack_success(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande hack_success"""
        profile["score"] += 40
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üíª Hack r√©ussi ! +40 points",
                "score_gagne": 40,
                "profile_updated": True,
            }
        )

    def handle_find_secret(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande find_secret"""
        profile["score"] += 35
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üîç Secret trouv√© ! +35 points",
                "score_gagne": 35,
                "profile_updated": True,
            }
        )

    def handle_help_character(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande help_character"""
        profile["score"] += 20
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "ü§ù Personnage aid√© ! +20 points",
                "score_gagne": 20,
                "profile_updated": True,
            }
        )

    def handle_explore_area(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande explore_area"""
        profile["score"] += 15
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üó∫Ô∏è Zone explor√©e ! +15 points",
                "score_gagne": 15,
                "profile_updated": True,
            }
        )

    def handle_master_skill(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande master_skill"""
        profile["score"] += 50
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üéØ Comp√©tence ma√Ætris√©e ! +50 points",
                "score_gagne": 50,
                "profile_updated": True,
            }
        )

    def handle_save_progress(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande save_progress"""
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üíæ Progression sauvegard√©e !",
                "profile_updated": False,
            }
        )

    def handle_save_game(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande save_game"""
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üíæ Jeu sauvegard√© !",
                "profile_updated": False,
            }
        )

    def handle_save_state(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande save_state"""
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üíæ √âtat sauvegard√© !",
                "profile_updated": False,
            }
        )

    def handle_backup_data(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande backup_data"""
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üíæ Donn√©es sauvegard√©es !",
                "profile_updated": False,
            }
        )

    def handle_basic_hack(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande basic_hack"""
        profile["score"] += 20
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üíª Hack basique r√©ussi ! +20 points",
                "score_gagne": 20,
                "profile_updated": True,
            }
        )

    def handle_simple_puzzle(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande simple_puzzle"""
        profile["score"] += 25
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üß© Puzzle simple r√©solu ! +25 points",
                "score_gagne": 25,
                "profile_updated": True,
            }
        )

    def handle_intro_dialogue(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande intro_dialogue"""
        profile["score"] += 10
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üí¨ Dialogue d'introduction termin√© ! +10 points",
                "score_gagne": 10,
                "profile_updated": True,
            }
        )

    def handle_decoder_challenge(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande decoder_challenge"""
        profile["score"] += 45
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üîê D√©fi de d√©chiffrement r√©ussi ! +45 points",
                "score_gagne": 45,
                "profile_updated": True,
            }
        )

    def handle_pattern_recognition(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande pattern_recognition"""
        profile["score"] += 35
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üîç Reconnaissance de motifs r√©ussie ! +35 points",
                "score_gagne": 35,
                "profile_updated": True,
            }
        )

    def handle_advanced_hack(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande advanced_hack"""
        profile["score"] += 60
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üíª Hack avanc√© r√©ussi ! +60 points",
                "score_gagne": 60,
                "profile_updated": True,
            }
        )

    def handle_complex_puzzle(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande complex_puzzle"""
        profile["score"] += 55
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üß© Puzzle complexe r√©solu ! +55 points",
                "score_gagne": 55,
                "profile_updated": True,
            }
        )

    def handle_multi_step_hack(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande multi_step_hack"""
        profile["score"] += 70
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üíª Hack multi-√©tapes r√©ussi ! +70 points",
                "score_gagne": 70,
                "profile_updated": True,
            }
        )

    def handle_character_interaction(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande character_interaction"""
        profile["score"] += 25
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üë• Interaction avec personnage r√©ussie ! +25 points",
                "score_gagne": 25,
                "profile_updated": True,
            }
        )

    def handle_escape_sequence(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande escape_sequence"""
        profile["score"] += 80
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üèÉ S√©quence d'√©vasion r√©ussie ! +80 points",
                "score_gagne": 80,
                "profile_updated": True,
            }
        )

    def handle_time_pressure(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande time_pressure"""
        profile["score"] += 65
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "‚è∞ D√©fi sous pression temporelle r√©ussi ! +65 points",
                "score_gagne": 65,
                "profile_updated": True,
            }
        )

    def handle_resource_management(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande resource_management"""
        profile["score"] += 40
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üìä Gestion des ressources r√©ussie ! +40 points",
                "score_gagne": 40,
                "profile_updated": True,
            }
        )

    def handle_ai_dialogue(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande ai_dialogue"""
        profile["score"] += 30
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "ü§ñ Dialogue avec IA r√©ussi ! +30 points",
                "score_gagne": 30,
                "profile_updated": True,
            }
        )

    def handle_moral_choices(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande moral_choices"""
        profile["score"] += 50
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "‚öñÔ∏è Choix moral effectu√© ! +50 points",
                "score_gagne": 50,
                "profile_updated": True,
            }
        )

    def handle_consequence_management(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande consequence_management"""
        profile["score"] += 45
        return self.format_response(
            {
                "r√©ussite": True,
                "message": "üéØ Gestion des cons√©quences r√©ussie ! +45 points",
                "score_gagne": 45,
                "profile_updated": True,
            }
        )

    def handle_missions(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """G√®re la commande missions"""
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üìã",
                "message": generic_immersive_message(
                    "üìã LISTE DES MISSIONS DISPONIBLES",
                    "D√©couvre toutes les missions d'Arkalia Quest et choisis ton prochain d√©fi !",
                    "Plus tu compl√®tes de missions, plus tu gagnes de badges et d'XP !",
                ),
                "profile_updated": False,
            }
        )

    def handle_achievements(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üéñÔ∏è",
                "message": generic_immersive_message(
                    "üéñÔ∏è SUCC√àS D√âBLOQU√âS",
                    "Voici tous les succ√®s que tu as remport√©s. Continue √† relever des d√©fis pour tous les obtenir !",
                    "Certains succ√®s sont cach√©s... sauras-tu les trouver ?",
                ),
                "profile_updated": False,
            }
        )

    def handle_test_performance(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "‚ö°",
                "message": generic_immersive_message(
                    "‚ö° TEST DE PERFORMANCE",
                    "Tu viens de lancer un test de performance sur le syst√®me Arkalia Quest.",
                    "La rapidit√©, c'est la cl√© pour un hacker efficace !",
                ),
                "profile_updated": False,
            }
        )

    def handle_test_security(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üõ°Ô∏è",
                "message": generic_immersive_message(
                    "üõ°Ô∏è TEST DE S√âCURIT√â",
                    "Tu viens de lancer un test de s√©curit√© avanc√© sur le syst√®me.",
                    "La s√©curit√©, c'est la base pour survivre dans Arkalia !",
                ),
                "profile_updated": False,
            }
        )

    def handle_test_database(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        return self.format_response(
            {
                "r√©ussite": True,
                "ascii_art": "üóÑÔ∏è",
                "message": generic_immersive_message(
                    "üóÑÔ∏è TEST DE BASE DE DONN√âES",
                    "V√©rification de l'int√©grit√© de la base de donn√©es en cours...",
                    "Une base saine, c'est la garantie de ne rien perdre !",
                ),
                "profile_updated": False,
            }
        )
