"""
Commandes de progression fonctionnelles pour Arkalia Quest
"""

from typing import Any

from core.progression_engine import progression_engine


class ProgressionCommands:
    """Commandes qui fonctionnent vraiment avec la progression"""

    def __init__(self):
        self.commands = {
            "progression": self.handle_progression,
            "stats": self.handle_stats,
            "achievements": self.handle_achievements,
            "leaderboard": self.handle_leaderboard,
            "daily_challenges": self.handle_daily_challenges,
            "explore_zone": self.handle_explore_zone,
            "play_mini_game": self.handle_play_mini_game,
            "claim_reward": self.handle_claim_reward,
        }

    def handle_progression(self, profile: dict[str, Any]) -> dict[str, Any]:
        """Affiche la progression du joueur"""
        player_id = profile.get("id", "default")
        player = progression_engine.get_player_progression(player_id)

        message = f"""üéØ PROGRESSION DU JOUEUR

üìä STATISTIQUES :
‚Ä¢ Niveau : {player['level']}
‚Ä¢ Score : {player['score']} points
‚Ä¢ XP : {player['xp']} XP
‚Ä¢ Coins : {player['coins']} ü™ô
‚Ä¢ Badges : {len(player['badges'])} üèÜ

üìà ACTIVIT√â :
‚Ä¢ Commandes utilis√©es : {player['stats']['total_commands']}
‚Ä¢ Commandes LUNA : {player['stats']['total_luna_commands']}
‚Ä¢ Zones explor√©es : {player['stats']['total_zones_explored']}
‚Ä¢ Mini-jeux : {player['stats']['total_mini_games']}

üåç ZONES D√âBLOQU√âES :
{chr(10).join([f"‚Ä¢ {zone}" for zone in player['zones_explored']]) if player['zones_explored'] else "‚Ä¢ Aucune zone explor√©e"}

üèÜ BADGES OBTENUS :
{chr(10).join([f"‚Ä¢ {badge}" for badge in player['badges']]) if player['badges'] else "‚Ä¢ Aucun badge obtenu"}

üí° Utilisez 'daily_challenges' pour voir vos d√©fis quotidiens !"""

        return {
            "r√©ussite": True,
            "ascii_art": "üéØ",
            "message": message,
            "score_gagne": 0,
            "profile_updated": False,
        }

    def handle_stats(self, profile: dict[str, Any]) -> dict[str, Any]:
        """Affiche les statistiques d√©taill√©es"""
        player_id = profile.get("id", "default")
        player = progression_engine.get_player_progression(player_id)

        message = f"""üìä STATISTIQUES D√âTAILL√âES

üéÆ ACTIVIT√â G√âN√âRALE :
‚Ä¢ Total commandes : {player['stats']['total_commands']}
‚Ä¢ Commandes LUNA : {player['stats']['total_luna_commands']}
‚Ä¢ Zones explor√©es : {player['stats']['total_zones_explored']}
‚Ä¢ Mini-jeux compl√©t√©s : {player['stats']['total_mini_games']}

üí∞ RESSOURCES :
‚Ä¢ Score total : {player['score']} points
‚Ä¢ XP actuel : {player['xp']} XP
‚Ä¢ Coins : {player['coins']} ü™ô
‚Ä¢ Niveau : {player['level']}

üèÜ ACHIEVEMENTS :
‚Ä¢ Badges obtenus : {len(player['badges'])}
‚Ä¢ Achievements d√©bloqu√©s : {len(player['achievements_unlocked'])}

üìÖ DERNI√àRE ACTIVIT√â :
‚Ä¢ {player['last_activity']}"""

        return {
            "r√©ussite": True,
            "ascii_art": "üìä",
            "message": message,
            "score_gagne": 0,
            "profile_updated": False,
        }

    def handle_achievements(self, profile: dict[str, Any]) -> dict[str, Any]:
        """Affiche les achievements"""
        player_id = profile.get("id", "default")
        achievements = progression_engine.get_achievements(player_id)

        message = "üèÜ ACHIEVEMENTS\n\n"

        for achievement in achievements:
            status = "‚úÖ" if achievement["unlocked"] else "üîí"
            message += (
                f"{status} {achievement['name']}\n   {achievement['description']}\n\n"
            )

        message += "üí° Continuez √† jouer pour d√©bloquer plus d'achievements !"

        return {
            "r√©ussite": True,
            "ascii_art": "üèÜ",
            "message": message,
            "score_gagne": 0,
            "profile_updated": False,
        }

    def handle_leaderboard(self, profile: dict[str, Any]) -> dict[str, Any]:
        """Affiche le classement"""
        leaderboard = progression_engine.get_leaderboard(10)

        message = "üèÜ CLASSEMENT GLOBAL\n\n"

        for i, player in enumerate(leaderboard, 1):
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üèÖ"
            message += f"{emoji} #{i} {player.get('name', 'Joueur')} - {player['score']} points (Niveau {player['level']})\n"

        if not leaderboard:
            message += "Aucun joueur dans le classement pour le moment."

        return {
            "r√©ussite": True,
            "ascii_art": "üèÜ",
            "message": message,
            "score_gagne": 0,
            "profile_updated": False,
        }

    def handle_daily_challenges(self, profile: dict[str, Any]) -> dict[str, Any]:
        """Affiche les d√©fis quotidiens"""
        player_id = profile.get("id", "default")
        challenges = progression_engine.get_daily_challenges(player_id)

        message = "üéØ D√âFIS QUOTIDIENS\n\n"

        for _challenge_id, challenge in challenges.items():
            status = "‚úÖ" if challenge["completed"] else "‚è≥"
            progress_bar = "‚ñà" * (
                challenge["progress"] * 10 // challenge["target"]
            ) + "‚ñë" * (10 - (challenge["progress"] * 10 // challenge["target"]))

            message += f"{status} {challenge['name']}\n"
            message += f"   {challenge['description']}\n"
            message += f"   Progression: [{progress_bar}] {challenge['progress']}/{challenge['target']}\n"
            message += f"   R√©compense: {challenge['reward']['xp']} XP + {challenge['reward']['coins']} ü™ô + {challenge['reward']['badge']}\n\n"

        message += "üí° Continuez √† jouer pour compl√©ter vos d√©fis !"

        return {
            "r√©ussite": True,
            "ascii_art": "üéØ",
            "message": message,
            "score_gagne": 0,
            "profile_updated": False,
        }

    def handle_explore_zone(self, profile: dict[str, Any]) -> dict[str, Any]:
        """Explore une zone"""
        player_id = profile.get("id", "default")
        player = progression_engine.get_player_progression(player_id)

        # Zones disponibles selon le niveau
        available_zones = ["arkalia_base"]
        if player["level"] >= 2:
            available_zones.append("arkalia_forest")
        if player["level"] >= 3:
            available_zones.append("arkalia_city")
        if player["level"] >= 5:
            available_zones.append("arkalia_lab")

        # Trouver une zone non explor√©e
        unexplored_zones = [
            zone for zone in available_zones if zone not in player["zones_explored"]
        ]

        if not unexplored_zones:
            message = "üåç EXPLORATION\n\nToutes les zones disponibles ont √©t√© explor√©es !\n\nMontez de niveau pour d√©bloquer de nouvelles zones."
            return {
                "r√©ussite": True,
                "ascii_art": "üåç",
                "message": message,
                "score_gagne": 0,
                "profile_updated": False,
            }

        # Explorer la premi√®re zone disponible
        zone = unexplored_zones[0]
        progression_engine.update_player_progression(
            player_id, "zone_explored", {"zone": zone}
        )

        zone_descriptions = {
            "arkalia_base": "Base d'Arkalia - Votre point de d√©part dans cette aventure cyberpunk",
            "arkalia_forest": "For√™t d'Arkalia - Une zone myst√©rieuse pleine de secrets",
            "arkalia_city": "Ville d'Arkalia - Le c≈ìur urbain de cette dimension",
            "arkalia_lab": "Laboratoire d'Arkalia - O√π la science rencontre la magie",
        }

        message = f"""üåç EXPLORATION R√âUSSIE !

Vous avez explor√© : {zone.upper()}
{zone_descriptions.get(zone, 'Une nouvelle zone myst√©rieuse')}

üéâ +50 XP pour cette exploration !
üèÜ Zone ajout√©e √† votre collection !

Utilisez 'progression' pour voir vos zones explor√©es."""

        return {
            "r√©ussite": True,
            "ascii_art": "üåç",
            "message": message,
            "score_gagne": 50,
            "profile_updated": True,
        }

    def handle_play_mini_game(self, profile: dict[str, Any]) -> dict[str, Any]:
        """Joue √† un mini-jeu"""
        player_id = profile.get("id", "default")

        # Simuler un mini-jeu simple
        mini_games = [
            "Code Breaker",
            "Memory Matrix",
            "Logic Puzzle",
            "Pattern Recognition",
        ]

        import random

        game = random.choice(mini_games)

        # Simuler la r√©ussite (90% de chance)
        if random.random() < 0.9:
            progression_engine.update_player_progression(
                player_id,
                "mini_game_completed",
                {"game": game},
            )

            message = f"""üéÆ MINI-JEU TERMIN√â !

Jeu : {game}
R√©sultat : VICTOIRE ! üéâ

üéâ +100 XP pour cette victoire !
üèÜ Mini-jeu ajout√© √† votre collection !

Utilisez 'progression' pour voir vos statistiques."""

            return {
                "r√©ussite": True,
                "ascii_art": "üéÆ",
                "message": message,
                "score_gagne": 100,
                "profile_updated": True,
            }
        message = f"""üéÆ MINI-JEU √âCHOU√â !

Jeu : {game}
R√©sultat : √âCHEC ! üòî

üí° R√©essayez ! La pratique rend parfait !

Utilisez 'play_mini_game' pour r√©essayer."""

        return {
            "r√©ussite": False,
            "ascii_art": "üéÆ",
            "message": message,
            "score_gagne": 0,
            "profile_updated": False,
        }

    def handle_claim_reward(self, profile: dict[str, Any]) -> dict[str, Any]:
        """R√©cup√®re les r√©compenses des d√©fis compl√©t√©s"""
        player_id = profile.get("id", "default")
        player = progression_engine.get_player_progression(player_id)

        # V√©rifier les d√©fis compl√©t√©s non r√©clam√©s
        challenges = progression_engine.get_daily_challenges(player_id)
        rewards_claimed = 0

        for challenge_id, challenge in challenges.items():
            if challenge["completed"] and not challenge["reward_claimed"]:
                # Marquer comme r√©clam√©
                player["daily_challenges_progress"][challenge_id][
                    "reward_claimed"
                ] = True
                rewards_claimed += 1

        if rewards_claimed > 0:
            message = f"""üéÅ R√âCOMPENSES R√âCLAM√âES !

Vous avez r√©clam√© {rewards_claimed} r√©compense(s) !

üéâ F√©licitations pour avoir compl√©t√© vos d√©fis !
üí° Continuez √† jouer pour plus de r√©compenses !"""

            return {
                "r√©ussite": True,
                "ascii_art": "üéÅ",
                "message": message,
                "score_gagne": 0,
                "profile_updated": True,
            }
        message = """üéÅ R√âCOMPENSES

Aucune r√©compense √† r√©clamer pour le moment.

üí° Compl√©tez vos d√©fis quotidiens pour d√©bloquer des r√©compenses !
Utilisez 'daily_challenges' pour voir vos d√©fis."""

        return {
            "r√©ussite": True,
            "ascii_art": "üéÅ",
            "message": message,
            "score_gagne": 0,
            "profile_updated": False,
        }
