#!/usr/bin/env python3
"""
Script de test avanc√© pour Arkalia Quest
Teste les fonctionnalit√©s sp√©cifiques du jeu selon le plan de test utilisateur
"""

import json
import os
import re
import sys
import time
from datetime import datetime

import requests

# Ajouter le r√©pertoire racine au path
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.insert(0, project_root)

from utils.logger import GameLogger

# Initialiser le logger
game_logger = GameLogger()


class ArkaliaQuestAdvancedTester:
    """Testeur avanc√© pour les fonctionnalit√©s sp√©cifiques d'Arkalia Quest"""

    def __init__(self, base_url: str = "https://arkalia-quest.onrender.com"):
        self.base_url = base_url
        self.session = requests.Session()
        self.test_results = []
        self.start_time = datetime.now()

        # Configuration des tests
        self.timeout = 10

    def log_test(
        self, test_name: str, status: str, details: str = "", duration: float = 0
    ):
        """Enregistre un r√©sultat de test"""
        result = {
            "test": test_name,
            "status": status,
            "details": details,
            "duration": duration,
            "timestamp": datetime.now().isoformat(),
        }
        self.test_results.append(result)

        status_emoji = "‚úÖ" if status == "PASS" else "‚ùå" if status == "FAIL" else "‚è≠Ô∏è"
        game_logger.info(f"{status_emoji} {test_name}: {status}")
        if details:
            game_logger.info(f"   üìù {details}")
        if duration > 0:
            game_logger.info(f"   ‚è±Ô∏è {duration:.2f}s")
        print()

    def test_design_matrix_colors(self) -> bool:
        """Test la pr√©sence des couleurs Matrix (#00ff00)"""
        start_time = time.time()
        try:
            response = self.session.get(f"{self.base_url}/", timeout=self.timeout)
            duration = time.time() - start_time

            if response.status_code == 200:
                content = response.text
                # Rechercher les couleurs Matrix
                matrix_colors = re.findall(
                    r"#00ff00|#0f0|rgb\(0,\s*255,\s*0\)",
                    content,
                    re.IGNORECASE,
                )

                if matrix_colors:
                    self.log_test(
                        "Design Matrix (#00ff00)",
                        "PASS",
                        f"Couleurs Matrix trouv√©es: {len(matrix_colors)}",
                        duration,
                    )
                    return True
                self.log_test(
                    "Design Matrix (#00ff00)",
                    "FAIL",
                    "Aucune couleur Matrix (#00ff00) trouv√©e",
                    duration,
                )
                return False
            self.log_test(
                "Design Matrix (#00ff00)",
                "FAIL",
                f"Page inaccessible: {response.status_code}",
                duration,
            )
            return False
        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.log_test("Design Matrix (#00ff00)", "FAIL", f"Erreur: {e!s}", duration)
            return False

    def test_tutorial_functionality(self) -> bool:
        """Test les fonctionnalit√©s du tutoriel"""
        start_time = time.time()
        try:
            response = self.session.get(
                f"{self.base_url}/tutorial", timeout=self.timeout
            )
            duration = time.time() - start_time

            if response.status_code == 200:
                content = response.text

                # V√©rifier les √©l√©ments du tutoriel
                tutorial_elements = [
                    "tutoriel" in content.lower(),
                    "√©tape" in content.lower() or "step" in content.lower(),
                    "suivant" in content.lower() or "next" in content.lower(),
                    "progression" in content.lower(),
                ]

                elements_found = sum(tutorial_elements)

                if elements_found >= 2:
                    self.log_test(
                        "Fonctionnalit√©s Tutoriel",
                        "PASS",
                        f"√âl√©ments tutoriel trouv√©s: {elements_found}/4",
                        duration,
                    )
                    return True
                self.log_test(
                    "Fonctionnalit√©s Tutoriel",
                    "FAIL",
                    f"Peu d'√©l√©ments tutoriel: {elements_found}/4",
                    duration,
                )
                return False
            self.log_test(
                "Fonctionnalit√©s Tutoriel",
                "FAIL",
                f"Page tutoriel inaccessible: {response.status_code}",
                duration,
            )
            return False
        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.log_test(
                "Fonctionnalit√©s Tutoriel", "FAIL", f"Erreur: {e!s}", duration
            )
            return False

    def test_terminal_commands(self) -> bool:
        """Test les commandes du terminal"""
        start_time = time.time()
        try:
            response = self.session.get(
                f"{self.base_url}/terminal", timeout=self.timeout
            )
            duration = time.time() - start_time

            if response.status_code == 200:
                content = response.text

                # V√©rifier les √©l√©ments du terminal
                terminal_elements = [
                    "terminal" in content.lower(),
                    "commande" in content.lower() or "command" in content.lower(),
                    "input" in content.lower() or "textarea" in content.lower(),
                    "help" in content.lower() or "aide" in content.lower(),
                ]

                elements_found = sum(terminal_elements)

                if elements_found >= 3:
                    self.log_test(
                        "Fonctionnalit√©s Terminal",
                        "PASS",
                        f"√âl√©ments terminal trouv√©s: {elements_found}/4",
                        duration,
                    )
                    return True
                self.log_test(
                    "Fonctionnalit√©s Terminal",
                    "FAIL",
                    f"√âl√©ments terminal manquants: {elements_found}/4",
                    duration,
                )
                return False
            self.log_test(
                "Fonctionnalit√©s Terminal",
                "FAIL",
                f"Page terminal inaccessible: {response.status_code}",
                duration,
            )
            return False
        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.log_test(
                "Fonctionnalit√©s Terminal", "FAIL", f"Erreur: {e!s}", duration
            )
            return False

    def test_world_progression(self) -> bool:
        """Test la progression dans le monde"""
        start_time = time.time()
        try:
            response = self.session.get(f"{self.base_url}/monde", timeout=self.timeout)
            duration = time.time() - start_time

            if response.status_code == 200:
                content = response.text

                # V√©rifier les √©l√©ments de progression
                progression_elements = [
                    "monde" in content.lower() or "world" in content.lower(),
                    "progression" in content.lower() or "progress" in content.lower(),
                    "barre" in content.lower() or "bar" in content.lower(),
                    "pourcentage" in content.lower() or "%" in content,
                ]

                elements_found = sum(progression_elements)

                if elements_found >= 2:
                    self.log_test(
                        "Progression Monde",
                        "PASS",
                        f"√âl√©ments progression trouv√©s: {elements_found}/4",
                        duration,
                    )
                    return True
                self.log_test(
                    "Progression Monde",
                    "FAIL",
                    f"√âl√©ments progression manquants: {elements_found}/4",
                    duration,
                )
                return False
            self.log_test(
                "Progression Monde",
                "FAIL",
                f"Page monde inaccessible: {response.status_code}",
                duration,
            )
            return False
        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.log_test("Progression Monde", "FAIL", f"Erreur: {e!s}", duration)
            return False

    def test_dashboard_na_values(self) -> bool:
        """Test les valeurs N/A dans le dashboard"""
        start_time = time.time()
        try:
            response = self.session.get(
                f"{self.base_url}/dashboard", timeout=self.timeout
            )
            duration = time.time() - start_time

            if response.status_code == 200:
                content = response.text

                # V√©rifier la pr√©sence de valeurs N/A
                na_values = [
                    "N/A" in content,
                    "n/a" in content.lower(),
                    "non disponible" in content.lower(),
                    "pas de donn√©es" in content.lower(),
                ]

                na_found = any(na_values)

                if na_found:
                    self.log_test(
                        "Valeurs N/A Dashboard",
                        "PASS",
                        "Valeurs N/A pr√©sentes dans le dashboard",
                        duration,
                    )
                    return True
                self.log_test(
                    "Valeurs N/A Dashboard",
                    "FAIL",
                    "Valeurs N/A manquantes dans le dashboard",
                    duration,
                )
                return False
            self.log_test(
                "Valeurs N/A Dashboard",
                "FAIL",
                f"Page dashboard inaccessible: {response.status_code}",
                duration,
            )
            return False
        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.log_test("Valeurs N/A Dashboard", "FAIL", f"Erreur: {e!s}", duration)
            return False

    def test_audio_functionality(self) -> bool:
        """Test les fonctionnalit√©s audio"""
        start_time = time.time()
        try:
            response = self.session.get(f"{self.base_url}/", timeout=self.timeout)
            duration = time.time() - start_time

            if response.status_code == 200:
                content = response.text

                # V√©rifier les √©l√©ments audio
                audio_elements = [
                    "audio" in content.lower(),
                    "sound" in content.lower() or "son" in content.lower(),
                    "volume" in content.lower(),
                    "test audio" in content.lower() or "test_audio" in content.lower(),
                ]

                elements_found = sum(audio_elements)

                if elements_found >= 2:
                    self.log_test(
                        "Fonctionnalit√©s Audio",
                        "PASS",
                        f"√âl√©ments audio trouv√©s: {elements_found}/4",
                        duration,
                    )
                    return True
                self.log_test(
                    "Fonctionnalit√©s Audio",
                    "FAIL",
                    f"√âl√©ments audio manquants: {elements_found}/4",
                    duration,
                )
                return False
            self.log_test(
                "Fonctionnalit√©s Audio",
                "FAIL",
                f"Page inaccessible: {response.status_code}",
                duration,
            )
            return False
        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.log_test("Fonctionnalit√©s Audio", "FAIL", f"Erreur: {e!s}", duration)
            return False

    def test_accessibility_features(self) -> bool:
        """Test les fonctionnalit√©s d'accessibilit√©"""
        start_time = time.time()
        try:
            response = self.session.get(f"{self.base_url}/", timeout=self.timeout)
            duration = time.time() - start_time

            if response.status_code == 200:
                content = response.text

                # V√©rifier les fonctionnalit√©s d'accessibilit√©
                accessibility_features = [
                    "skip-link" in content,
                    "aria-" in content,
                    "role=" in content,
                    "alt=" in content,
                    "accessibility" in content.lower()
                    or "accessibilit√©" in content.lower(),
                ]

                features_found = sum(accessibility_features)

                if features_found >= 3:
                    self.log_test(
                        "Fonctionnalit√©s Accessibilit√©",
                        "PASS",
                        f"Fonctionnalit√©s accessibilit√© trouv√©es: {features_found}/5",
                        duration,
                    )
                    return True
                self.log_test(
                    "Fonctionnalit√©s Accessibilit√©",
                    "FAIL",
                    f"Fonctionnalit√©s accessibilit√© manquantes: {features_found}/5",
                    duration,
                )
                return False
            self.log_test(
                "Fonctionnalit√©s Accessibilit√©",
                "FAIL",
                f"Page inaccessible: {response.status_code}",
                duration,
            )
            return False
        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.log_test(
                "Fonctionnalit√©s Accessibilit√©", "FAIL", f"Erreur: {e!s}", duration
            )
            return False

    def test_responsive_breakpoints(self) -> bool:
        """Test les breakpoints responsive"""
        start_time = time.time()
        try:
            response = self.session.get(f"{self.base_url}/", timeout=self.timeout)
            duration = time.time() - start_time

            if response.status_code == 200:
                content = response.text

                # V√©rifier les breakpoints responsive
                breakpoints = [
                    "320px" in content,
                    "375px" in content,
                    "768px" in content,
                    "1024px" in content,
                    "1440px" in content,
                    "@media" in content,
                ]

                breakpoints_found = sum(breakpoints)

                if breakpoints_found >= 2:
                    self.log_test(
                        "Breakpoints Responsive",
                        "PASS",
                        f"Breakpoints trouv√©s: {breakpoints_found}/6",
                        duration,
                    )
                    return True
                self.log_test(
                    "Breakpoints Responsive",
                    "FAIL",
                    f"Breakpoints manquants: {breakpoints_found}/6",
                    duration,
                )
                return False
            self.log_test(
                "Breakpoints Responsive",
                "FAIL",
                f"Page inaccessible: {response.status_code}",
                duration,
            )
            return False
        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.log_test("Breakpoints Responsive", "FAIL", f"Erreur: {e!s}", duration)
            return False

    def test_luna_ai_features(self) -> bool:
        """Test les fonctionnalit√©s de l'IA LUNA"""
        start_time = time.time()
        try:
            response = self.session.get(f"{self.base_url}/", timeout=self.timeout)
            duration = time.time() - start_time

            if response.status_code == 200:
                content = response.text

                # V√©rifier les fonctionnalit√©s LUNA
                luna_features = [
                    "luna" in content.lower(),
                    "ia" in content.lower() or "ai" in content.lower(),
                    "√©motion" in content.lower() or "emotion" in content.lower(),
                    "assistant" in content.lower(),
                ]

                features_found = sum(luna_features)

                if features_found >= 2:
                    self.log_test(
                        "Fonctionnalit√©s LUNA IA",
                        "PASS",
                        f"Fonctionnalit√©s LUNA trouv√©es: {features_found}/4",
                        duration,
                    )
                    return True
                self.log_test(
                    "Fonctionnalit√©s LUNA IA",
                    "FAIL",
                    f"Fonctionnalit√©s LUNA manquantes: {features_found}/4",
                    duration,
                )
                return False
            self.log_test(
                "Fonctionnalit√©s LUNA IA",
                "FAIL",
                f"Page inaccessible: {response.status_code}",
                duration,
            )
            return False
        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.log_test("Fonctionnalit√©s LUNA IA", "FAIL", f"Erreur: {e!s}", duration)
            return False

    def run_advanced_test_suite(self):
        """Ex√©cute la suite de tests avanc√©s"""
        game_logger.info(r"üåå ARKALIA QUEST - TESTS AVANC√âS FONCTIONNALIT√âS")
        print("=" * 60)
        game_logger.info(f"üéØ URL de test: {self.base_url}")
        print(f"‚è∞ D√©but des tests: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print()

        # Tests des fonctionnalit√©s sp√©cifiques
        game_logger.info(r"üé® 1. TESTS DESIGN ET COULEURS")
        print("-" * 40)
        self.test_design_matrix_colors()

        game_logger.info(r"üéØ 2. TESTS TUTORIEL")
        print("-" * 40)
        self.test_tutorial_functionality()

        game_logger.info(r"‚å®Ô∏è 3. TESTS TERMINAL")
        print("-" * 40)
        self.test_terminal_commands()

        game_logger.info(r"üåç 4. TESTS MONDE ET PROGRESSION")
        print("-" * 40)
        self.test_world_progression()

        game_logger.info(r"üìä 5. TESTS DASHBOARD")
        print("-" * 40)
        self.test_dashboard_na_values()

        game_logger.info(r"üîä 6. TESTS AUDIO")
        print("-" * 40)
        self.test_audio_functionality()

        game_logger.info(r"‚ôø 7. TESTS ACCESSIBILIT√â")
        print("-" * 40)
        self.test_accessibility_features()

        game_logger.info(r"üì± 8. TESTS RESPONSIVE")
        print("-" * 40)
        self.test_responsive_breakpoints()

        game_logger.info(r"ü§ñ 9. TESTS IA LUNA")
        print("-" * 40)
        self.test_luna_ai_features()

        # G√©n√©ration du rapport final
        self.generate_final_report()

    def generate_final_report(self):
        """G√©n√®re le rapport final des tests"""
        end_time = datetime.now()
        total_duration = (end_time - self.start_time).total_seconds()

        # Statistiques
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r["status"] == "PASS"])
        failed_tests = len([r for r in self.test_results if r["status"] == "FAIL"])
        skipped_tests = len([r for r in self.test_results if r["status"] == "SKIP"])

        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0

        print("=" * 60)
        game_logger.info(r"üìä RAPPORT FINAL DES TESTS AVANC√âS")
        print("=" * 60)
        game_logger.info(f"‚è∞ Dur√©e totale: {total_duration:.2f}s")
        game_logger.info(f"üß™ Tests ex√©cut√©s: {total_tests}")
        game_logger.info(f"‚úÖ Tests r√©ussis: {passed_tests}")
        game_logger.info(f"‚ùå Tests √©chou√©s: {failed_tests}")
        game_logger.info(f"‚è≠Ô∏è Tests ignor√©s: {skipped_tests}")
        game_logger.info(f"üìà Taux de r√©ussite: {success_rate:.1f}%")
        print()

        # Tests √©chou√©s
        if failed_tests > 0:
            game_logger.info(r"‚ùå TESTS √âCHOU√âS:")
            print("-" * 30)
            for result in self.test_results:
                if result["status"] == "FAIL":
                    print(f"‚Ä¢ {result['test']}: {result['details']}")
            print()

        # Recommandations sp√©cifiques
        game_logger.info(r"üí° RECOMMANDATIONS SP√âCIFIQUES:")
        print("-" * 30)

        # Analyser les r√©sultats par cat√©gorie
        categories = {
            "Design": [r for r in self.test_results if "Design" in r["test"]],
            "Tutoriel": [r for r in self.test_results if "Tutoriel" in r["test"]],
            "Terminal": [r for r in self.test_results if "Terminal" in r["test"]],
            "Monde": [r for r in self.test_results if "Monde" in r["test"]],
            "Dashboard": [r for r in self.test_results if "Dashboard" in r["test"]],
            "Audio": [r for r in self.test_results if "Audio" in r["test"]],
            "Accessibilit√©": [
                r for r in self.test_results if "Accessibilit√©" in r["test"]
            ],
            "Responsive": [r for r in self.test_results if "Responsive" in r["test"]],
            "LUNA": [r for r in self.test_results if "LUNA" in r["test"]],
        }

        for category, tests in categories.items():
            if tests:
                passed = len([t for t in tests if t["status"] == "PASS"])
                total = len(tests)
                rate = (passed / total * 100) if total > 0 else 0

                if rate >= 80:
                    game_logger.info(f"‚úÖ {category}: Excellent ({rate:.0f}%)")
                elif rate >= 60:
                    game_logger.info(f"‚ö†Ô∏è {category}: √Ä am√©liorer ({rate:.0f}%)")
                else:
                    game_logger.info(f"‚ùå {category}: Probl√®mes majeurs ({rate:.0f}%)")

        # Sauvegarde du rapport
        report_file = (
            f"advanced_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        )
        with open(report_file, "w", encoding="utf-8") as f:
            json.dump(
                {
                    "summary": {
                        "total_tests": total_tests,
                        "passed_tests": passed_tests,
                        "failed_tests": failed_tests,
                        "skipped_tests": skipped_tests,
                        "success_rate": success_rate,
                        "total_duration": total_duration,
                        "start_time": self.start_time.isoformat(),
                        "end_time": end_time.isoformat(),
                    },
                    "results": self.test_results,
                    "categories": {k: len(v) for k, v in categories.items()},
                },
                f,
                indent=2,
                ensure_ascii=False,
            )

        game_logger.info(f"üìÑ Rapport d√©taill√© sauvegard√©: {report_file}")


def main():
    """Fonction principale"""
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    else:
        base_url = "https://arkalia-quest.onrender.com"

    game_logger.info(f"üöÄ D√©marrage des tests avanc√©s Arkalia Quest sur {base_url}")
    print()

    tester = ArkaliaQuestAdvancedTester(base_url)
    tester.run_advanced_test_suite()


if __name__ == "__main__":
    main()
