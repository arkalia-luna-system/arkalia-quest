#!/usr/bin/env python3
"""
Script de diagnostic des actions GitHub Actions
Identifie et corrige les probl√®mes courants
"""

import os
import sys


class GitHubActionsDiagnostic:
    """Diagnostic des actions GitHub Actions"""

    def __init__(self):
        self.issues = []
        self.fixes = []

    def check_workflow_files(self):
        """V√©rifie les fichiers de workflow"""
        print("üîç V√©rification des fichiers de workflow...")

        workflows_dir = ".github/workflows"
        if not os.path.exists(workflows_dir):
            self.issues.append("‚ùå R√©pertoire .github/workflows manquant")
            return

        workflow_files = [f for f in os.listdir(workflows_dir) if f.endswith(".yml")]
        print(f"‚úÖ {len(workflow_files)} fichiers de workflow trouv√©s")

        for workflow in workflow_files:
            print(f"   üìã {workflow}")

    def check_permissions_config(self):
        """V√©rifie la configuration des permissions"""
        print("\nüîê V√©rification des permissions...")

        # V√©rifier deploy.yml
        deploy_yml = ".github/workflows/deploy.yml"
        if os.path.exists(deploy_yml):
            with open(deploy_yml) as f:
                content = f.read()

            if "permissions:" in content:
                print("‚úÖ Permissions configur√©es dans deploy.yml")
            else:
                self.issues.append("‚ùå Permissions manquantes dans deploy.yml")

            if "contents: write" in content:
                print("‚úÖ Permission contents:write configur√©e")
            else:
                self.issues.append("‚ùå Permission contents:write manquante")

            if "packages: write" in content:
                print("‚úÖ Permission packages:write configur√©e")
            else:
                self.issues.append("‚ùå Permission packages:write manquante")
        else:
            self.issues.append("‚ùå Fichier deploy.yml manquant")

    def check_git_config(self):
        """V√©rifie la configuration Git dans les workflows"""
        print("\nüè∑Ô∏è V√©rification de la configuration Git...")

        deploy_yml = ".github/workflows/deploy.yml"
        if os.path.exists(deploy_yml):
            with open(deploy_yml) as f:
                content = f.read()

            if "github-actions[bot]@users.noreply.github.com" in content:
                print("‚úÖ Email Git correctement configur√©")
            else:
                self.issues.append("‚ùå Email Git incorrect dans deploy.yml")

            if "github-actions[bot]" in content:
                print("‚úÖ Nom Git correctement configur√©")
            else:
                self.issues.append("‚ùå Nom Git incorrect dans deploy.yml")

    def check_secrets(self):
        """V√©rifie la configuration des secrets"""
        print("\nüîê V√©rification des secrets...")

        deploy_yml = ".github/workflows/deploy.yml"
        if os.path.exists(deploy_yml):
            with open(deploy_yml) as f:
                content = f.read()

            if "DOCKER_USERNAME" in content:
                print("‚úÖ Secret DOCKER_USERNAME r√©f√©renc√©")
            else:
                self.issues.append("‚ùå Secret DOCKER_USERNAME manquant")

            if "DOCKER_PASSWORD" in content:
                print("‚úÖ Secret DOCKER_PASSWORD r√©f√©renc√©")
            else:
                self.issues.append("‚ùå Secret DOCKER_PASSWORD manquant")

            if "GITHUB_TOKEN" in content:
                print("‚úÖ GITHUB_TOKEN configur√©")
            else:
                self.issues.append("‚ùå GITHUB_TOKEN manquant")

    def check_docker_config(self):
        """V√©rifie la configuration Docker"""
        print("\nüê≥ V√©rification de la configuration Docker...")

        dockerfile = "config/Dockerfile"
        if os.path.exists(dockerfile):
            print("‚úÖ Dockerfile trouv√©")
        else:
            self.issues.append("‚ùå Dockerfile manquant")

        deploy_yml = ".github/workflows/deploy.yml"
        if os.path.exists(deploy_yml):
            with open(deploy_yml) as f:
                content = f.read()

            if "docker build" in content:
                print("‚úÖ Commande docker build configur√©e")
            else:
                self.issues.append("‚ùå Commande docker build manquante")

    def check_workflow_triggers(self):
        """V√©rifie les d√©clencheurs des workflows"""
        print("\nüöÄ V√©rification des d√©clencheurs...")

        deploy_yml = ".github/workflows/deploy.yml"
        if os.path.exists(deploy_yml):
            with open(deploy_yml) as f:
                content = f.read()

            if "branches: [main]" in content:
                print("‚úÖ D√©clencheur sur main configur√©")
            else:
                self.issues.append("‚ùå D√©clencheur sur main manquant")

            if "workflow_dispatch:" in content:
                print("‚úÖ D√©clenchement manuel configur√©")
            else:
                self.issues.append("‚ùå D√©clenchement manuel manquant")

    def generate_report(self):
        """G√©n√®re un rapport de diagnostic"""
        print("\n" + "=" * 60)
        print("üìä RAPPORT DE DIAGNOSTIC GITHUB ACTIONS")
        print("=" * 60)

        if not self.issues:
            print("üéâ AUCUN PROBL√àME D√âTECT√â !")
            print("‚úÖ Toutes les actions GitHub sont correctement configur√©es")
        else:
            print(f"‚ùå {len(self.issues)} PROBL√àME(S) D√âTECT√â(S):")
            for issue in self.issues:
                print(f"   ‚Ä¢ {issue}")

        print("\nüîß CORRECTIONS APPLIQU√âES:")
        if self.fixes:
            for fix in self.fixes:
                print(f"   ‚úÖ {fix}")
        else:
            print("   Aucune correction n√©cessaire")

        return len(self.issues) == 0

    def run_full_diagnostic(self):
        """Lance le diagnostic complet"""
        print("üöÄ D√âMARRAGE DU DIAGNOSTIC GITHUB ACTIONS")
        print("=" * 60)

        self.check_workflow_files()
        self.check_permissions_config()
        self.check_git_config()
        self.check_secrets()
        self.check_docker_config()
        self.check_workflow_triggers()

        return self.generate_report()


def main():
    """Fonction principale"""
    diagnostic = GitHubActionsDiagnostic()

    try:
        success = diagnostic.run_full_diagnostic()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Diagnostic interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Erreur lors du diagnostic: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
