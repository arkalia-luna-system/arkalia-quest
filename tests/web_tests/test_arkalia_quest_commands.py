#!/usr/bin/env python3
"""
Script de test des commandes et missions d'Arkalia Quest
Teste sp√©cifiquement les commandes du terminal et les missions du jeu
"""

import json
import sys
import time
from datetime import datetime, timezone
from pathlib import Path

import requests

# Constantes
EXCELLENT_RATE = 80
GOOD_RATE = 60
MEDIUM_RATE = 50
EXCELLENT_SUMMARY_RATE = 90
GOOD_SUMMARY_RATE = 75


class ArkaliaQuestCommandsTester:
    """Testeur des commandes et missions d'Arkalia Quest"""

    def __init__(self, base_url: str = "https://arkalia-quest.onrender.com"):
        self.base_url = base_url
        self.session = requests.Session()
        self.test_results = []
        self.start_time = datetime.now()

        # Configuration des tests
        self.timeout = 10

        # Commandes √† tester
        self.basic_commands = [
            "help",
            "aide",
            "commands",
            "liste",
            "menu",
            "profil",
            "profile",
            "status",
            "clear",
            "cls",
        ]

        self.tutorial_commands = ["start_tutorial", "tutorial", "tuto"]

        self.game_commands = ["games", "play_game", "game_stats", "daily_challenges"]

        self.story_commands = [
            "prologue",
            "acte_1",
            "acte_2",
            "acte_3",
            "acte_4",
            "acte_5",
            "acte_6",
            "epilogue",
        ]

        self.action_commands = [
            "hack_system",
            "kill_virus",
            "find_shadow",
            "challenge_corp",
            "decode_portal",
            "hacker_coffre",
            "boss_final",
        ]

        self.luna_commands = [
            "luna_contact",
            "luna_emotion",
            "luna_help",
            "luna_status",
        ]

        self.navigation_commands = ["monde", "world", "explorer", "naviguer"]

    def log_test(
        self, test_name: str, status: str, details: str = "", duration: float = 0
    ):
        """Enregistre un r√©sultat de test"""
        result = {
            "test": test_name,
            "status": status,
            "details": details,
            "duration": duration,
            "timestamp": datetime.now().isoformat(),
        }
        self.test_results.append(result)

        # status_emoji = "‚úÖ" if status == "PASS" else "‚ùå" if status == "FAIL" else "‚è≠Ô∏è"
        # game_logger.info(f"{status_emoji} {test_name}: {status}")
        if details:
            game_logger.info(f"   üìù {details}")
        if duration > 0:
            game_logger.info(f"   ‚è±Ô∏è {duration:.2f}s")
        # print()

    def test_command_availability(self, command: str) -> bool:
        """Test la disponibilit√© d'une commande"""
        start_time = time.time()
        try:
            # Tester l'acc√®s √† la page terminal
            response = self.session.get(
                f"{self.base_url}/terminal", timeout=self.timeout
            )
            duration = time.time() - start_time

            if response.status_code == 200:
                content = response.text

                # V√©rifier si la commande est mentionn√©e dans le contenu
                command_found = (
                    command.lower() in content.lower()
                    or f'"{command}"' in content
                    or f"'{command}'" in content
                )

                if command_found:
                    self.log_test(
                        f"Commande: {command}",
                        "PASS",
                        "Commande trouv√©e dans le terminal",
                        duration,
                    )
                    return True
                self.log_test(
                    f"Commande: {command}",
                    "FAIL",
                    "Commande non trouv√©e dans le terminal",
                    duration,
                )
                return False
            self.log_test(
                f"Commande: {command}",
                "FAIL",
                f"Page terminal inaccessible: {response.status_code}",
                duration,
            )
            return False
        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.log_test(f"Commande: {command}", "FAIL", f"Erreur: {e!s}", duration)
            return False

    def test_mission_progression(self) -> bool:
        """Test la progression des missions"""
        start_time = time.time()
        try:
            response = self.session.get(f"{self.base_url}/profil", timeout=self.timeout)
            duration = time.time() - start_time

            if response.status_code == 200:
                content = response.text

                # V√©rifier les √©l√©ments de progression
                progression_elements = [
                    "mission" in content.lower(),
                    "progression" in content.lower() or "progress" in content.lower(),
                    "niveau" in content.lower() or "level" in content.lower(),
                    "badge" in content.lower(),
                    "score" in content.lower() or "point" in content.lower(),
                ]

                elements_found = sum(progression_elements)

                if elements_found >= 3:
                    self.log_test(
                        "Progression Missions",
                        "PASS",
                        f"√âl√©ments progression trouv√©s: {elements_found}/5",
                        duration,
                    )
                    return True
                self.log_test(
                    "Progression Missions",
                    "FAIL",
                    f"√âl√©ments progression manquants: {elements_found}/5",
                    duration,
                )
                return False
            self.log_test(
                "Progression Missions",
                "FAIL",
                f"Page profil inaccessible: {response.status_code}",
                duration,
            )
            return False
        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.log_test("Progression Missions", "FAIL", f"Erreur: {e!s}", duration)
            return False

    def test_leaderboard_functionality(self) -> bool:
        """Test la fonctionnalit√© du leaderboard"""
        start_time = time.time()
        try:
            response = self.session.get(
                f"{self.base_url}/leaderboard", timeout=self.timeout
            )
            duration = time.time() - start_time

            if response.status_code == 200:
                content = response.text

                # V√©rifier les √©l√©ments du leaderboard
                leaderboard_elements = [
                    "leaderboard" in content.lower() or "classement" in content.lower(),
                    "score" in content.lower() or "point" in content.lower(),
                    "rang" in content.lower() or "rank" in content.lower(),
                    "utilisateur" in content.lower() or "user" in content.lower(),
                ]

                elements_found = sum(leaderboard_elements)

                if elements_found >= 2:
                    self.log_test(
                        "Fonctionnalit√© Leaderboard",
                        "PASS",
                        f"√âl√©ments leaderboard trouv√©s: {elements_found}/4",
                        duration,
                    )
                    return True
                self.log_test(
                    "Fonctionnalit√© Leaderboard",
                    "FAIL",
                    f"√âl√©ments leaderboard manquants: {elements_found}/4",
                    duration,
                )
                return False
            self.log_test(
                "Fonctionnalit√© Leaderboard",
                "FAIL",
                f"Page leaderboard inaccessible: {response.status_code}",
                duration,
            )
            return False
        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.log_test(
                "Fonctionnalit√© Leaderboard", "FAIL", f"Erreur: {e!s}", duration
            )
            return False

    def test_educational_games(self) -> bool:
        """Test les jeux √©ducatifs"""
        start_time = time.time()
        try:
            response = self.session.get(f"{self.base_url}/", timeout=self.timeout)
            duration = time.time() - start_time

            if response.status_code == 200:
                content = response.text

                # V√©rifier les √©l√©ments des jeux √©ducatifs
                game_elements = [
                    "jeu" in content.lower() or "game" in content.lower(),
                    "√©ducatif" in content.lower() or "educational" in content.lower(),
                    "mini-jeu" in content.lower() or "minigame" in content.lower(),
                    "logique" in content.lower() or "logic" in content.lower(),
                    "cybers√©curit√©" in content.lower()
                    or "cybersecurity" in content.lower(),
                ]

                elements_found = sum(game_elements)

                if elements_found >= 3:
                    self.log_test(
                        "Jeux √âducatifs",
                        "PASS",
                        f"√âl√©ments jeux trouv√©s: {elements_found}/5",
                        duration,
                    )
                    return True
                self.log_test(
                    "Jeux √âducatifs",
                    "FAIL",
                    f"√âl√©ments jeux manquants: {elements_found}/5",
                    duration,
                )
                return False
            self.log_test(
                "Jeux √âducatifs",
                "FAIL",
                f"Page inaccessible: {response.status_code}",
                duration,
            )
            return False
        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.log_test("Jeux √âducatifs", "FAIL", f"Erreur: {e!s}", duration)
            return False

    def test_luna_ai_interaction(self) -> bool:
        """Test l'interaction avec l'IA LUNA"""
        start_time = time.time()
        try:
            response = self.session.get(f"{self.base_url}/", timeout=self.timeout)
            duration = time.time() - start_time

            if response.status_code == 200:
                content = response.text

                # V√©rifier les √©l√©ments de LUNA
                luna_elements = [
                    "luna" in content.lower(),
                    "ia" in content.lower() or "ai" in content.lower(),
                    "√©motion" in content.lower() or "emotion" in content.lower(),
                    "assistant" in content.lower(),
                    "guide" in content.lower(),
                ]

                elements_found = sum(luna_elements)

                if elements_found >= 3:
                    self.log_test(
                        "Interaction LUNA IA",
                        "PASS",
                        f"√âl√©ments LUNA trouv√©s: {elements_found}/5",
                        duration,
                    )
                    return True
                self.log_test(
                    "Interaction LUNA IA",
                    "FAIL",
                    f"√âl√©ments LUNA manquants: {elements_found}/5",
                    duration,
                )
                return False
            self.log_test(
                "Interaction LUNA IA",
                "FAIL",
                f"Page inaccessible: {response.status_code}",
                duration,
            )
            return False
        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.log_test("Interaction LUNA IA", "FAIL", f"Erreur: {e!s}", duration)
            return False

    def test_game_objectives(self) -> bool:
        """Test les objectifs du jeu"""
        start_time = time.time()
        try:
            response = self.session.get(f"{self.base_url}/", timeout=self.timeout)
            duration = time.time() - start_time

            if response.status_code == 200:
                content = response.text

                # V√©rifier les objectifs du jeu
                objective_elements = [
                    "hacker" in content.lower(),
                    "aventure" in content.lower() or "adventure" in content.lower(),
                    "mission" in content.lower(),
                    "objectif" in content.lower() or "goal" in content.lower(),
                    "d√©couvrir" in content.lower() or "discover" in content.lower(),
                ]

                elements_found = sum(objective_elements)

                if elements_found >= 3:
                    self.log_test(
                        "Objectifs du Jeu",
                        "PASS",
                        f"Objectifs trouv√©s: {elements_found}/5",
                        duration,
                    )
                    return True
                self.log_test(
                    "Objectifs du Jeu",
                    "FAIL",
                    f"Objectifs manquants: {elements_found}/5",
                    duration,
                )
                return False
            self.log_test(
                "Objectifs du Jeu",
                "FAIL",
                f"Page inaccessible: {response.status_code}",
                duration,
            )
            return False
        except requests.exceptions.RequestException as e:
            duration = time.time() - start_time
            self.log_test("Objectifs du Jeu", "FAIL", f"Erreur: {e!s}", duration)
            return False

    def run_commands_test_suite(self):
        """Ex√©cute la suite de tests des commandes"""
        # game_logger.info(r"üåå ARKALIA QUEST - TESTS COMMANDES ET MISSIONS")
        # print("=" * 60)
        # game_logger.info(f"üéØ URL de test: {self.base_url}")
        # print(f"‚è∞ D√©but des tests: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        # print()

        # Tests des commandes de base
        # game_logger.info(r"‚å®Ô∏è 1. TESTS COMMANDES DE BASE")
        # print("-" * 40)
        for command in self.basic_commands:
            self.test_command_availability(command)

        # Tests des commandes tutoriel
        # game_logger.info(r"üéØ 2. TESTS COMMANDES TUTORIEL")
        # print("-" * 40)
        for command in self.tutorial_commands:
            self.test_command_availability(command)

        # Tests des commandes de jeux
        # game_logger.info(r"üéÆ 3. TESTS COMMANDES JEUX")
        # print("-" * 40)
        for command in self.game_commands:
            self.test_command_availability(command)

        # Tests des commandes d'histoire
        # game_logger.info(r"üìñ 4. TESTS COMMANDES HISTOIRE")
        # print("-" * 40)
        for command in self.story_commands:
            self.test_command_availability(command)

        # Tests des commandes d'action
        # game_logger.info(r"‚ö° 5. TESTS COMMANDES ACTION")
        # print("-" * 40)
        for command in self.action_commands:
            self.test_command_availability(command)

        # Tests des commandes LUNA
        # game_logger.info(r"ü§ñ 6. TESTS COMMANDES LUNA")
        # print("-" * 40)
        for command in self.luna_commands:
            self.test_command_availability(command)

        # Tests des commandes de navigation
        # game_logger.info(r"üåç 7. TESTS COMMANDES NAVIGATION")
        # print("-" * 40)
        for command in self.navigation_commands:
            self.test_command_availability(command)

        # Tests des fonctionnalit√©s du jeu
        # game_logger.info(r"üéØ 8. TESTS FONCTIONNALIT√âS JEU")
        # print("-" * 40)
        self.test_mission_progression()
        self.test_leaderboard_functionality()
        self.test_educational_games()
        self.test_luna_ai_interaction()
        self.test_game_objectives()

        # G√©n√©ration du rapport final
        self.generate_final_report()

    def generate_final_report(self):
        """G√©n√®re le rapport final des tests"""
        end_time = datetime.now(timezone.utc)
        total_duration = (end_time - self.start_time).total_seconds()

        # Statistiques
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r["status"] == "PASS"])
        failed_tests = len([r for r in self.test_results if r["status"] == "FAIL"])
        skipped_tests = len([r for r in self.test_results if r["status"] == "SKIP"])

        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0

        # print("=" * 60)
        # game_logger.info(r"üìä RAPPORT FINAL DES TESTS COMMANDES")
        # print("=" * 60)
        # game_logger.info(f"‚è∞ Dur√©e totale: {total_duration:.2f}s")
        # game_logger.info(f"üß™ Tests ex√©cut√©s: {total_tests}")
        # game_logger.info(f"‚úÖ Tests r√©ussis: {passed_tests}")
        # game_logger.info(f"‚ùå Tests √©chou√©s: {failed_tests}")
        # game_logger.info(f"‚è≠Ô∏è Tests ignor√©s: {skipped_tests}")
        # game_logger.info(f"üìà Taux de r√©ussite: {success_rate:.1f}%")
        # print()

        # Analyse par cat√©gorie de commandes
        command_categories = {
            "Commandes de Base": [
                r
                for r in self.test_results
                if any(cmd in r["test"] for cmd in self.basic_commands)
            ],
            "Commandes Tutoriel": [
                r
                for r in self.test_results
                if any(cmd in r["test"] for cmd in self.tutorial_commands)
            ],
            "Commandes Jeux": [
                r
                for r in self.test_results
                if any(cmd in r["test"] for cmd in self.game_commands)
            ],
            "Commandes Histoire": [
                r
                for r in self.test_results
                if any(cmd in r["test"] for cmd in self.story_commands)
            ],
            "Commandes Action": [
                r
                for r in self.test_results
                if any(cmd in r["test"] for cmd in self.action_commands)
            ],
            "Commandes LUNA": [
                r
                for r in self.test_results
                if any(cmd in r["test"] for cmd in self.luna_commands)
            ],
            "Commandes Navigation": [
                r
                for r in self.test_results
                if any(cmd in r["test"] for cmd in self.navigation_commands)
            ],
            "Fonctionnalit√©s": [
                r
                for r in self.test_results
                if not any(
                    cmd in r["test"]
                    for cmd in self.basic_commands
                    + self.tutorial_commands
                    + self.game_commands
                    + self.story_commands
                    + self.action_commands
                    + self.luna_commands
                    + self.navigation_commands
                )
            ],
        }

        # game_logger.info(r"üìã ANALYSE PAR CAT√âGORIE:")
        # print("-" * 30)
        for category, tests in command_categories.items():
            if tests:
                passed = len([t for t in tests if t["status"] == "PASS"])
                total = len(tests)
                rate = (passed / total * 100) if total > 0 else 0

                if rate >= EXCELLENT_RATE:
                    game_logger.info(
                        f"‚úÖ {category}: Excellent ({rate:.0f}% - {passed}/{total})"
                    )
                elif rate >= GOOD_RATE:
                    game_logger.info(
                        f"‚ö†Ô∏è {category}: √Ä am√©liorer ({rate:.0f}% - {passed}/{total})"
                    )
                else:
                    game_logger.info(
                        f"‚ùå {category}: Probl√®mes majeurs ({rate:.0f}% - {passed}/{total})"
                    )

        # Tests √©chou√©s
        if failed_tests > 0:
            print()
            game_logger.info(r"‚ùå TESTS √âCHOU√âS:")
            print("-" * 30)
            for result in self.test_results:
                if result["status"] == "FAIL":
                    print(f"‚Ä¢ {result['test']}: {result['details']}")

        # Recommandations
        # print()
        # game_logger.info(r"üí° RECOMMANDATIONS:")
        # print("-" * 30)
        if success_rate >= EXCELLENT_SUMMARY_RATE:
            print(
                "üéâ Excellent! Toutes les commandes et fonctionnalit√©s fonctionnent parfaitement.",
            )
        elif success_rate >= GOOD_SUMMARY_RATE:
            game_logger.info(r"üëç Bon √©tat g√©n√©ral, quelques commandes √† v√©rifier.")
        elif success_rate >= MEDIUM_RATE:
            game_logger.info(
                r"‚ö†Ô∏è √âtat moyen, plusieurs commandes n√©cessitent des corrections."
            )
        else:
            game_logger.info(
                r"üö® √âtat critique, de nombreuses commandes ne fonctionnent pas."
            )

        # Sauvegarde du rapport
        report_file = f"commands_test_report_{datetime.now(timezone.utc).strftime('%Y%m%d_%H%M%S')}.json"
        with Path(report_file).open("w", encoding="utf-8") as f:
            json.dump(
                {
                    "summary": {
                        "total_tests": total_tests,
                        "passed_tests": passed_tests,
                        "failed_tests": failed_tests,
                        "skipped_tests": skipped_tests,
                        "success_rate": success_rate,
                        "total_duration": total_duration,
                        "start_time": self.start_time.isoformat(),
                        "end_time": end_time.isoformat(),
                    },
                    "results": self.test_results,
                    "categories": {k: len(v) for k, v in command_categories.items()},
                },
                f,
                indent=2,
                ensure_ascii=False,
            )

        # game_logger.info(f"üìÑ Rapport d√©taill√© sauvegard√©: {report_file}")


def main():
    """Fonction principale"""
    base_url = (
        sys.argv[1] if len(sys.argv) > 1 else "https://arkalia-quest.onrender.com"
    )

    # game_logger.info(f"üöÄ D√©marrage des tests commandes Arkalia Quest sur {base_url}")
    # print()

    tester = ArkaliaQuestCommandsTester(base_url)
    tester.run_commands_test_suite()


if __name__ == "__main__":
    main()
