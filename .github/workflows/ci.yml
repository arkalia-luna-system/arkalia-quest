name: 🎮 Arkalia Quest CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.10"

jobs:
  lint_and_test:
    name: 🔍 Lint & Test (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e .[dev,security]

    - name: 🎨 Format check (Black)
      run: black --check --diff core engines utils tests app.py

    - name: 🔍 Lint (Ruff)
      run: ruff check core engines utils tests app.py

    - name: 📝 Type check (MyPy)
      run: mypy core engines utils
      continue-on-error: true  # MyPy peut être strict

    - name: 🛡️ Security check (Bandit)
      run: bandit -r core engines utils -f json -o bandit-report.json
      continue-on-error: true

    - name: 🧪 Run tests with pytest
      run: |
        python -m pytest tests/ -v --cov=core --cov=engines --cov=utils \
          --cov-report=xml --cov-report=term-missing \
          --junitxml=junit/test-results-${{ matrix.python-version }}.xml

    - name: 📊 Upload coverage to Codecov
      if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: 📄 Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.os }}
        path: |
          junit/test-results-*.xml
          bandit-report.json
          coverage.xml

  performance_tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: lint_and_test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: ⚡ Run performance tests
      run: |
        python -m pytest tests/performance/ -v --benchmark-only
        python tests/performance/test_load_testing.py

    - name: 📊 Generate performance report
      run: |
        echo "📈 Performance Tests Results" > performance-report.md
        echo "Generated on: $(date)" >> performance-report.md

    - name: 📄 Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-report.md

  security_audit:
    name: 🛡️ Security Audit
    runs-on: ubuntu-latest
    needs: lint_and_test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: 🔒 Check dependencies for vulnerabilities
      run: safety check --json --output safety-report.json
      continue-on-error: true

    - name: 🛡️ Run Bandit security linter
      run: |
        bandit -r core engines utils -f json -o bandit-report.json
        bandit -r core engines utils -f txt -o bandit-report.txt
      continue-on-error: true

    - name: 📄 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          bandit-report.txt

  build_package:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    needs: [lint_and_test, performance_tests, security_audit]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: 🏗️ Build package
      run: python -m build

    - name: 🔍 Check package
      run: twine check dist/*

    - name: 📄 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  docker_build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: build_package

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Docker image
      run: |
        docker build -t arkalia-quest:latest .
        docker images arkalia-quest:latest

    - name: 🧪 Test Docker container
      run: |
        docker run --rm -d --name arkalia-test -p 5001:5001 arkalia-quest:latest
        sleep 10
        curl -f http://localhost:5001/health || docker logs arkalia-test
        docker stop arkalia-test

  deploy_docs:
    name: 📚 Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_package

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install docs dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[docs]

    - name: 📚 Build documentation
      run: mkdocs build

    - name: 🚀 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  notification:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [lint_and_test, performance_tests, security_audit, build_package, docker_build]
    if: always()

    steps:
    - name: 📊 Generate CI Summary
      run: |
        echo "🎮 **Arkalia Quest CI/CD Summary**" > ci-summary.md
        echo "" >> ci-summary.md
        echo "- **Lint & Tests**: ${{ needs.lint_and_test.result }}" >> ci-summary.md
        echo "- **Performance**: ${{ needs.performance_tests.result }}" >> ci-summary.md
        echo "- **Security**: ${{ needs.security_audit.result }}" >> ci-summary.md
        echo "- **Build**: ${{ needs.build_package.result }}" >> ci-summary.md
        echo "- **Docker**: ${{ needs.docker_build.result }}" >> ci-summary.md
        echo "" >> ci-summary.md
        echo "**Commit**: ${{ github.sha }}" >> ci-summary.md
        echo "**Branch**: ${{ github.ref_name }}" >> ci-summary.md
        echo "**Workflow**: ${{ github.run_id }}" >> ci-summary.md

    - name: 📄 Upload CI summary
      uses: actions/upload-artifact@v3
      with:
        name: ci-summary
        path: ci-summary.md