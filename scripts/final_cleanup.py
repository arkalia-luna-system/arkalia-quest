#!/usr/bin/env python3
"""
Script de nettoyage final pour Arkalia Quest
Supprime tous les fichiers cach√©s et optimise le projet
"""

import os
import subprocess
import sys


def cleanup_hidden_files():
    """Supprime tous les fichiers cach√©s macOS"""
    print("üßπ Nettoyage des fichiers cach√©s...")
    
    # Supprimer les fichiers ._*
    result = subprocess.run(
        "find . -name '._*' -delete",
        shell=True,
        capture_output=True,
        text=True
    )
    
    if result.returncode == 0:
        print("‚úÖ Fichiers cach√©s supprim√©s")
    else:
        print(f"‚ö†Ô∏è Erreur suppression fichiers cach√©s: {result.stderr}")


def cleanup_pycache():
    """Supprime les dossiers __pycache__"""
    print("üßπ Nettoyage des __pycache__...")
    
    result = subprocess.run(
        "find . -name '__pycache__' -type d -exec rm -rf {} + 2>/dev/null || true",
        shell=True,
        capture_output=True,
        text=True
    )
    
    print("‚úÖ Dossiers __pycache__ supprim√©s")


def cleanup_logs():
    """Nettoie les logs anciens"""
    print("üßπ Nettoyage des logs...")
    
    log_files = [
        "logs/arkalia.log",
        "logs/error.log", 
        "logs/security.log"
    ]
    
    for log_file in log_files:
        if os.path.exists(log_file):
            # Garder seulement les 1000 derni√®res lignes
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                if len(lines) > 1000:
                    with open(log_file, 'w', encoding='utf-8') as f:
                        f.writelines(lines[-1000:])
                    print(f"‚úÖ {log_file} nettoy√© ({len(lines)} ‚Üí 1000 lignes)")
                else:
                    print(f"‚úÖ {log_file} d√©j√† optimis√©")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur nettoyage {log_file}: {e}")


def verify_integration():
    """V√©rifie que tous les modules sont int√©gr√©s"""
    print("üîç V√©rification de l'int√©gration...")
    
    try:
        # Tester l'import de l'app
        sys.path.append('.')
        from app import app
        
        # Tester quelques modules cl√©s
        modules_to_test = [
            'database_optimizer',
            'luna_emotions_engine', 
            'mission_handler',
            'profile_manager',
            'effects_engine'
        ]
        
        for module in modules_to_test:
            if hasattr(app, module):
                print(f"‚úÖ {module} int√©gr√©")
            else:
                print(f"‚ùå {module} manquant")
        
        print("‚úÖ V√©rification termin√©e")
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification: {e}")


def main():
    """Fonction principale"""
    print("üöÄ NETTOYAGE FINAL ARKALIA QUEST")
    print("=" * 50)
    
    cleanup_hidden_files()
    cleanup_pycache()
    cleanup_logs()
    verify_integration()
    
    print("\nüéâ Nettoyage final termin√©!")
    print("‚ú® Projet optimis√© et pr√™t pour la production")


if __name__ == "__main__":
    main()
