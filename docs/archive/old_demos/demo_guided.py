#!/usr/bin/env python3
"""
D√©monstration guid√©e automatique d'Arkalia Quest
Utilise Selenium pour naviguer automatiquement dans l'interface
"""

import time

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait


class ArkaliaGuidedDemo:
    def __init__(self, base_url="http://localhost:5001"):
        self.base_url = base_url
        self.driver = None

    def setup_driver(self):
        """Configure le navigateur Chrome"""
        chrome_options = Options()
        chrome_options.add_argument("--start-maximized")
        chrome_options.add_argument("--disable-notifications")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")

        # Mode headless pour l'automatisation
        # chrome_options.add_argument("--headless")

        self.driver = webdriver.Chrome(options=chrome_options)
        self.driver.implicitly_wait(10)

    def demo_sequence(self):
        """S√©quence de d√©monstration guid√©e"""
        print("üé¨ D√âMONSTRATION GUID√âE ARKALIA QUEST")
        print("=" * 50)

        try:
            self.setup_driver()

            # 1. Page d'accueil
            print("1Ô∏è‚É£ Navigation vers la page d'accueil...")
            self.driver.get(self.base_url)
            time.sleep(2)

            # V√©rifier que la page est charg√©e
            title = self.driver.title
            print(f"   ‚úÖ Page charg√©e: {title}")

            # 2. Page terminal
            print("\n2Ô∏è‚É£ Navigation vers le terminal...")
            self.driver.get(f"{self.base_url}/terminal")
            time.sleep(3)

            # Attendre que le terminal soit charg√©
            try:
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.ID, "terminal"))
                )
                print("   ‚úÖ Terminal charg√©")
            except:
                print("   ‚ö†Ô∏è Terminal non trouv√©, mais page accessible")

            # 3. Test des commandes via interface
            print("\n3Ô∏è‚É£ Test des commandes via interface...")
            commands = ["aide", "luna_contact", "badges", "profil"]

            for cmd in commands:
                try:
                    print(f"   Testing: {cmd}")

                    # Trouver le champ de saisie
                    input_field = self.driver.find_element(By.ID, "command-input")
                    input_field.clear()
                    input_field.send_keys(cmd)

                    # Trouver le bouton d'envoi
                    submit_btn = self.driver.find_element(By.ID, "submit-btn")
                    submit_btn.click()

                    # Attendre la r√©ponse
                    time.sleep(2)

                    # V√©rifier qu'une r√©ponse est affich√©e
                    output = self.driver.find_element(By.ID, "terminal-output")
                    if output.text.strip():
                        print(f"   ‚úÖ R√©ponse re√ßue pour {cmd}")
                    else:
                        print(f"   ‚ö†Ô∏è Pas de r√©ponse visible pour {cmd}")

                    time.sleep(1)

                except Exception as e:
                    print(f"   ‚ùå Erreur avec {cmd}: {e}")

            # 4. Navigation vers les autres pages
            print("\n4Ô∏è‚É£ Navigation vers les autres pages...")
            pages = [("/monde", "Page monde"), ("/profil", "Page profil")]

            for page, description in pages:
                try:
                    print(f"   Testing: {description}")
                    self.driver.get(f"{self.base_url}{page}")
                    time.sleep(2)

                    # V√©rifier que la page est charg√©e
                    current_url = self.driver.current_url
                    if page in current_url:
                        print(f"   ‚úÖ {description} accessible")
                    else:
                        print(f"   ‚ö†Ô∏è {description} - URL diff√©rente: {current_url}")

                except Exception as e:
                    print(f"   ‚ùå Erreur avec {description}: {e}")

            # 5. Retour √† l'accueil et test des effets
            print("\n5Ô∏è‚É£ Retour √† l'accueil et test des effets...")
            self.driver.get(self.base_url)
            time.sleep(2)

            # Tester les boutons et effets visuels
            try:
                # Chercher des boutons ou liens interactifs
                buttons = self.driver.find_elements(By.TAG_NAME, "button")
                links = self.driver.find_elements(By.TAG_NAME, "a")

                print(
                    f"   üìä √âl√©ments interactifs trouv√©s: {len(buttons)} boutons, {len(links)} liens"
                )

                # Tester un bouton si disponible
                if buttons:
                    print(f"   üéØ Test du premier bouton: {buttons[0].text}")
                    buttons[0].click()
                    time.sleep(1)
                    print("   ‚úÖ Clic effectu√©")

            except Exception as e:
                print(f"   ‚ö†Ô∏è Test des effets: {e}")

            # 6. Test de responsive design
            print("\n6Ô∏è‚É£ Test du responsive design...")
            try:
                # Tester diff√©rentes tailles d'√©cran
                sizes = [
                    (1920, 1080, "Desktop"),
                    (768, 1024, "Tablet"),
                    (375, 667, "Mobile"),
                ]

                for width, height, device in sizes:
                    print(f"   Testing: {device} ({width}x{height})")
                    self.driver.set_window_size(width, height)
                    time.sleep(1)

                    # V√©rifier que la page s'adapte
                    self.driver.find_element(By.TAG_NAME, "body")
                    print(f"   ‚úÖ {device}: Page adapt√©e")

            except Exception as e:
                print(f"   ‚ùå Test responsive: {e}")

            # 7. Test des performances
            print("\n7Ô∏è‚É£ Test des performances...")
            try:
                # Mesurer le temps de chargement
                start_time = time.time()
                self.driver.get(self.base_url)
                load_time = time.time() - start_time

                print(f"   ‚ö° Temps de chargement: {load_time:.2f}s")

                if load_time < 3:
                    print("   ‚úÖ Performance excellente")
                elif load_time < 5:
                    print("   ‚úÖ Performance correcte")
                else:
                    print("   ‚ö†Ô∏è Performance lente")

            except Exception as e:
                print(f"   ‚ùå Test performance: {e}")

            print("\n" + "=" * 50)
            print("üé¨ D√âMONSTRATION GUID√âE TERMIN√âE")
            print("‚úÖ Interface test√©e avec succ√®s !")
            print("üöÄ Arkalia Quest est pr√™t pour la production !")

            # Garder la page ouverte pour la vid√©o
            print("\nüí° Gardez cette fen√™tre ouverte pour l'enregistrement vid√©o")
            print("‚è±Ô∏è  Appuyez sur Entr√©e pour fermer...")
            input()

        except Exception as e:
            print(f"‚ùå Erreur g√©n√©rale: {e}")

        finally:
            if self.driver:
                self.driver.quit()


def main():
    demo = ArkaliaGuidedDemo()
    demo.demo_sequence()


if __name__ == "__main__":
    main()
