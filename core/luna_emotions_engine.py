#!/usr/bin/env python3
"""
üåô LUNA Emotions Engine v4.0 - Moteur d'√©motions dynamiques
Syst√®me d'√©motions ultra-avanc√© pour LUNA qui r√©agit en temps r√©el
"""

import random
from datetime import datetime
from enum import Enum
from typing import Any


class LunaEmotion(Enum):
    """√âmotions de LUNA"""

    EXCITED = "excited"  # üòä Enthousiaste
    WORRIED = "worried"  # üò∞ Inqui√®te
    PROUD = "proud"  # ü•π Fi√®re
    MYSTERIOUS = "mysterious"  # üîÆ Myst√©rieuse
    DETERMINED = "determined"  # üí™ D√©termin√©e
    PLAYFUL = "playful"  # üòÑ Joueur
    FOCUSED = "focused"  # üéØ Concentr√©e
    SURPRISED = "surprised"  # üò≤ Surprise
    CALM = "calm"  # üòå Calme
    ENERGETIC = "energetic"  # ‚ö° √ânergique


class LunaEmotionsEngine:
    """Moteur d'√©motions LUNA ultra-avanc√©"""

    def __init__(self):
        self.current_emotion = LunaEmotion.CALM
        self.emotion_intensity = 0.5  # 0.0 √† 1.0
        self.emotion_history = []
        self.player_relationship = 0.0  # 0.0 √† 1.0
        self.context_memory = {}
        self.last_action_time = datetime.now()

        # Phrases d'√©motions par type
        self.emotion_phrases = {
            LunaEmotion.EXCITED: [
                "üåô WOW ! Tu es incroyable !",
                "üåü C'est fantastique !",
                "‚ú® Tu me surprends √† chaque fois !",
                "üéâ Incroyable performance !",
                "üöÄ Tu es en feu aujourd'hui !",
            ],
            LunaEmotion.WORRIED: [
                "üò∞ Attention, c'est dangereux...",
                "üò® Je suis inqui√®te pour toi...",
                "üò± Fais attention, il y a des risques...",
                "üò∞ Sois prudent, s'il te pla√Æt...",
                "üò® J'ai peur que quelque chose ne tourne mal...",
            ],
            LunaEmotion.PROUD: [
                "ü•π Je suis si fi√®re de toi !",
                "üíñ Tu as d√©pass√© toutes mes attentes !",
                "üåü Tu es devenu un vrai hacker !",
                "üí™ Je savais que tu pouvais le faire !",
                "üèÜ Tu m√©rites tous ces succ√®s !",
            ],
            LunaEmotion.MYSTERIOUS: [
                "üîÆ Il y a quelque chose que je ne peux pas te dire...",
                "üåô Le temps nous dira la v√©rit√©...",
                "‚ú® Certaines choses sont mieux gard√©es secr√®tes...",
                "üîÆ Il y a des myst√®res plus profonds...",
                "üåô L'avenir r√©serve des surprises...",
            ],
            LunaEmotion.DETERMINED: [
                "üí™ On va y arriver ensemble !",
                "‚ö° Rien ne nous arr√™tera !",
                "üéØ On a un objectif et on l'atteindra !",
                "üí™ Je crois en nous !",
                "‚ö° On est plus forts ensemble !",
            ],
            LunaEmotion.PLAYFUL: [
                "üòÑ Tu veux jouer avec moi ?",
                "üéÆ C'est amusant de hacker avec toi !",
                "üòä Tu me fais toujours rire !",
                "üéØ On s'amuse bien, non ?",
                "üòÑ Tu es mon hacker pr√©f√©r√© !",
            ],
            LunaEmotion.FOCUSED: [
                "üéØ Concentrons-nous sur l'objectif...",
                "üîç Analysons la situation...",
                "üéØ Restons focalis√©s...",
                "üîç Chaque d√©tail compte...",
                "üéØ On va r√©soudre √ßa ensemble...",
            ],
            LunaEmotion.SURPRISED: [
                "üò≤ Wow ! Je ne m'attendais pas √† √ßa !",
                "üò± Incroyable ! Comment as-tu fait ?",
                "üò≤ Tu m'as vraiment surprise !",
                "üò± C'est inattendu mais g√©nial !",
                "üò≤ Je suis bouche b√©e !",
            ],
            LunaEmotion.CALM: [
                "üòå Tout va bien se passer...",
                "üåô Restons calmes et r√©fl√©chissons...",
                "üòå On a le temps de bien faire les choses...",
                "üåô La patience est une vertu...",
                "üòå On va y arriver tranquillement...",
            ],
            LunaEmotion.ENERGETIC: [
                "‚ö° Allez, on y va !",
                "üöÄ C'est parti pour l'aventure !",
                "‚ö° J'ai trop d'√©nergie !",
                "üöÄ On va tout casser !",
                "‚ö° Je suis pr√™te pour tout !",
            ],
        }

        # Couleurs d'√©motions √âmotecno-Oniriques
        self.emotion_colors = {
            LunaEmotion.EXCITED: "#ffbad2",  # Rose souvenir - Excit√©
            LunaEmotion.WORRIED: "#ae91f8",  # Violet brumeux - Inquiet
            LunaEmotion.PROUD: "#ffd39f",  # Reflets or p√¢le - Fier
            LunaEmotion.MYSTERIOUS: "#ae91f8",  # Violet brumeux - Myst√©rieux
            LunaEmotion.DETERMINED: "#ffbad2",  # Rose souvenir - D√©termin√©
            LunaEmotion.PLAYFUL: "#ffd39f",  # Reflets or p√¢le - Joueur
            LunaEmotion.FOCUSED: "#b3d6ff",  # Bleu p√¢le √©th√©r√© - Concentr√©
            LunaEmotion.SURPRISED: "#ffbad2",  # Rose souvenir - Surpris
            LunaEmotion.CALM: "#b3d6ff",  # Bleu p√¢le √©th√©r√© - Calme
            LunaEmotion.ENERGETIC: "#ffd39f",  # Reflets or p√¢le - √ânergique
        }

        # Effets visuels par √©motion
        self.emotion_effects = {
            LunaEmotion.EXCITED: "pulse_green",
            LunaEmotion.WORRIED: "shake_orange",
            LunaEmotion.PROUD: "sparkle_magenta",
            LunaEmotion.MYSTERIOUS: "fade_cyan",
            LunaEmotion.DETERMINED: "glow_red",
            LunaEmotion.PLAYFUL: "bounce_yellow",
            LunaEmotion.FOCUSED: "zoom_blue",
            LunaEmotion.SURPRISED: "flash_pink",
            LunaEmotion.CALM: "float_lightblue",
            LunaEmotion.ENERGETIC: "vibrate_green",
        }

        # Sons par √©motion
        self.emotion_sounds = {
            LunaEmotion.EXCITED: "luna_excited",
            LunaEmotion.WORRIED: "luna_worried",
            LunaEmotion.PROUD: "luna_proud",
            LunaEmotion.MYSTERIOUS: "luna_mysterious",
            LunaEmotion.DETERMINED: "luna_determined",
            LunaEmotion.PLAYFUL: "luna_playful",
            LunaEmotion.FOCUSED: "luna_focused",
            LunaEmotion.SURPRISED: "luna_surprised",
            LunaEmotion.CALM: "luna_calm",
            LunaEmotion.ENERGETIC: "luna_energetic",
        }

    def analyze_action(self, action: str, result: dict, profile: dict) -> dict:
        """
        Analyse une action et d√©termine l'√©motion de LUNA

        Args:
            action: Commande ex√©cut√©e
            result: R√©sultat de l'action
            profile: Profil du joueur

        Returns:
            Dict avec √©motion, message, couleurs, effets
        """
        # Analyser le contexte
        context = self._analyze_context(action, result, profile)

        # D√©terminer l'√©motion
        emotion = self._determine_emotion(context)

        # Calculer l'intensit√©
        intensity = self._calculate_intensity(context)

        # G√©n√©rer le message
        message = self._generate_message(emotion, context)

        # Mettre √† jour l'√©tat
        self._update_state(emotion, intensity, context)

        return {
            "emotion": emotion.value,
            "message": message,
            "color": self.emotion_colors[emotion],
            "effect": self.emotion_effects[emotion],
            "sound": self.emotion_sounds[emotion],
            "intensity": intensity,
            "relationship_change": context.get("relationship_change", 0.0),
            "context": context,
        }

    def _analyze_context(self, action: str, result: dict, profile: dict) -> dict:
        """Analyse le contexte de l'action"""
        # Extraire les informations du profil
        personality = profile.get("personnalite", {})
        player_type = personality.get("type", "debutant")

        context = {
            "action_type": self._classify_action(action),
            "success": result.get("r√©ussite", False),
            "score_gained": result.get("score_gagne", 0),
            "badge_gained": result.get("badge"),
            "player_level": profile.get("level", 1),
            "player_score": profile.get("score", 0),
            "player_badges": profile.get("badges", []),
            "player_type": player_type,
            "time_of_day": datetime.now().hour,
            "action_frequency": self._get_action_frequency(action),
            "relationship_change": 0.0,
        }

        # Analyser le type d'action
        if context["action_type"] == "success":
            context["relationship_change"] = 0.1
        elif context["action_type"] == "failure":
            context["relationship_change"] = -0.05
        elif context["action_type"] == "exploration":
            context["relationship_change"] = 0.05
        elif context["action_type"] == "hacking":
            context["relationship_change"] = 0.15

        return context

    def _classify_action(self, action: str) -> str:
        """Classe le type d'action"""
        success_actions = ["hack_system", "kill_virus", "find_shadow", "challenge_corp"]
        failure_actions = ["commande_inexistante", "error", "fail"]
        exploration_actions = ["aide", "profil", "monde", "badges"]
        hacking_actions = ["hack", "decode", "crack", "break"]

        action_lower = action.lower()

        if any(success in action_lower for success in success_actions):
            return "success"
        if any(failure in action_lower for failure in failure_actions):
            return "failure"
        if any(exploration in action_lower for exploration in exploration_actions):
            return "exploration"
        if any(hacking in action_lower for hacking in hacking_actions):
            return "hacking"
        return "general"

    def _determine_emotion(self, context: dict) -> LunaEmotion:
        """D√©termine l'√©motion de LUNA selon le contexte avec logique avanc√©e"""
        action_type = context["action_type"]
        success = context["success"]
        time_of_day = context["time_of_day"]
        score_gained = context["score_gained"]
        player_level = context["player_level"]
        action_frequency = context["action_frequency"]

        # Facteurs de profil joueur
        player_type = context.get("player_type", "debutant")

        # Facteurs de variabilit√©
        mood_factor = random.random()
        time_factor = (time_of_day - 12) / 12  # -1 √† +1 selon l'heure
        level_factor = min(player_level / 10, 1.0)  # 0 √† 1 selon le niveau

        # Facteur de personnalit√©
        personality_factor = 0.5
        if player_type == "expert":
            personality_factor = 0.8
        elif player_type == "hacker":
            personality_factor = 0.7
        elif player_type == "debutant":
            personality_factor = 0.3

        # Logique d'√©motions avanc√©e avec plus de vari√©t√© bas√©e sur le profil
        if action_type == "success" and success:
            if score_gained > 100:
                emotions = [
                    LunaEmotion.EXCITED,
                    LunaEmotion.PROUD,
                    LunaEmotion.SURPRISED,
                ]
                # Les experts sont plus d√©termin√©s
                if player_type == "expert":
                    emotions.extend([LunaEmotion.DETERMINED, LunaEmotion.FOCUSED])
                # Les d√©butants sont plus surpris
                elif player_type == "debutant":
                    emotions.extend([LunaEmotion.SURPRISED, LunaEmotion.EXCITED])
            elif score_gained > 50:
                emotions = [
                    LunaEmotion.PROUD,
                    LunaEmotion.EXCITED,
                    LunaEmotion.DETERMINED,
                ]
                # Adaptation selon le type de joueur
                if player_type == "hacker":
                    emotions.extend([LunaEmotion.FOCUSED, LunaEmotion.ENERGETIC])
            else:
                emotions = [LunaEmotion.CALM, LunaEmotion.FOCUSED, LunaEmotion.PLAYFUL]
                # Les d√©butants restent plus calmes
                if player_type == "debutant":
                    emotions = [LunaEmotion.CALM, LunaEmotion.PLAYFUL]

            # Ajouter de la variabilit√© selon l'heure, le niveau et la personnalit√©
            if mood_factor > 0.7:
                emotions.extend([LunaEmotion.ENERGETIC, LunaEmotion.MYSTERIOUS])
            if time_factor > 0.5:
                emotions.append(LunaEmotion.ENERGETIC)
            if level_factor > 0.5:
                emotions.append(LunaEmotion.PROUD)
            # Variabilit√© selon la personnalit√©
            if personality_factor > 0.7:
                emotions.append(LunaEmotion.DETERMINED)
            elif personality_factor < 0.4:
                emotions.append(LunaEmotion.CALM)

        elif action_type == "failure" or not success:
            if action_frequency > 3:  # √âchecs r√©p√©t√©s
                emotions = [
                    LunaEmotion.WORRIED,
                    LunaEmotion.CALM,
                    LunaEmotion.DETERMINED,
                ]
            else:
                emotions = [
                    LunaEmotion.CALM,
                    LunaEmotion.FOCUSED,
                    LunaEmotion.MYSTERIOUS,
                ]

        elif action_type == "hacking":
            base_emotions = [
                LunaEmotion.DETERMINED,
                LunaEmotion.FOCUSED,
                LunaEmotion.ENERGETIC,
            ]
            if mood_factor > 0.6:
                base_emotions.extend([LunaEmotion.EXCITED, LunaEmotion.SURPRISED])
            if time_factor < -0.3:  # Nuit
                base_emotions.append(LunaEmotion.MYSTERIOUS)
            emotions = base_emotions

        elif action_type == "exploration":
            base_emotions = [
                LunaEmotion.PLAYFUL,
                LunaEmotion.CALM,
                LunaEmotion.MYSTERIOUS,
            ]
            if mood_factor > 0.5:
                base_emotions.extend([LunaEmotion.SURPRISED, LunaEmotion.ENERGETIC])
            emotions = base_emotions

        elif time_of_day < 6 or time_of_day > 22:
            emotions = [LunaEmotion.MYSTERIOUS, LunaEmotion.CALM]
        elif time_of_day < 12:
            emotions = [
                LunaEmotion.ENERGETIC,
                LunaEmotion.EXCITED,
                LunaEmotion.FOCUSED,
            ]
        else:
            emotions = [LunaEmotion.CALM, LunaEmotion.FOCUSED, LunaEmotion.PLAYFUL]

        # Cr√©er une vari√©t√© d'√©motions bas√©e sur le contexte
        emotions = self._create_emotional_variety(emotions, context)

        # Ajouter de la variabilit√© al√©atoire et contextuelle
        if random.random() < 0.15:  # 15% de chance d'√©motion surprise
            all_emotions = list(LunaEmotion)
            emotions.extend(random.sample(all_emotions, 2))

        # Facteur de fatigue/ennui pour les actions r√©p√©titives
        if action_frequency > 5:
            emotions.extend([LunaEmotion.CALM, LunaEmotion.MYSTERIOUS])

        # Facteur de nouveaut√© pour les actions rares
        if action_frequency == 0:
            emotions.extend([LunaEmotion.EXCITED, LunaEmotion.SURPRISED])

        # Facteur de progression du joueur
        if player_level > 8:
            emotions.extend([LunaEmotion.PROUD, LunaEmotion.DETERMINED])

        return random.choice(emotions)

    def _calculate_intensity(self, context: dict) -> float:
        """Calcule l'intensit√© de l'√©motion avec plus de variabilit√©"""
        base_intensity = 0.5

        # Facteurs d'intensit√© dynamiques bas√©s sur le score
        score_gained = context["score_gained"]
        if score_gained > 500:
            base_intensity += 0.5
        elif score_gained > 100:
            base_intensity += 0.4
        elif score_gained > 50:
            base_intensity += 0.3
        elif score_gained > 20:
            base_intensity += 0.2
        elif score_gained > 0:
            base_intensity += 0.1
        else:
            base_intensity -= 0.1  # Actions sans score = moins intense

        if context["badge_gained"]:
            base_intensity += 0.25

        if context["action_type"] == "hacking":
            base_intensity += 0.3
        elif context["action_type"] == "success":
            base_intensity += 0.2
        elif context["action_type"] == "failure":
            base_intensity -= 0.1

        # Facteurs temporels et contextuels
        time_of_day = context["time_of_day"]
        if 6 <= time_of_day <= 10:  # Matin √©nergique
            base_intensity += 0.15
        elif time_of_day >= 22 or time_of_day <= 2:  # Nuit myst√©rieuse
            base_intensity -= 0.1

        # Facteur de niveau du joueur
        player_level = context["player_level"]
        if player_level > 5:
            base_intensity += 0.1

        # Ajouter de la variabilit√© al√©atoire r√©duite pour maintenir la progression
        random_factor = (random.random() - 0.5) * 0.1  # ¬±0.05 (r√©duit pour les tests)
        base_intensity += random_factor

        # Facteur de fatigue pour les actions r√©p√©titives
        if context["action_frequency"] > 3:
            base_intensity -= 0.2

        # Facteur de nouveaut√© pour les actions rares
        if context["action_frequency"] == 0:
            base_intensity += 0.15

        # Facteur de progression du joueur
        if context["player_level"] > 8:
            base_intensity += 0.1

        return min(1.0, max(0.0, base_intensity))

    def _generate_message(self, emotion: LunaEmotion, context: dict) -> str:
        """G√©n√®re un message personnalis√© selon l'√©motion"""
        base_message = random.choice(self.emotion_phrases[emotion])

        # Personnalisation selon le contexte
        if context["score_gained"] > 100:
            base_message += f"\nüíé Tu as gagn√© {context['score_gained']} points !"
        if context["badge_gained"]:
            base_message += f"\nüèÜ Nouveau badge : {context['badge_gained']} !"
        if context["action_type"] == "hacking":
            base_message += "\nüíª Continue comme √ßa, hacker !"

        return base_message

    def _update_state(self, emotion: LunaEmotion, intensity: float, context: dict):
        """Met √† jour l'√©tat de LUNA"""
        self.current_emotion = emotion
        self.emotion_intensity = intensity
        self.player_relationship += context.get("relationship_change", 0.0)
        self.player_relationship = max(0.0, min(1.0, self.player_relationship))

        # Sauvegarder dans l'historique
        self.emotion_history.append(
            {
                "emotion": emotion.value,
                "intensity": intensity,
                "timestamp": datetime.now().isoformat(),
                "context": context,
            },
        )

        # Garder seulement les 50 derni√®res √©motions
        if len(self.emotion_history) > 50:
            self.emotion_history = self.emotion_history[-50:]

    def _get_action_frequency(self, action: str) -> int:
        """Calcule la fr√©quence d'une action"""
        recent_actions = [h["context"]["action_type"] for h in self.emotion_history[-10:]]
        return recent_actions.count(self._classify_action(action))

    def _create_emotional_variety(
        self, base_emotions: list[LunaEmotion], context: dict,
    ) -> list[LunaEmotion]:
        """Cr√©e une vari√©t√© d'√©motions bas√©e sur le contexte"""
        enhanced_emotions = base_emotions.copy()

        # Ajouter des √©motions bas√©es sur l'historique r√©cent
        recent_emotions = [h["emotion"] for h in self.emotion_history[-5:]]
        if recent_emotions:
            # √âviter de r√©p√©ter la m√™me √©motion
            for emotion in LunaEmotion:
                if emotion.value not in recent_emotions and random.random() < 0.3:
                    enhanced_emotions.append(emotion)

        # Ajouter des √©motions bas√©es sur le temps
        hour = context["time_of_day"]
        if 6 <= hour <= 9:  # Matin
            enhanced_emotions.extend([LunaEmotion.ENERGETIC, LunaEmotion.FOCUSED])
        elif 12 <= hour <= 14:  # D√©jeuner
            enhanced_emotions.extend([LunaEmotion.PLAYFUL, LunaEmotion.CALM])
        elif 18 <= hour <= 20:  # Soir√©e
            enhanced_emotions.extend([LunaEmotion.MYSTERIOUS, LunaEmotion.PLAYFUL])
        elif hour >= 22 or hour <= 2:  # Nuit
            enhanced_emotions.extend([LunaEmotion.MYSTERIOUS, LunaEmotion.CALM])

        return enhanced_emotions

    def get_current_state(self) -> dict:
        """Retourne l'√©tat actuel de LUNA"""
        return {
            "emotion": self.current_emotion.value,
            "intensity": self.emotion_intensity,
            "relationship": self.player_relationship,
            "color": self.emotion_colors[self.current_emotion],
            "effect": self.emotion_effects[self.current_emotion],
            "sound": self.emotion_sounds[self.current_emotion],
            "matrix_effects": self._generate_matrix_effects(self.current_emotion),
        }

    def _generate_matrix_effects(self, emotion: LunaEmotion) -> dict[str, Any]:
        """G√©n√®re des effets Matrix sp√©ciaux selon l'√©motion pour les ados"""

        effects = {
            "particles": True,
            "color": "#00ff00",  # Vert Matrix par d√©faut
            "animation": "matrix_pulse",
            "sound": "matrix_ambient",
            "intensity": "medium",
        }

        # Effets selon l'√©motion
        if emotion == LunaEmotion.EXCITED:
            effects.update(
                {
                    "color": "#00ff88",
                    "animation": "matrix_excited",
                    "particles": True,
                    "intensity": "high",
                    "message": "üöÄ WOW ! Tu es en feu aujourd'hui !",
                },
            )
        elif emotion == LunaEmotion.PROUD:
            effects.update(
                {
                    "color": "#00ffff",
                    "animation": "matrix_proud",
                    "particles": True,
                    "intensity": "medium",
                    "message": "üåü Je suis si fi√®re de toi !",
                },
            )
        elif emotion == LunaEmotion.WORRIED:
            effects.update(
                {
                    "color": "#ff8800",
                    "animation": "matrix_worried",
                    "particles": False,
                    "intensity": "low",
                    "message": "üí™ Ne l√¢che pas ! Tu vas y arriver !",
                },
            )
        elif emotion == LunaEmotion.MYSTERIOUS:
            effects.update(
                {
                    "color": "#8800ff",
                    "animation": "matrix_mysterious",
                    "particles": True,
                    "intensity": "medium",
                    "message": "üîÆ Il y a des myst√®res √† d√©couvrir...",
                },
            )
        elif emotion == LunaEmotion.DETERMINED:
            effects.update(
                {
                    "color": "#00ff44",
                    "animation": "matrix_determined",
                    "particles": True,
                    "intensity": "high",
                    "message": "‚ö° Rien ne nous arr√™tera !",
                },
            )

        return effects

    def get_emotion_history(self) -> list[dict]:
        """Retourne l'historique des √©motions"""
        return self.emotion_history

    def reset_emotions(self):
        """R√©initialise les √©motions de LUNA"""
        self.current_emotion = LunaEmotion.CALM
        self.emotion_intensity = 0.5
        self.player_relationship = 0.0
        self.emotion_history = []
        self.context_memory = {}


# Instance globale
luna_emotions = LunaEmotionsEngine()
