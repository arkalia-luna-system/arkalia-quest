#!/usr/bin/env python3
"""
Test du skill tree apr√®s corrections
"""

import os
import sys

import requests

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def test_skill_tree():
    """Test du skill tree"""
    base_url = "http://127.0.0.1:5001"

    print("üß™ Test du Skill Tree apr√®s corrections")
    print("=" * 50)

    # V√©rifier que le serveur est en cours d'ex√©cution
    try:
        response = requests.get(f"{base_url}/", timeout=5)
        if response.status_code != 200:
            print(
                "‚ùå Le serveur n'est pas accessible. Veuillez lancer 'python app.py' d'abord."
            )
            return
    except requests.exceptions.RequestException:
        print(
            "‚ùå Le serveur n'est pas accessible. Veuillez lancer 'python app.py' d'abord."
        )
        return

    # Test 1: R√©cup√©rer les donn√©es du skill tree
    print("\n1. Test r√©cup√©ration des donn√©es du skill tree...")
    try:
        response = requests.get(f"{base_url}/api/skill-tree", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Donn√©es du skill tree r√©cup√©r√©es avec succ√®s")
            print(f"   - Succ√®s: {data.get('success')}")
            print(f"   - Comp√©tences disponibles: {len(data.get('skill_tree', {}))}")
        else:
            print(f"‚ùå Erreur: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return

    # Test 2: Tester l'am√©lioration d'une comp√©tence
    print("\n2. Test am√©lioration d'une comp√©tence...")
    try:
        upgrade_data = {"category": "hacking", "skill": "code_breaking"}

        response = requests.post(
            f"{base_url}/api/skill-tree/upgrade",
            json=upgrade_data,
            headers={"Content-Type": "application/json"},
            timeout=10,
        )

        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Am√©lioration de comp√©tence r√©ussie")
            print(f"   - Succ√®s: {result.get('success')}")
            print(f"   - Nouveau niveau: {result.get('new_level')}")
            print(f"   - XP restant: {result.get('remaining_xp')}")
        else:
            print(f"‚ùå Erreur: {response.status_code}")
            print(f"   - Message: {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'am√©lioration: {e}")

    # Test 3: V√©rifier la synchronisation des donn√©es
    print("\n3. Test synchronisation des donn√©es...")
    try:
        response = requests.get(f"{base_url}/api/sync-progression", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Synchronisation r√©ussie")
            print(f"   - Succ√®s: {data.get('success')}")
            print(f"   - XP du joueur: {data.get('player_data', {}).get('xp', 0)}")
        else:
            print(f"‚ùå Erreur: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur de synchronisation: {e}")

    # Test 4: V√©rifier l'acc√®s √† la page skill tree
    print("\n4. Test acc√®s √† la page skill tree...")
    try:
        response = requests.get(f"{base_url}/skill-tree", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Page skill tree accessible")
            print(f"   - Taille de la page: {len(response.text)} caract√®res")
        else:
            print(f"‚ùå Erreur: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur d'acc√®s √† la page: {e}")

    print("\n" + "=" * 50)
    print("üéØ Test termin√© !")


if __name__ == "__main__":
    test_skill_tree()
