# Docker Compose pour Arkalia Quest V3.2.0
# Configuration complète pour développement et production

version: '3.8'

services:
  # Application principale
  arkalia-quest:
    build: 
      context: .
      dockerfile: config/Dockerfile
    container_name: arkalia-quest-v3
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
      - DATABASE_URL=sqlite:///data/database/arkalia.db
      - SECRET_KEY=${SECRET_KEY:-arkalia-quest-secret-key-change-in-production}
      - REDIS_ENABLED=true
      - ENABLE_MONITORING=true
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./static:/app/static
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis pour le cache et les sessions
  redis:
    image: redis:7-alpine
    container_name: arkalia-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx pour le reverse proxy
  nginx:
    image: nginx:alpine
    container_name: arkalia-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/usr/share/nginx/html/static:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - arkalia-quest
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: arkalia-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: arkalia-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: arkalia-network
    driver: bridge
