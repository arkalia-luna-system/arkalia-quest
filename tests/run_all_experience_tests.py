"""
Lanceur principal des tests d'exp√©rience joueur Arkalia Quest
Ex√©cute tous les testeurs d'exp√©rience et g√©n√®re un rapport global
"""

import json
import subprocess
import sys
import time
from datetime import datetime


class ExperienceTestRunner:
    """Lanceur principal des tests d'exp√©rience"""

    def __init__(self):
        self.results = {
            "test_suite": "Arkalia Quest Experience Tests",
            "timestamp": datetime.now().isoformat(),
            "tests_run": [],
            "overall_score": 0,
            "summary": {},
            "recommendations": [],
        }

    def run_tutoriel_test(self):
        """Lance le test d'exp√©rience tutoriel"""
        print("üéÆ LANCEMENT TEST EXP√âRIENCE TUTORIEL")
        print("=" * 50)

        try:
            result = subprocess.run(
                [sys.executable, "tests/test_ui_tutoriel_experience.py"],
                check=False,
                capture_output=True,
                text=True,
                timeout=60,
            )

            test_result = {
                "name": "Tutoriel Experience",
                "success": result.returncode == 0,
                "duration": 0,
                "output": result.stdout,
                "errors": result.stderr,
                "score": 0,
            }

            # Extraire le score du rapport JSON g√©n√©r√©
            try:
                import glob

                report_files = glob.glob("tutoriel_experience_report_*.json")
                if report_files:
                    latest_report = max(report_files, key=lambda x: x.split("_")[-1].split(".")[0])
                    with open(latest_report, encoding="utf-8") as f:
                        report_data = json.load(f)
                        test_result["score"] = report_data.get("overall_score", 0)
            except Exception:
                pass

            self.results["tests_run"].append(test_result)
            return test_result

        except subprocess.TimeoutExpired:
            test_result = {
                "name": "Tutoriel Experience",
                "success": False,
                "duration": 60,
                "output": "",
                "errors": "Timeout apr√®s 60 secondes",
                "score": 0,
            }
            self.results["tests_run"].append(test_result)
            return test_result

    def run_terminal_test(self):
        """Lance le test d'exp√©rience terminal"""
        print("üéÆ LANCEMENT TEST EXP√âRIENCE TERMINAL")
        print("=" * 50)

        try:
            result = subprocess.run(
                [sys.executable, "tests/test_ui_terminal_experience.py"],
                check=False,
                capture_output=True,
                text=True,
                timeout=60,
            )

            test_result = {
                "name": "Terminal Experience",
                "success": result.returncode == 0,
                "duration": 0,
                "output": result.stdout,
                "errors": result.stderr,
                "score": 0,
            }

            # Extraire le score du rapport JSON g√©n√©r√©
            try:
                import glob

                report_files = glob.glob("terminal_experience_report_*.json")
                if report_files:
                    latest_report = max(report_files, key=lambda x: x.split("_")[-1].split(".")[0])
                    with open(latest_report, encoding="utf-8") as f:
                        report_data = json.load(f)
                        test_result["score"] = report_data.get("overall_score", 0)
            except Exception:
                pass

            self.results["tests_run"].append(test_result)
            return test_result

        except subprocess.TimeoutExpired:
            test_result = {
                "name": "Terminal Experience",
                "success": False,
                "duration": 60,
                "output": "",
                "errors": "Timeout apr√®s 60 secondes",
                "score": 0,
            }
            self.results["tests_run"].append(test_result)
            return test_result

    def run_navigation_test(self):
        """Lance le test d'exp√©rience navigation"""
        print("üéÆ LANCEMENT TEST EXP√âRIENCE NAVIGATION")
        print("=" * 50)

        try:
            result = subprocess.run(
                [sys.executable, "tests/test_ui_navigation_experience.py"],
                check=False,
                capture_output=True,
                text=True,
                timeout=60,
            )

            test_result = {
                "name": "Navigation Experience",
                "success": result.returncode == 0,
                "duration": 0,
                "output": result.stdout,
                "errors": result.stderr,
                "score": 0,
            }

            # Extraire le score du rapport JSON g√©n√©r√©
            try:
                import glob

                report_files = glob.glob("navigation_experience_report_*.json")
                if report_files:
                    latest_report = max(report_files, key=lambda x: x.split("_")[-1].split(".")[0])
                    with open(latest_report, encoding="utf-8") as f:
                        report_data = json.load(f)
                        test_result["score"] = report_data.get("overall_score", 0)
            except Exception:
                pass

            self.results["tests_run"].append(test_result)
            return test_result

        except subprocess.TimeoutExpired:
            test_result = {
                "name": "Navigation Experience",
                "success": False,
                "duration": 60,
                "output": "",
                "errors": "Timeout apr√®s 60 secondes",
                "score": 0,
            }
            self.results["tests_run"].append(test_result)
            return test_result

    def run_boutons_test(self):
        """Lance le test d'exp√©rience boutons et actions"""
        print("üéÆ LANCEMENT TEST EXP√âRIENCE BOUTONS ET ACTIONS")
        print("=" * 50)

        try:
            result = subprocess.run(
                [sys.executable, "tests/test_ui_boutons_actions_experience.py"],
                check=False,
                capture_output=True,
                text=True,
                timeout=60,
            )

            test_result = {
                "name": "Boutons Actions Experience",
                "success": result.returncode == 0,
                "duration": 0,
                "output": result.stdout,
                "errors": result.stderr,
                "score": 0,
            }

            # Extraire le score du rapport JSON g√©n√©r√©
            try:
                import glob

                report_files = glob.glob("boutons_actions_experience_report_*.json")
                if report_files:
                    latest_report = max(report_files, key=lambda x: x.split("_")[-1].split(".")[0])
                    with open(latest_report, encoding="utf-8") as f:
                        report_data = json.load(f)
                        test_result["score"] = report_data.get("overall_score", 0)
            except Exception:
                pass

            self.results["tests_run"].append(test_result)
            return test_result

        except subprocess.TimeoutExpired:
            test_result = {
                "name": "Boutons Actions Experience",
                "success": False,
                "duration": 60,
                "output": "",
                "errors": "Timeout apr√®s 60 secondes",
                "score": 0,
            }
            self.results["tests_run"].append(test_result)
            return test_result

    def run_pwa_mobile_test(self):
        """Lance le test d'exp√©rience PWA et mobile"""
        print("üéÆ LANCEMENT TEST EXP√âRIENCE PWA ET MOBILE")
        print("=" * 50)

        try:
            result = subprocess.run(
                [sys.executable, "tests/test_ui_pwa_mobile_experience.py"],
                check=False,
                capture_output=True,
                text=True,
                timeout=60,
            )

            test_result = {
                "name": "PWA Mobile Experience",
                "success": result.returncode == 0,
                "duration": 0,
                "output": result.stdout,
                "errors": result.stderr,
                "score": 0,
            }

            # Extraire le score du rapport JSON g√©n√©r√©
            try:
                import glob

                report_files = glob.glob("pwa_mobile_experience_report_*.json")
                if report_files:
                    latest_report = max(report_files, key=lambda x: x.split("_")[-1].split(".")[0])
                    with open(latest_report, encoding="utf-8") as f:
                        report_data = json.load(f)
                        test_result["score"] = report_data.get("overall_score", 0)
            except Exception:
                pass

            self.results["tests_run"].append(test_result)
            return test_result

        except subprocess.TimeoutExpired:
            test_result = {
                "name": "PWA Mobile Experience",
                "success": False,
                "duration": 60,
                "output": "",
                "errors": "Timeout apr√®s 60 secondes",
                "score": 0,
            }
            self.results["tests_run"].append(test_result)
            return test_result

    def run_all_tests(self):
        """Lance tous les tests d'exp√©rience"""
        print("üéÆ ARKALIA QUEST - LANCEUR DE TESTS D'EXP√âRIENCE COMPLETS")
        print("=" * 70)
        print("üöÄ D√©marrage de la batterie compl√®te de tests d'exp√©rience joueur...")
        print()

        start_time = time.time()

        # Lancement de tous les tests
        self.run_tutoriel_test()
        self.run_terminal_test()
        self.run_navigation_test()
        self.run_boutons_test()
        self.run_pwa_mobile_test()

        total_time = time.time() - start_time

        # Calcul du score global
        total_score = 0
        successful_tests = 0

        for test in self.results["tests_run"]:
            total_score += test["score"]
            if test["success"]:
                successful_tests += 1

        self.results["overall_score"] = (
            total_score / len(self.results["tests_run"]) if self.results["tests_run"] else 0
        )

        # G√©n√©ration du r√©sum√©
        self.results["summary"] = {
            "total_tests": len(self.results["tests_run"]),
            "successful_tests": successful_tests,
            "success_rate": (
                (successful_tests / len(self.results["tests_run"]) * 100)
                if self.results["tests_run"]
                else 0
            ),
            "total_time": total_time,
            "average_score": self.results["overall_score"],
        }

        # G√©n√©ration des recommandations
        self._generate_recommendations()

        # Affichage du rapport final
        self._display_final_report()

        return self.results

    def _generate_recommendations(self):
        """G√©n√®re des recommandations bas√©es sur les r√©sultats"""
        recommendations = []

        # Analyser les scores par test
        test_scores = {test["name"]: test["score"] for test in self.results["tests_run"]}

        for test_name, score in test_scores.items():
            if score < 40:
                recommendations.append(
                    f"‚ùå {test_name}: N√©cessite une am√©lioration majeure (score:"
                    "{score:.1f}/100)",
                )
            elif score < 60:
                recommendations.append(
                    f"‚ö†Ô∏è {test_name}: Am√©lioration recommand√©e (score:" + "{score:.1f}/100)",
                )
            elif score < 80:
                recommendations.append(
                    f"üëç {test_name}: Bon, peut √™tre optimis√© (score: {score:.1f}/100)",
                )
            else:
                recommendations.append(f"üéâ {test_name}: Excellent (score: {score:.1f}/100)")

        # Recommandations g√©n√©rales
        if self.results["overall_score"] < 50:
            recommendations.append("üö® EXP√âRIENCE GLOBALE: Am√©lioration majeure n√©cessaire")
        elif self.results["overall_score"] < 70:
            recommendations.append("‚ö†Ô∏è  EXP√âRIENCE GLOBALE: Am√©lioration recommand√©e")
        elif self.results["overall_score"] < 85:
            recommendations.append("üëç EXP√âRIENCE GLOBALE: Bonne, optimisations possibles")
        else:
            recommendations.append("üéâ EXP√âRIENCE GLOBALE: Excellente !")

        self.results["recommendations"] = recommendations

    def _display_final_report(self):
        """Affiche le rapport final"""
        print("\n" + "=" * 70)
        print("üìä RAPPORT FINAL - TESTS D'EXP√âRIENCE ARKALIA QUEST")
        print("=" * 70)

        print(f"\nüéØ SCORE GLOBAL: {self.results['overall_score']:.1f}/100")
        print(f"‚è±Ô∏è  Temps total: {self.results['summary']['total_time']:.2f} secondes")
        print(f"üß™ Tests effectu√©s: {self.results['summary']['total_tests']}")
        print(f"‚úÖ Tests r√©ussis: {self.results['summary']['successful_tests']}")
        print(f"üìà Taux de r√©ussite: {self.results['summary']['success_rate']:.1f}%")

        print("\nüìã D√âTAIL PAR TEST:")
        print("-" * 50)

        for test in self.results["tests_run"]:
            status = "‚úÖ" if test["success"] else "‚ùå"
            print(f"{status} {test['name']}: {test['score']:.1f}/100")

        print("\nüí° RECOMMANDATIONS:")
        print("-" * 50)

        for recommendation in self.results["recommendations"]:
            print(f"  {recommendation}")

        # √âvaluation finale
        print("\nüèÅ CONCLUSION:")
        print("-" * 50)

        if self.results["overall_score"] >= 85:
            print("üéâ EXP√âRIENCE UTILISATEUR EXCELLENTE !")
            print("   Le jeu offre une exp√©rience immersive et fluide.")
        elif self.results["overall_score"] >= 70:
            print("üëç EXP√âRIENCE UTILISATEUR BONNE")
            print("   Quelques am√©liorations peuvent optimiser l'exp√©rience.")
        elif self.results["overall_score"] >= 50:
            print("‚ö†Ô∏è  EXP√âRIENCE UTILISATEUR MOYENNE")
            print("   Des am√©liorations sont n√©cessaires pour une meilleure exp√©rience.")
        else:
            print("‚ùå EXP√âRIENCE UTILISATEUR √Ä AM√âLIORER")
            print("   Des am√©liorations majeures sont n√©cessaires.")

        # Sauvegarde du rapport
        filename = f"experience_tests_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)

        print(f"\nüíæ Rapport complet sauvegard√©: {filename}")


def main():
    """Fonction principale"""
    runner = ExperienceTestRunner()
    results = runner.run_all_tests()

    return results


if __name__ == "__main__":
    main()
