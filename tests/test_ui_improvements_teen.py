#!/usr/bin/env python3
"""
üß™ TESTS DES AM√âLIORATIONS UX ADOLESCENT - ARKALIA QUEST
Teste toutes les nouvelles fonctionnalit√©s pour captiver les ados de 14 ans
"""

import json
from datetime import datetime

import requests


class TeenUXImprovementsTester:
    """Testeur des am√©liorations UX pour adolescents"""

    def __init__(self, base_url="http://localhost:5001"):
        self.base_url = base_url
        self.results = {
            "test_name": "Teen UX Improvements Test",
            "timestamp": datetime.now().isoformat(),
            "tests": [],
            "overall_score": 0,
            "improvements_tested": [],
            "issues_found": [],
            "recommendations": [],
        }

    def test_daily_challenges_system(self):
        """Test du syst√®me de d√©fis quotidiens"""
        print("üéØ Test du syst√®me de d√©fis quotidiens...")

        test = {
            "name": "D√©fis quotidiens",
            "success": False,
            "features_tested": [],
            "issues": [],
            "score": 0,
        }

        try:
            # Test de la commande daily_challenges
            response = requests.post(
                f"{self.base_url}/commande",
                json={"commande": "daily_challenges"},
                timeout=5,
            )

            if response.status_code == 200:
                data = response.json()
                response_data = data.get("reponse", data)
                if response_data.get("r√©ussite", False):
                    test["success"] = True
                    test["score"] += 25
                    test["features_tested"].append(
                        "Commande daily_challenges fonctionne"
                    )

                    # V√©rifier le contenu des d√©fis
                    message = response_data.get("message", "")
                    if "Speed Hacker" in message:
                        test["score"] += 25
                        test["features_tested"].append("D√©fi Speed Hacker pr√©sent")
                    if "Code Master" in message:
                        test["score"] += 25
                        test["features_tested"].append("D√©fi Code Master pr√©sent")
                    if "Social Butterfly" in message:
                        test["score"] += 25
                        test["features_tested"].append("D√©fi Social Butterfly pr√©sent")

                    # V√©rifier les barres de progression
                    if "‚ñà" in message and "‚ñë" in message:
                        test["score"] += 25
                        test["features_tested"].append(
                            "Barres de progression visuelles"
                        )
                    else:
                        test["issues"].append("Barres de progression manquantes")

                else:
                    test["issues"].append("Commande daily_challenges √©chou√©e")
            else:
                test["issues"].append(f"Erreur HTTP: {response.status_code}")

        except Exception as e:
            test["issues"].append(f"Erreur de test: {e!s}")

        self.results["tests"].append(test)
        return test

    def test_random_events_system(self):
        """Test du syst√®me d'√©v√©nements al√©atoires"""
        print("üé≤ Test du syst√®me d'√©v√©nements al√©atoires...")

        test = {
            "name": "√âv√©nements al√©atoires",
            "success": False,
            "features_tested": [],
            "issues": [],
            "score": 0,
        }

        try:
            # Test de la commande random_events
            response = requests.post(
                f"{self.base_url}/commande",
                json={"commande": "random_events"},
                timeout=5,
            )

            if response.status_code == 200:
                data = response.json()
                response_data = data.get("reponse", data)
                if response_data.get("r√©ussite", False):
                    test["success"] = True
                    test["score"] += 25
                    test["features_tested"].append("Commande random_events fonctionne")

                    # V√©rifier le contenu des √©v√©nements
                    message = response_data.get("message", "")
                    if "Surprise LUNA" in message:
                        test["score"] += 25
                        test["features_tested"].append(
                            "√âv√©nement Surprise LUNA pr√©sent"
                        )
                    if "Badge Secret" in message:
                        test["score"] += 25
                        test["features_tested"].append("√âv√©nement Badge Secret pr√©sent")
                    if "Glitch Matrix" in message:
                        test["score"] += 25
                        test["features_tested"].append(
                            "√âv√©nement Glitch Matrix pr√©sent"
                        )

                    # V√©rifier les informations de d√©clenchement
                    if "D√©clencheur" in message and "Chance" in message:
                        test["score"] += 25
                        test["features_tested"].append(
                            "Informations de d√©clenchement pr√©sentes"
                        )
                    else:
                        test["issues"].append(
                            "Informations de d√©clenchement manquantes"
                        )

                else:
                    test["issues"].append("Commande random_events √©chou√©e")
            else:
                test["issues"].append(f"Erreur HTTP: {response.status_code}")

        except Exception as e:
            test["issues"].append(f"Erreur de test: {e!s}")

        self.results["tests"].append(test)
        return test

    def test_interactive_missions(self):
        """Test des missions interactives progressives"""
        print("üéÆ Test des missions interactives...")

        test = {
            "name": "Missions interactives",
            "success": False,
            "features_tested": [],
            "issues": [],
            "score": 0,
        }

        try:
            # Test de la commande acte_1
            response = requests.post(
                f"{self.base_url}/commande", json={"commande": "acte_1"}, timeout=5
            )

            if response.status_code == 200:
                data = response.json()
                response_data = data.get("reponse", data)
                if response_data.get("r√©ussite", False):
                    test["success"] = True
                    test["score"] += 25
                    test["features_tested"].append("Commande acte_1 fonctionne")

                    # V√©rifier la progression de mission
                    if "mission_progress" in response_data:
                        test["score"] += 25
                        test["features_tested"].append(
                            "Progression de mission pr√©sente"
                        )
                    else:
                        test["issues"].append("Progression de mission manquante")

                    # V√©rifier l'objectif suivant
                    if "next_action" in data:
                        test["score"] += 25
                        test["features_tested"].append("Objectif suivant d√©fini")
                    else:
                        test["issues"].append("Objectif suivant manquant")

                    # V√©rifier la progression visuelle
                    message = data.get("message", "")
                    if "1/4 √©tapes" in message:
                        test["score"] += 25
                        test["features_tested"].append("Progression visuelle pr√©sente")
                    else:
                        test["issues"].append("Progression visuelle manquante")

                else:
                    test["issues"].append("Commande acte_1 √©chou√©e")
            else:
                test["issues"].append(f"Erreur HTTP: {response.status_code}")

        except Exception as e:
            test["issues"].append(f"Erreur de test: {e!s}")

        self.results["tests"].append(test)
        return test

    def test_progressive_hack_system(self):
        """Test du syst√®me de hack progressif"""
        print("üíª Test du syst√®me de hack progressif...")

        test = {
            "name": "Hack progressif",
            "success": False,
            "features_tested": [],
            "issues": [],
            "score": 0,
        }

        try:
            # Test de la commande hack_system (√©tape 1)
            response = requests.post(
                f"{self.base_url}/commande", json={"commande": "hack_system"}, timeout=5
            )

            if response.status_code == 200:
                data = response.json()
                response_data = data.get("reponse", data)
                if response_data.get("r√©ussite", False):
                    test["success"] = True
                    test["score"] += 25
                    test["features_tested"].append("Commande hack_system fonctionne")

                    # V√©rifier la progression √©tape par √©tape
                    if "hack_progress" in response_data:
                        test["score"] += 25
                        test["features_tested"].append("Progression hack pr√©sente")
                    else:
                        test["issues"].append("Progression hack manquante")

                    # V√©rifier l'√©tape actuelle
                    if "next_step" in data:
                        test["score"] += 25
                        test["features_tested"].append("√âtape suivante d√©finie")
                    else:
                        test["issues"].append("√âtape suivante manquante")

                    # V√©rifier la progression visuelle
                    message = data.get("message", "")
                    if "1/3 √©tapes" in message:
                        test["score"] += 25
                        test["features_tested"].append(
                            "Progression visuelle hack pr√©sente"
                        )
                    else:
                        test["issues"].append("Progression visuelle hack manquante")

                else:
                    test["issues"].append("Commande hack_system √©chou√©e")
            else:
                test["issues"].append(f"Erreur HTTP: {response.status_code}")

        except Exception as e:
            test["issues"].append(f"Erreur de test: {e!s}")

        self.results["tests"].append(test)
        return test

    def test_matrix_theme_consistency(self):
        """Test de la coh√©rence du th√®me Matrix"""
        print("üåê Test de la coh√©rence du th√®me Matrix...")

        test = {
            "name": "Th√®me Matrix",
            "success": False,
            "features_tested": [],
            "issues": [],
            "score": 0,
        }

        try:
            # Test de la page d'accueil
            response = requests.get(f"{self.base_url}/", timeout=5)

            if response.status_code == 200:
                content = response.text
                test["success"] = True
                test["score"] += 25
                test["features_tested"].append("Page d'accueil accessible")

                # V√©rifier les couleurs Matrix
                if "#00ff00" in content or "matrix" in content.lower():
                    test["score"] += 25
                    test["features_tested"].append("Couleurs Matrix pr√©sentes")
                else:
                    test["issues"].append("Couleurs Matrix manquantes")

                # V√©rifier les animations Matrix
                if "matrix" in content.lower():
                    test["score"] += 25
                    test["features_tested"].append("Animations Matrix pr√©sentes")
                else:
                    test["issues"].append("Animations Matrix manquantes")

                # V√©rifier la coh√©rence visuelle
                if "arkalia-luna-vision.css" in content:
                    test["score"] += 25
                    test["features_tested"].append("CSS Matrix charg√©")
                else:
                    test["issues"].append("CSS Matrix manquant")

            else:
                test["issues"].append(f"Erreur HTTP: {response.status_code}")

        except Exception as e:
            test["issues"].append(f"Erreur de test: {e!s}")

        self.results["tests"].append(test)
        return test

    def run_all_tests(self):
        """Lance tous les tests d'am√©liorations UX"""
        print("üß™ ARKALIA QUEST - TESTS DES AM√âLIORATIONS UX ADOLESCENT")
        print("=" * 70)

        # Tests des nouvelles fonctionnalit√©s
        self.test_daily_challenges_system()
        self.test_random_events_system()
        self.test_interactive_missions()
        self.test_progressive_hack_system()
        self.test_matrix_theme_consistency()

        # Calcul du score global
        total_score = 0
        total_tests = len(self.results["tests"])

        for test in self.results["tests"]:
            total_score += test["score"]

        self.results["overall_score"] = (
            (total_score / (total_tests * 100)) * 100 if total_tests > 0 else 0
        )

        # G√©n√©ration du rapport
        self._generate_report()

        return self.results

    def _generate_report(self):
        """G√©n√®re le rapport final des tests"""
        print("\nüìä RAPPORT DES AM√âLIORATIONS UX ADOLESCENT")
        print("=" * 70)
        print(f"üéØ Score global: {self.results['overall_score']:.1f}/100")
        print(f"üß™ Tests effectu√©s: {len(self.results['tests'])}")

        for test in self.results["tests"]:
            print(f"\nüéÆ {test['name'].upper()}:")
            print(f"   üìä Score: {test['score']}/100")
            print(f"   ‚úÖ Succ√®s: {'Oui' if test['success'] else 'Non'}")

            if test["features_tested"]:
                print(f"   üåü Fonctionnalit√©s test√©es: {len(test['features_tested'])}")
                for feature in test["features_tested"]:
                    print(f"      ‚Ä¢ {feature}")

            if test["issues"]:
                print(f"   ‚ùå Probl√®mes: {len(test['issues'])}")
                for issue in test["issues"]:
                    print(f"      ‚Ä¢ {issue}")

        # Sauvegarde du rapport
filename =
f"teen_ux_improvements_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)

        print(f"\nüíæ Rapport sauvegard√©: {filename}")


def main():
    """Fonction principale"""
    tester = TeenUXImprovementsTester()
    results = tester.run_all_tests()

    # √âvaluation finale
    if results["overall_score"] >= 80:
        print("\nüéâ AM√âLIORATIONS UX EXCELLENTES POUR ADOS !")
    elif results["overall_score"] >= 60:
        print("\nüëç AM√âLIORATIONS UX BONNES POUR ADOS")
    elif results["overall_score"] >= 40:
        print("\n‚ö†Ô∏è  AM√âLIORATIONS UX MOYENNES POUR ADOS")
    else:
        print("\n‚ùå AM√âLIORATIONS UX INSUFFISANTES POUR ADOS")


if __name__ == "__main__":
    main()
