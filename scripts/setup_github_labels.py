#!/usr/bin/env python3
"""
Script de configuration des labels GitHub pour Arkalia Quest
Configure automatiquement les labels recommand√©s pour un projet open source
"""

import os
import sys
from typing import Any

import requests


class GitHubLabelsSetup:
    """Configuration des labels GitHub pour Arkalia Quest"""

    def __init__(
        self, token: str = None, repo: str = "arkalia-luna-system/arkalia-quest"
    ):
        self.token = token or os.getenv("GITHUB_TOKEN")
        self.repo = repo
        self.base_url = f"https://api.github.com/repos/{repo}/labels"
        self.headers = {
            "Authorization": f"token {self.token}",
            "Accept": "application/vnd.github.v3+json",
            "User-Agent": "Arkalia-Quest-Labels-Setup",
        }

        # Labels recommand√©s pour un projet open source √©ducatif
        self.labels = [
            # üéØ Priorit√© et statut
            {
                "name": "priority: critical",
                "color": "d73a4a",
                "description": "Probl√®me critique n√©cessitant une attention imm√©diate",
            },
            {
                "name": "priority: high",
                "color": "f85149",
                "description": "Probl√®me important n√©cessitant une attention rapide",
            },
            {
                "name": "priority: medium",
                "color": "fbca04",
                "description": "Probl√®me de priorit√© moyenne",
            },
            {
                "name": "priority: low",
                "color": "0e8a16",
                "description": "Probl√®me de faible priorit√©",
            },
            # üè∑Ô∏è Types d'issues
            {
                "name": "bug",
                "color": "d73a4a",
                "description": "Quelque chose ne fonctionne pas",
            },
            {
                "name": "enhancement",
                "color": "a2eeef",
                "description": "Nouvelle fonctionnalit√© ou am√©lioration",
            },
            {
                "name": "documentation",
                "color": "0075ca",
                "description": "Am√©liorations ou ajouts √† la documentation",
            },
            {
                "name": "question",
                "color": "d876e3",
                "description": "Question ou demande d'information",
            },
            {
                "name": "duplicate",
                "color": "cfd3d7",
                "description": "Issue ou PR en doublon",
            },
            {
                "name": "invalid",
                "color": "e4e669",
                "description": "Issue ou PR non valide",
            },
            {
                "name": "wontfix",
                "color": "ffffff",
                "description": "Ne sera pas corrig√©",
            },
            # ü§ù Contribution
            {
                "name": "help wanted",
                "color": "008672",
                "description": "Aide de la communaut√© bienvenue",
            },
            {
                "name": "good first issue",
                "color": "7057ff",
                "description": "Parfait pour les nouveaux contributeurs",
            },
            {
                "name": "needs-triage",
                "color": "f9d0c4",
                "description": "N√©cessite une √©valuation initiale",
            },
            {
                "name": "needs-review",
                "color": "fbca04",
                "description": "N√©cessite une r√©vision",
            },
            {
                "name": "needs-testing",
                "color": "c2e0c6",
                "description": "N√©cessite des tests",
            },
            # üéÆ Sp√©cifique au projet
            {
                "name": "luna-ai",
                "color": "9c27b0",
                "description": "Li√© au moteur LUNA AI",
            },
            {
                "name": "gamification",
                "color": "ff9800",
                "description": "Syst√®me de gamification",
            },
            {"name": "education", "color": "4caf50", "description": "Contenu √©ducatif"},
            {
                "name": "security",
                "color": "f44336",
                "description": "S√©curit√© et protection",
            },
            {
                "name": "performance",
                "color": "2196f3",
                "description": "Optimisation des performances",
            },
            {
                "name": "ui/ux",
                "color": "e91e63",
                "description": "Interface utilisateur et exp√©rience",
            },
            {"name": "api", "color": "607d8b", "description": "API et endpoints"},
            {
                "name": "database",
                "color": "795548",
                "description": "Base de donn√©es et stockage",
            },
            {"name": "testing", "color": "ffc107", "description": "Tests et qualit√©"},
            # üîß Technique
            {
                "name": "backend",
                "color": "3f51b5",
                "description": "Code backend et logique m√©tier",
            },
            {
                "name": "frontend",
                "color": "e91e63",
                "description": "Interface utilisateur et frontend",
            },
            {
                "name": "devops",
                "color": "009688",
                "description": "D√©ploiement et infrastructure",
            },
            {
                "name": "ci/cd",
                "color": "ff5722",
                "description": "Int√©gration continue et d√©ploiement",
            },
            # üìä Taille et complexit√©
            {
                "name": "size: xs",
                "color": "c2e0c6",
                "description": "Tr√®s petite t√¢che (< 1h)",
            },
            {
                "name": "size: s",
                "color": "9be9a8",
                "description": "Petite t√¢che (1-4h)",
            },
            {
                "name": "size: m",
                "color": "40c463",
                "description": "T√¢che moyenne (1-2 jours)",
            },
            {
                "name": "size: l",
                "color": "30a14e",
                "description": "Grande t√¢che (1-2 semaines)",
            },
            {
                "name": "size: xl",
                "color": "216e39",
                "description": "Tr√®s grande t√¢che (> 2 semaines)",
            },
        ]

    def check_auth(self) -> bool:
        """V√©rifie l'authentification GitHub"""
        try:
            response = requests.get(
                f"https://api.github.com/repos/{self.repo}",
                headers=self.headers,
            )
            return response.status_code == 200
        except Exception as e:
            print(f"‚ùå Erreur d'authentification: {e}")
            return False

    def get_existing_labels(self) -> list[dict[str, Any]]:
        """R√©cup√®re les labels existants"""
        try:
            response = requests.get(self.base_url, headers=self.headers)
            if response.status_code == 200:
                return response.json()
            print(
                f"‚ùå Erreur lors de la r√©cup√©ration des labels: {response.status_code}"
            )
            return []
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des labels: {e}")
            return []

    def create_label(self, label: dict[str, str]) -> bool:
        """Cr√©e un label"""
        try:
            response = requests.post(self.base_url, headers=self.headers, json=label)
            if response.status_code == 201:
                print(f"‚úÖ Label cr√©√©: {label['name']}")
                return True
            if response.status_code == 422:
                print(f"‚ö†Ô∏è  Label d√©j√† existant: {label['name']}")
                return True
            print(
                f"‚ùå Erreur lors de la cr√©ation du label {label['name']}: {response.status_code}",
            )
            return False
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation du label {label['name']}: {e}")
            return False

    def update_label(self, label_name: str, label: dict[str, str]) -> bool:
        """Met √† jour un label existant"""
        try:
            url = f"{self.base_url}/{label_name}"
            response = requests.patch(url, headers=self.headers, json=label)
            if response.status_code == 200:
                print(f"üîÑ Label mis √† jour: {label['name']}")
                return True
            print(
                f"‚ùå Erreur lors de la mise √† jour du label {label['name']}: {response.status_code}",
            )
            return False
        except Exception as e:
            print(f"‚ùå Erreur lors de la mise √† jour du label {label['name']}: {e}")
            return False

    def setup_labels(self) -> bool:
        """Configure tous les labels"""
        print("üéÆ Configuration des labels GitHub pour Arkalia Quest")
        print("=" * 60)

        # V√©rification de l'authentification
        if not self.check_auth():
            print("‚ùå Authentification GitHub √©chou√©e")
            print("üí° Assurez-vous que GITHUB_TOKEN est d√©fini et valide")
            return False

        print("‚úÖ Authentification GitHub r√©ussie")

        # R√©cup√©ration des labels existants
        existing_labels = self.get_existing_labels()
        existing_names = {label["name"] for label in existing_labels}

        print(f"üìä {len(existing_labels)} labels existants trouv√©s")
        print(f"üéØ {len(self.labels)} labels √† configurer")
        print()

        success_count = 0
        total_count = len(self.labels)

        for label in self.labels:
            if label["name"] in existing_names:
                # Mise √† jour du label existant
                if self.update_label(label["name"], label):
                    success_count += 1
            # Cr√©ation d'un nouveau label
            elif self.create_label(label):
                success_count += 1

        print()
        print("=" * 60)
        print(f"üìä R√©sum√©: {success_count}/{total_count} labels configur√©s avec succ√®s")

        if success_count == total_count:
            print("üéâ Tous les labels ont √©t√© configur√©s avec succ√®s !")
            return True
        print("‚ö†Ô∏è  Certains labels n'ont pas pu √™tre configur√©s")
        return False

    def generate_labels_documentation(self) -> str:
        """G√©n√®re la documentation des labels"""
        doc = """# üè∑Ô∏è Labels GitHub - Arkalia Quest

## üìã Vue d'ensemble

Ce document d√©crit tous les labels utilis√©s dans le projet Arkalia Quest pour organiser et cat√©goriser les issues et pull requests.

## üéØ Labels de Priorit√©

| Label | Couleur | Description |
|-------|---------|-------------|
| `priority: critical` | üî¥ | Probl√®me critique n√©cessitant une attention imm√©diate |
| `priority: high` | üü† | Probl√®me important n√©cessitant une attention rapide |
| `priority: medium` | üü° | Probl√®me de priorit√© moyenne |
| `priority: low` | üü¢ | Probl√®me de faible priorit√© |

## üè∑Ô∏è Types d'Issues

| Label | Couleur | Description |
|-------|---------|-------------|
| `bug` | üî¥ | Quelque chose ne fonctionne pas |
| `enhancement` | üîµ | Nouvelle fonctionnalit√© ou am√©lioration |
| `documentation` | üìò | Am√©liorations ou ajouts √† la documentation |
| `question` | üü£ | Question ou demande d'information |
| `duplicate` | ‚ö™ | Issue ou PR en doublon |
| `invalid` | üü° | Issue ou PR non valide |
| `wontfix` | ‚ö™ | Ne sera pas corrig√© |

## ü§ù Contribution

| Label | Couleur | Description |
|-------|---------|-------------|
| `help wanted` | üü¢ | Aide de la communaut√© bienvenue |
| `good first issue` | üü£ | Parfait pour les nouveaux contributeurs |
| `needs-triage` | üü† | N√©cessite une √©valuation initiale |
| `needs-review` | üü° | N√©cessite une r√©vision |
| `needs-testing` | üü¢ | N√©cessite des tests |

## üéÆ Sp√©cifique au Projet

| Label | Couleur | Description |
|-------|---------|-------------|
| `luna-ai` | üü£ | Li√© au moteur LUNA AI |
| `gamification` | üü† | Syst√®me de gamification |
| `education` | üü¢ | Contenu √©ducatif |
| `security` | üî¥ | S√©curit√© et protection |
| `performance` | üîµ | Optimisation des performances |
| `ui/ux` | üü£ | Interface utilisateur et exp√©rience |
| `api` | üîµ | API et endpoints |
| `database` | üü§ | Base de donn√©es et stockage |
| `testing` | üü° | Tests et qualit√© |

## üîß Technique

| Label | Couleur | Description |
|-------|---------|-------------|
| `backend` | üîµ | Code backend et logique m√©tier |
| `frontend` | üü£ | Interface utilisateur et frontend |
| `devops` | üü¢ | D√©ploiement et infrastructure |
| `ci/cd` | üü† | Int√©gration continue et d√©ploiement |

## üìä Taille et Complexit√©

| Label | Couleur | Description |
|-------|---------|-------------|
| `size: xs` | üü¢ | Tr√®s petite t√¢che (< 1h) |
| `size: s` | üü¢ | Petite t√¢che (1-4h) |
| `size: m` | üü° | T√¢che moyenne (1-2 jours) |
| `size: l` | üü† | Grande t√¢che (1-2 semaines) |
| `size: xl` | üî¥ | Tr√®s grande t√¢che (> 2 semaines) |

## üéØ Utilisation Recommand√©e

### Pour les Issues
1. **Type** : Toujours assigner un type (`bug`, `enhancement`, `documentation`, etc.)
2. **Priorit√©** : Assigner une priorit√© si appropri√©
3. **Sp√©cifique** : Ajouter des labels sp√©cifiques au projet si applicable
4. **Taille** : Estimer la taille pour les t√¢ches de d√©veloppement

### Pour les Pull Requests
1. **Type** : M√™me syst√®me que les issues
2. **Statut** : Utiliser `needs-review`, `needs-testing` selon l'√©tat
3. **Sp√©cifique** : Labels techniques selon les fichiers modifi√©s

## üîÑ Maintenance

Les labels sont maintenus automatiquement via le script `scripts/setup_github_labels.py`.

Pour ajouter de nouveaux labels :
1. Modifier le script `setup_github_labels.py`
2. Ex√©cuter le script pour appliquer les changements
3. Mettre √† jour cette documentation

---
*Documentation g√©n√©r√©e automatiquement pour Arkalia Quest*
"""
        return doc


def main():
    """Fonction principale"""
    print("üéÆ Configuration des labels GitHub - Arkalia Quest")
    print("=" * 60)

    # V√©rification du token GitHub
    token = os.getenv("GITHUB_TOKEN")
    if not token:
        print("‚ùå GITHUB_TOKEN non d√©fini")
        print("üí° D√©finissez votre token GitHub :")
        print("   export GITHUB_TOKEN=your_token_here")
        print("   ou cr√©ez un fichier .env avec GITHUB_TOKEN=your_token_here")
        return False

    # Configuration des labels
    setup = GitHubLabelsSetup(token)
    success = setup.setup_labels()

    if success:
        # G√©n√©ration de la documentation
        doc = setup.generate_labels_documentation()
        with open("docs/GITHUB_LABELS.md", "w", encoding="utf-8") as f:
            f.write(doc)
        print("üìö Documentation des labels g√©n√©r√©e: docs/GITHUB_LABELS.md")

    return success


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
